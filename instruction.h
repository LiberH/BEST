/**
 * generated by HARMLESS : 'Hardware ARchitecture Modeling Language
 *                          for Embedded Software Simulation'
 * model : e200z4
 *
 */

#ifndef __e200z4_INSTRUCTION_H__
#define __e200z4_INSTRUCTION_H__

#include "instructionBase.h"

class e200z4_SP_Check_abs_b_li_updatelr : public e200z4_instruction {
	s32 LI;  /* s24 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_b_li_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_b_li_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_b() {return true;};
	virtual bool hasID_li() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_revStatPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_revStatPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_revStatPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_d_statPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_d_statPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_d_statPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_nd_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_nd_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_nd_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bd_bi_bo_nd_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bd_bi_bo_nd_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bd_bi_bo_nd_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_revStatPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_revStatPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_revStatPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_d_statPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_d_statPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_d_statPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_revStatPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_revStatPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_revStatPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_statPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_statPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_statPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_f_revStatPred_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_f_revStatPred_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_f_revStatPred_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_f_statPred_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_f_statPred_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_f_statPred_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_statPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_statPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_statPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_noCond_revStatPred_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_noCond_revStatPred_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_noCond_revStatPred_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_noCond_statPred_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_noCond_statPred_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_noCond_statPred_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_nz_revStatPred_t_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_nz_revStatPred_t_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_nz_revStatPred_t_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_nz_statPred_t_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_nz_statPred_t_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_nz_statPred_t_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_revStatPred_t_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_revStatPred_t_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_revStatPred_t_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_d_statPred_t_tolr_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_d_statPred_t_tolr_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_d_statPred_t_tolr_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_f_nd_revStatPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_f_nd_revStatPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_f_nd_revStatPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_f_nd_statPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_f_nd_statPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_f_nd_statPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_revStatPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_revStatPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_revStatPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_statPred_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_statPred_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_statPred_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_nd_revStatPred_t_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_nd_revStatPred_t_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_nd_revStatPred_t_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_abs_bc_bi_bo_nd_statPred_t_tolr_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_abs_bc_bi_bo_nd_statPred_t_tolr_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_abs_bc_bi_bo_nd_statPred_t_tolr_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_b_li_rel_updatelr : public e200z4_instruction {
	s32 LI;  /* s24 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_b_li_rel_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_b_li_rel_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_b() {return true;};
	virtual bool hasID_li() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_revStatPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_revStatPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_revStatPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_statPred_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_statPred_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_statPred_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_rel_revStatPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_rel_revStatPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_rel_revStatPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_d_rel_statPred_t_updatelr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_d_rel_statPred_t_updatelr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_d_rel_statPred_t_updatelr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_revStatPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_revStatPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_revStatPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_statPred_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_statPred_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_statPred_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_nd_rel_revStatPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_nd_rel_revStatPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_nd_rel_revStatPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_bc_bd_bi_bo_nd_rel_statPred_t_updatelr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_bc_bd_bi_bo_nd_rel_statPred_t_updatelr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_bc_bd_bi_bo_nd_rel_statPred_t_updatelr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_updatelr() {return true;};
};

class e200z4_SP_Check_sc : public e200z4_instruction {
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_SP_Check_sc(const u32 pc, const u32 chunk1);
	virtual ~e200z4_SP_Check_sc() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_SP_Check() {return true;};
	virtual bool hasID_sc() {return true;};
};

class e200z4_abs_b_li : public e200z4_instruction {
	s32 LI;  /* s24 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_b_li(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_b_li() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_b() {return true;};
	virtual bool hasID_li() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_f_nz_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_f_nz_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_f_nz_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_f_nz_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_f_nz_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_f_nz_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_f_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_f_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_f_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_f_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_f_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_f_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_noCond_nz_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_noCond_nz_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_noCond_nz_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_noCond_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_noCond_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_noCond_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_noCond_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_noCond_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_noCond_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_nz_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_nz_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_nz_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_nz_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_nz_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_nz_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_revStatPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_revStatPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_revStatPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_d_statPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_d_statPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_d_statPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_f_nd_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_f_nd_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_f_nd_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_f_nd_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_f_nd_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_f_nd_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_nd_noCond_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_nd_noCond_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_nd_noCond_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_nd_noCond_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_nd_noCond_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_nd_noCond_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_nd_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_nd_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_nd_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bd_bi_bo_nd_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bd_bi_bo_nd_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bd_bi_bo_nd_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_f_nz_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_f_nz_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_f_nz_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_f_nz_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_f_nz_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_f_nz_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_f_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_f_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_f_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_f_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_f_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_f_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_noCond_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_noCond_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_noCond_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_noCond_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_noCond_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_noCond_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_nz_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_nz_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_nz_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_nz_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_nz_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_nz_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_revStatPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_revStatPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_revStatPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_d_statPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_d_statPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_d_statPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_f_nd_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_f_nd_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_f_nd_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_f_nd_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_f_nd_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_f_nd_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_nd_noCond_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_nd_noCond_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_nd_noCond_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_nd_noCond_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_nd_noCond_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_nd_noCond_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_nd_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_nd_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_nd_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bi_bo_ctr_nd_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_ctr_nd_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_ctr_nd_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_ctr() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_abs_bc_bi_bo_d_f_nz_revStatPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_f_nz_revStatPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_f_nz_revStatPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_f_nz_statPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_f_nz_statPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_f_nz_statPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_f_revStatPred_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_f_revStatPred_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_f_revStatPred_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_d_f_statPred_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_f_statPred_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_f_statPred_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_noCond_nz_statPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_noCond_nz_statPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_noCond_nz_statPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_noCond_revStatPred_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_noCond_revStatPred_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_noCond_revStatPred_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_d_noCond_statPred_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_noCond_statPred_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_noCond_statPred_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_d_nz_revStatPred_t_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_nz_revStatPred_t_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_nz_revStatPred_t_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_nz_statPred_t_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_nz_statPred_t_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_nz_statPred_t_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_d_revStatPred_t_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_revStatPred_t_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_revStatPred_t_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_d_statPred_t_tolr_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_d_statPred_t_tolr_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_d_statPred_t_tolr_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_abs_bc_bi_bo_f_nd_revStatPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_f_nd_revStatPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_f_nd_revStatPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_f_nd_statPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_f_nd_statPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_f_nd_statPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_nd_noCond_revStatPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_nd_noCond_revStatPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_nd_noCond_revStatPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_nd_noCond_statPred_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_nd_noCond_statPred_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_nd_noCond_statPred_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_nd_revStatPred_t_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_nd_revStatPred_t_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_nd_revStatPred_t_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_abs_bc_bi_bo_nd_statPred_t_tolr : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_abs_bc_bi_bo_nd_statPred_t_tolr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_abs_bc_bi_bo_nd_statPred_t_tolr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_abs() {return true;};
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_tolr() {return true;};
};

class e200z4_add_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_add_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_add_noOv_noStatus_ra_rb_rd_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_noOv_noStatus_ra_rb_rd_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noOv_noStatus_ra_rb_rd_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_add_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_add_noOv_ra_rb_rd_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_noOv_ra_rb_rd_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noOv_ra_rb_rd_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_add_noStatus_ra_rb_rd_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_noStatus_ra_rb_rd_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noStatus_ra_rb_rd_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_add_noStatus_ra_rb_rd_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_noStatus_ra_rb_rd_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_noStatus_ra_rb_rd_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_add_ra_rb_rd_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_ra_rb_rd_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_ra_rb_rd_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_add_ra_rb_rd_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_add_ra_rb_rd_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_add_ra_rb_rd_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_add() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_adde_noOv_noStatus_ra_rb_rd_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_adde_noOv_noStatus_ra_rb_rd_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_adde_noOv_noStatus_ra_rb_rd_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_adde() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_adde_noOv_ra_rb_rd_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_adde_noOv_ra_rb_rd_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_adde_noOv_ra_rb_rd_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_adde() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_adde_noStatus_ra_rb_rd_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_adde_noStatus_ra_rb_rd_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_adde_noStatus_ra_rb_rd_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_adde() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_adde_ra_rb_rd_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_adde_ra_rb_rd_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_adde_ra_rb_rd_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_adde() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addi_noOv_noStatus_ra_rd_simm : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_addi_noOv_noStatus_ra_rd_simm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addi_noOv_noStatus_ra_rd_simm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addi() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
};

class e200z4_addic_noOv_noStatus_ra_rd_simm_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addic_noOv_noStatus_ra_rd_simm_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addic_noOv_noStatus_ra_rd_simm_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addic() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addic_noOv_ra_rd_simm_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addic_noOv_ra_rd_simm_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addic_noOv_ra_rd_simm_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addic() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addis_noOv_noStatus_ra_rd_simm : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_addis_noOv_noStatus_ra_rd_simm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addis_noOv_noStatus_ra_rd_simm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addis() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
};

class e200z4_addme_noOv_noStatus_ra_rd_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addme_noOv_noStatus_ra_rd_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addme_noOv_noStatus_ra_rd_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addme() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addme_noOv_ra_rd_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addme_noOv_ra_rd_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addme_noOv_ra_rd_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addme() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addme_noStatus_ra_rd_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addme_noStatus_ra_rd_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addme_noStatus_ra_rd_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addme() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addme_ra_rd_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addme_ra_rd_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addme_ra_rd_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addme() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addze_noOv_noStatus_ra_rd_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addze_noOv_noStatus_ra_rd_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addze_noOv_noStatus_ra_rd_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addze() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addze_noOv_ra_rd_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addze_noOv_ra_rd_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addze_noOv_ra_rd_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addze() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addze_noStatus_ra_rd_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addze_noStatus_ra_rd_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addze_noStatus_ra_rd_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addze() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_addze_ra_rd_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_addze_ra_rd_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_addze_ra_rd_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_addze() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_aftercomplemented_and_noStatus_notcomplemented_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_aftercomplemented_and_noStatus_notcomplemented_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_and_noStatus_notcomplemented_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_and() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_aftercomplemented_and_notcomplemented_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_aftercomplemented_and_notcomplemented_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_and_notcomplemented_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_and() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_aftercomplemented_noStatus_notcomplemented_or_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_aftercomplemented_noStatus_notcomplemented_or_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_noStatus_notcomplemented_or_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_aftercomplemented_noStatus_notcomplemented_ra_rb_rs_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_aftercomplemented_noStatus_notcomplemented_ra_rb_rs_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_noStatus_notcomplemented_ra_rb_rs_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_aftercomplemented_notcomplemented_or_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_aftercomplemented_notcomplemented_or_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_notcomplemented_or_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_aftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_aftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_aftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_aftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_algebraic_d_half_load_notu_ra_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_algebraic_d_half_load_notu_ra_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_algebraic_d_half_load_notu_ra_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_algebraic() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_algebraic_d_half_load_ra_rd_u : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_algebraic_d_half_load_ra_rd_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_algebraic_d_half_load_ra_rd_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_algebraic() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_algebraic_half_load_notu_ra_rb_rd_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_algebraic_half_load_notu_ra_rb_rd_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_algebraic_half_load_notu_ra_rb_rd_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_algebraic() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_algebraic_half_load_ra_rb_rd_u_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_algebraic_half_load_ra_rb_rd_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_algebraic_half_load_ra_rb_rd_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_algebraic() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_algebraic_load_notu_r_ra_rb_rd_word_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_algebraic_load_notu_r_ra_rb_rd_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_algebraic_load_notu_r_ra_rb_rd_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_algebraic() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_r() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_and_complemented_noStatus_notaftercomplemented_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_and_complemented_noStatus_notaftercomplemented_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_complemented_noStatus_notaftercomplemented_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_complemented() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_and_complemented_notaftercomplemented_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_and_complemented_notaftercomplemented_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_complemented_notaftercomplemented_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_complemented() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_and_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_and_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_and_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_and_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_and_notaftercomplemented_notshifted_ra_rs_uimm_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_and_notaftercomplemented_notshifted_ra_rs_uimm_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_notaftercomplemented_notshifted_ra_rs_uimm_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notshifted() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_uimm() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_and_notaftercomplemented_ra_rs_shifted_uimm_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_and_notaftercomplemented_ra_rs_shifted_uimm_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_and_notaftercomplemented_ra_rs_shifted_uimm_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_and() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_shifted() {return true;};
	virtual bool hasID_uimm() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_arith_cmp_crfd_immediate_l_ra_simm : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 L;  /* u1 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_arith_cmp_crfd_immediate_l_ra_simm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_arith_cmp_crfd_immediate_l_ra_simm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_arith() {return true;};
	virtual bool hasID_cmp() {return true;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_immediate() {return true;};
	virtual bool hasID_l() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
};

class e200z4_arith_cmp_crfd_l_ra_rb_reg : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 L;  /* u1 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_arith_cmp_crfd_l_ra_rb_reg(const u32 pc, const u32 chunk1);
	virtual ~e200z4_arith_cmp_crfd_l_ra_rb_reg() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_arith() {return true;};
	virtual bool hasID_cmp() {return true;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_l() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
};

class e200z4_b_li_rel : public e200z4_instruction {
	s32 LI;  /* s24 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_b_li_rel(const u32 pc, const u32 chunk1);
	virtual ~e200z4_b_li_rel() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_b() {return true;};
	virtual bool hasID_li() {return true;};
	virtual bool hasID_rel() {return true;};
};

class e200z4_bc_bd_bi_bo_d_f_nz_rel_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_f_nz_rel_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_f_nz_rel_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_bc_bd_bi_bo_d_f_nz_rel_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_f_nz_rel_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_f_nz_rel_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_bc_bd_bi_bo_d_f_rel_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_f_rel_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_f_rel_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_d_f_rel_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_f_rel_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_f_rel_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_bc_bd_bi_bo_d_noCond_nz_rel_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_noCond_nz_rel_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_noCond_nz_rel_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_bc_bd_bi_bo_d_noCond_rel_revStatPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_noCond_rel_revStatPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_noCond_rel_revStatPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_d_noCond_rel_statPred_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_noCond_rel_statPred_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_noCond_rel_statPred_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_d_nz_rel_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_nz_rel_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_nz_rel_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_bc_bd_bi_bo_d_nz_rel_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_nz_rel_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_nz_rel_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_nz() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_bc_bd_bi_bo_d_rel_revStatPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_rel_revStatPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_rel_revStatPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_d_rel_statPred_t_z : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_d_rel_statPred_t_z(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_d_rel_statPred_t_z() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
	virtual bool hasID_z() {return true;};
};

class e200z4_bc_bd_bi_bo_f_nd_rel_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_f_nd_rel_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_f_nd_rel_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_bc_bd_bi_bo_f_nd_rel_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_f_nd_rel_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_f_nd_rel_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_f() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_bc_bd_bi_bo_nd_noCond_rel_revStatPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_nd_noCond_rel_revStatPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_nd_noCond_rel_revStatPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
};

class e200z4_bc_bd_bi_bo_nd_noCond_rel_statPred : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_nd_noCond_rel_statPred(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_nd_noCond_rel_statPred() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_noCond() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
};

class e200z4_bc_bd_bi_bo_nd_rel_revStatPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_nd_rel_revStatPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_nd_rel_revStatPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_revStatPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_bc_bd_bi_bo_nd_rel_statPred_t : public e200z4_instruction {
	u8 BO;  /* u5 */
	u8 BI;  /* u5 */
	s16 BD;  /* s14 */
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_bc_bd_bi_bo_nd_rel_statPred_t(const u32 pc, const u32 chunk1);
	virtual ~e200z4_bc_bd_bi_bo_nd_rel_statPred_t() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual void detectBranch(arch *_arch);
	virtual bool isBranchUnconditional() {return false;}
	virtual bool isBranchStaticallyUnknown() {return false;}
	virtual bool hasID_bc() {return true;};
	virtual bool hasID_bd() {return true;};
	virtual bool hasID_bi() {return true;};
	virtual bool hasID_bo() {return true;};
	virtual bool hasID_nd() {return true;};
	virtual bool hasID_rel() {return true;};
	virtual bool hasID_statPred() {return true;};
	virtual bool hasID_t() {return true;};
};

class e200z4_br_half_load_notu_ra_rb_rd_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_br_half_load_notu_ra_rb_rd_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_br_half_load_notu_ra_rb_rd_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_br() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_br_half_notu_ra_rb_rs_store_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_br_half_notu_ra_rb_rs_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_br_half_notu_ra_rb_rs_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_br() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_br_load_notu_ra_rb_rd_word_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_br_load_notu_ra_rb_rd_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_br_load_notu_ra_rb_rd_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_br() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_br_notu_ra_rb_rs_store_word_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_br_notu_ra_rb_rs_store_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_br_notu_ra_rb_rs_store_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_br() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_byte_d_load_notu_ra_rd_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_d_load_notu_ra_rd_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_d_load_notu_ra_rd_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_byte_d_load_ra_rd_u_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_d_load_ra_rd_u_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_d_load_ra_rd_u_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_byte_d_notu_ra_rs_store : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_d_notu_ra_rs_store(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_d_notu_ra_rs_store() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
};

class e200z4_byte_d_ra_rs_store_u : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_d_ra_rs_store_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_d_ra_rs_store_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_byte_load_notu_ra_rb_rd_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_load_notu_ra_rb_rd_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_load_notu_ra_rb_rd_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_byte_load_ra_rb_rd_u_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_load_ra_rb_rd_u_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_load_ra_rb_rd_u_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_byte_notu_ra_rb_rs_store_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_notu_ra_rb_rs_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_notu_ra_rb_rs_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_byte_ra_rb_rs_store_u_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_byte_ra_rb_rs_store_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_byte_ra_rb_rs_store_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_byte() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_c_notu_ra_rb_rs_store_useStatus_word_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_c_notu_ra_rb_rs_store_useStatus_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_c_notu_ra_rb_rs_store_useStatus_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_c() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_cmp_crfd_immediate_l_logical_ra_uimm : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 L;  /* u1 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_cmp_crfd_immediate_l_logical_ra_uimm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_cmp_crfd_immediate_l_logical_ra_uimm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_cmp() {return true;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_immediate() {return true;};
	virtual bool hasID_l() {return true;};
	virtual bool hasID_logical() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_uimm() {return true;};
};

class e200z4_cmp_crfd_l_logical_ra_rb_reg : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 L;  /* u1 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_cmp_crfd_l_logical_ra_rb_reg(const u32 pc, const u32 chunk1);
	virtual ~e200z4_cmp_crfd_l_logical_ra_rb_reg() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_cmp() {return true;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_l() {return true;};
	virtual bool hasID_logical() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
};

class e200z4_cntlzw_noStatus_ra_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_cntlzw_noStatus_ra_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_cntlzw_noStatus_ra_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_cntlzw() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_cntlzw_ra_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_cntlzw_ra_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_cntlzw_ra_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_cntlzw() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_complemented_noStatus_notaftercomplemented_or_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_complemented_noStatus_notaftercomplemented_or_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_complemented_noStatus_notaftercomplemented_or_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_complemented() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_complemented_notaftercomplemented_or_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_complemented_notaftercomplemented_or_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_complemented_notaftercomplemented_or_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_complemented() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_crand_crba_crbb_crbd : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crand_crba_crbb_crbd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crand_crba_crbb_crbd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crand() {return true;};
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
};

class e200z4_crandc_crba_crbb_crbd : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crandc_crba_crbb_crbd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crandc_crba_crbb_crbd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crandc() {return true;};
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
};

class e200z4_crba_crbb_crbd_creqv : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_creqv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_creqv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_creqv() {return true;};
};

class e200z4_crba_crbb_crbd_crnand : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_crnand(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_crnand() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_crnand() {return true;};
};

class e200z4_crba_crbb_crbd_crnor : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_crnor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_crnor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_crnor() {return true;};
};

class e200z4_crba_crbb_crbd_cror : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_cror(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_cror() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_cror() {return true;};
};

class e200z4_crba_crbb_crbd_crorc : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_crorc(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_crorc() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_crorc() {return true;};
};

class e200z4_crba_crbb_crbd_crxor : public e200z4_instruction {
	u8 crbD;  /* u5 */
	u8 crbA;  /* u5 */
	u8 crbB;  /* u5 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crba_crbb_crbd_crxor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crba_crbb_crbd_crxor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crba() {return true;};
	virtual bool hasID_crbb() {return true;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_crxor() {return true;};
};

class e200z4_crbd_mtfsb0_noStatus : public e200z4_instruction {
	u8 crbD;  /* u5 */

	public:
	e200z4_crbd_mtfsb0_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crbd_mtfsb0_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_mtfsb0() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_crbd_mtfsb0_useStatus : public e200z4_instruction {
	u8 crbD;  /* u5 */

	public:
	e200z4_crbd_mtfsb0_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crbd_mtfsb0_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_mtfsb0() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_crbd_mtfsb1_noStatus : public e200z4_instruction {
	u8 crbD;  /* u5 */

	public:
	e200z4_crbd_mtfsb1_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crbd_mtfsb1_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_mtfsb1() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_crbd_mtfsb1_useStatus : public e200z4_instruction {
	u8 crbD;  /* u5 */

	public:
	e200z4_crbd_mtfsb1_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crbd_mtfsb1_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crbd() {return true;};
	virtual bool hasID_mtfsb1() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_crfd_crfs_mcrf : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 crfS;  /* u3 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crfd_crfs_mcrf(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_crfs_mcrf() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_crfs() {return true;};
	virtual bool hasID_mcrf() {return true;};
};

class e200z4_crfd_crfs_mcrfs : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 crfS;  /* u3 */

	public:
	e200z4_crfd_crfs_mcrfs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_crfs_mcrfs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_crfs() {return true;};
	virtual bool hasID_mcrfs() {return true;};
};

class e200z4_crfd_fcmpo_fra_frb : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_crfd_fcmpo_fra_frb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_fcmpo_fra_frb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_fcmpo() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
};

class e200z4_crfd_fcmpu_fra_frb : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_crfd_fcmpu_fra_frb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_fcmpu_fra_frb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_fcmpu() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
};

class e200z4_crfd_imm_mtfsfi_noStatus : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 IMM;  /* u4 */

	public:
	e200z4_crfd_imm_mtfsfi_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_imm_mtfsfi_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_mtfsfi() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_crfd_imm_mtfsfi_useStatus : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u8 IMM;  /* u4 */

	public:
	e200z4_crfd_imm_mtfsfi_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_imm_mtfsfi_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_mtfsfi() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_crfd_mcrxr : public e200z4_instruction {
	u8 crfD;  /* u3 */
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crfd_mcrxr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crfd_mcrxr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crfd() {return true;};
	virtual bool hasID_mcrxr() {return true;};
};

class e200z4_crm_mtcrf_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 CRM;  /* u8 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_crm_mtcrf_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_crm_mtcrf_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_crm() {return true;};
	virtual bool hasID_mtcrf() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_d_fd_frd_load_notu_ra : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileFSRU_FPRMaskRead;
	u64 m_DDCRegFileFSRU_FPRMaskWrite;
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_fd_frd_load_notu_ra(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_fd_frd_load_notu_ra() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 3;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
};

class e200z4_d_fd_frd_load_ra_u : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileFSRU_FPRMaskRead;
	u64 m_DDCRegFileFSRU_FPRMaskWrite;
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_fd_frd_load_ra_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_fd_frd_load_ra_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 3;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_d_fd_frs_notu_ra_store : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileFSRU_FPRMaskRead;
	u64 m_DDCRegFileFSRU_FPRMaskWrite;
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_fd_frs_notu_ra_store(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_fd_frs_notu_ra_store() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 3;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_store() {return true;};
};

class e200z4_d_fd_frs_ra_store_u : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileFSRU_FPRMaskRead;
	u64 m_DDCRegFileFSRU_FPRMaskWrite;
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_fd_frs_ra_store_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_fd_frs_ra_store_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 3;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_d_frd_fs_load_notu_ra : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */

	public:
	e200z4_d_frd_fs_load_notu_ra(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_frd_fs_load_notu_ra() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
};

class e200z4_d_frd_fs_load_ra_u : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */

	public:
	e200z4_d_frd_fs_load_ra_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_frd_fs_load_ra_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_d_frs_fs_notu_ra_store : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */

	public:
	e200z4_d_frs_fs_notu_ra_store(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_frs_fs_notu_ra_store() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_store() {return true;};
};

class e200z4_d_frs_fs_ra_store_u : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */

	public:
	e200z4_d_frs_fs_ra_store_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_frs_fs_ra_store_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_d_half_load_notu_ra_rd_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_half_load_notu_ra_rd_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_half_load_notu_ra_rd_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_d_half_load_ra_rd_u_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_half_load_ra_rd_u_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_half_load_ra_rd_u_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_d_half_notu_ra_rs_store : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_half_notu_ra_rs_store(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_half_notu_ra_rs_store() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
};

class e200z4_d_half_ra_rs_store_u : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_half_ra_rs_store_u(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_half_ra_rs_store_u() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_half() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
};

class e200z4_d_load_mw_notu_ra_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */

	public:
	e200z4_d_load_mw_notu_ra_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_load_mw_notu_ra_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_d() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_mw() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_d_load_notu_ra_rd_word_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_load_notu_ra_rd_word_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_load_notu_ra_rd_word_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_d_load_ra_rd_u_word_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_load_ra_rd_u_word_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_load_ra_rd_u_word_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_d_mw_notu_ra_rs_store : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_mw_notu_ra_rs_store(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_mw_notu_ra_rs_store() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_mw() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
};

class e200z4_d_notu_ra_rs_store_word : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_notu_ra_rs_store_word(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_notu_ra_rs_store_word() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_word() {return true;};
};

class e200z4_d_ra_rs_store_u_word : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	s16 D;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_d_ra_rs_store_u_word(const u32 pc, const u32 chunk1);
	virtual ~e200z4_d_ra_rs_store_u_word() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_d() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_word() {return true;};
};

class e200z4_dcba_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcba_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcba_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcba() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbf_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbf_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbf_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbf() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbi_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbi_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbi_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbi() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbst_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbst_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbst_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbst() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbt_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbt_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbt_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbtst_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbtst_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbtst_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbtst() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_dcbz_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_dcbz_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_dcbz_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_dcbz() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_divw_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_divw_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divw_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_divw_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divw_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divw_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_divw_noStatus_ra_rb_rd_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divw_noStatus_ra_rb_rd_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divw_noStatus_ra_rb_rd_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divw() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_divw_ra_rb_rd_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divw_ra_rb_rd_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divw_ra_rb_rd_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divw() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_divwu_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_divwu_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divwu_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divwu() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_divwu_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divwu_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divwu_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divwu() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_divwu_noStatus_ra_rb_rd_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divwu_noStatus_ra_rb_rd_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divwu_noStatus_ra_rb_rd_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divwu() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_divwu_ra_rb_rd_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_divwu_ra_rb_rd_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_divwu_ra_rb_rd_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_divwu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_eciwx_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_eciwx_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_eciwx_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_eciwx() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_ecowx_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_ecowx_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ecowx_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_ecowx() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_eieio : public e200z4_instruction {

	public:
	e200z4_eieio(const u32 pc, const u32 chunk1);
	virtual ~e200z4_eieio() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_eieio() {return true;};
};

class e200z4_eq_imm_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_eq_imm_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_eq_imm_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_eq() {return true;};
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_eq_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_eq_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_eq_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_eq() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_extsb_noStatus_ra_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_extsb_noStatus_ra_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_extsb_noStatus_ra_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_extsb() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_extsb_ra_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_extsb_ra_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_extsb_ra_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_extsb() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_extsh_noStatus_ra_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_extsh_noStatus_ra_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_extsh_noStatus_ra_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_extsh() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_extsh_ra_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_extsh_ra_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_extsh_ra_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_extsh() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fabs_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fabs_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fabs_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fabs() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fabs_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fabs_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fabs_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fabs() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fadd_fra_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fadd_fra_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fadd_fra_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fadd_fra_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fadd_fra_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fadd_fra_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fadds_fra_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fadds_fra_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fadds_fra_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fadds_fra_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fadds_fra_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fadds_fra_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fctiw_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fctiw_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fctiw_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fctiw() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fctiw_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fctiw_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fctiw_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fctiw() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fctiwz_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fctiwz_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fctiwz_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fctiwz() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fctiwz_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fctiwz_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fctiwz_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fctiwz() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fd_frd_load_notu_ra_rb_x : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_fd_frd_load_notu_ra_rb_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fd_frd_load_notu_ra_rb_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_fd_frd_load_ra_rb_u_x : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_fd_frd_load_ra_rb_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fd_frd_load_ra_rb_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_fd_frs_notu_ra_rb_store_x : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_fd_frs_notu_ra_rb_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fd_frs_notu_ra_rb_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_fd_frs_ra_rb_store_u_x : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_fd_frs_ra_rb_store_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fd_frs_ra_rb_store_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fd() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_fdiv_fra_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fdiv_fra_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fdiv_fra_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fdiv() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fdiv_fra_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fdiv_fra_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fdiv_fra_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fdiv() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fdivs_fra_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fdivs_fra_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fdivs_fra_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fdivs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fdivs_fra_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fdivs_fra_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fdivs_fra_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fdivs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fiw_frs_notu_ra_rb_store_x : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_fiw_frs_notu_ra_rb_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fiw_frs_notu_ra_rb_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fiw() {return true;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_fm_frb_mtfsf_noStatus : public e200z4_instruction {
	u8 FM;  /* u8 */
	u8 frB;  /* u5 */

	public:
	e200z4_fm_frb_mtfsf_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fm_frb_mtfsf_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fm() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_mtfsf() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fm_frb_mtfsf_useStatus : public e200z4_instruction {
	u8 FM;  /* u8 */
	u8 frB;  /* u5 */

	public:
	e200z4_fm_frb_mtfsf_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fm_frb_mtfsf_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fm() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_mtfsf() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmadd_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmadd_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmadd_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmadd_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmadd_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmadd_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmadds_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmadds_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmadds_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmadds_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmadds_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmadds_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmr_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fmr_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmr_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmr() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmr_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fmr_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmr_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmr() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmsub_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmsub_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmsub_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmsub() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmsub_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmsub_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmsub_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmsub() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmsubs_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmsubs_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmsubs_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmsubs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmsubs_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmsubs_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmsubs_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmsubs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmul_fra_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmul_fra_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmul_fra_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmul() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmul_fra_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmul_fra_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmul_fra_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmul() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fmuls_fra_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmuls_fra_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmuls_fra_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmuls() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fmuls_fra_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fmuls_fra_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fmuls_fra_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fmuls() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fnabs_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fnabs_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnabs_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnabs() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fnabs_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fnabs_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnabs_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnabs() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fneg_frb_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fneg_frb_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fneg_frb_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fneg() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fneg_frb_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fneg_frb_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fneg_frb_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fneg() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fnmadd_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmadd_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmadd_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fnmadd_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmadd_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmadd_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmadd() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fnmadds_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmadds_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmadds_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fnmadds_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmadds_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmadds_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmadds() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fnmsub_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmsub_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmsub_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmsub() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fnmsub_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmsub_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmsub_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmsub() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fnmsubs_fra_frb_frc_frd_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmsubs_fra_frb_frc_frd_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmsubs_fra_frb_frc_frd_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmsubs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fnmsubs_fra_frb_frc_frd_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fnmsubs_fra_frb_frc_frd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fnmsubs_fra_frb_frc_frd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fnmsubs() {return true;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fra_frb_frc_frd_fsel_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fra_frb_frc_frd_fsel_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frc_frd_fsel_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsel() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fra_frb_frc_frd_fsel_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */
	u8 frC;  /* u5 */

	public:
	e200z4_fra_frb_frc_frd_fsel_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frc_frd_fsel_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frc() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsel() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fra_frb_frd_fsub_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fra_frb_frd_fsub_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frd_fsub_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsub() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fra_frb_frd_fsub_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fra_frb_frd_fsub_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frd_fsub_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsub() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_fra_frb_frd_fsubs_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fra_frb_frd_fsubs_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frd_fsubs_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsubs() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_fra_frb_frd_fsubs_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frA;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_fra_frb_frd_fsubs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_fra_frb_frd_fsubs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_fra() {return true;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsubs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frb_frd_fres_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fres_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fres_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fres() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frb_frd_fres_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fres_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fres_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fres() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frb_frd_frsp_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_frsp_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_frsp_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_frsp() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frb_frd_frsp_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_frsp_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_frsp_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_frsp() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frb_frd_frsqrte_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_frsqrte_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_frsqrte_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_frsqrte() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frb_frd_frsqrte_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_frsqrte_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_frsqrte_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_frsqrte() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frb_frd_fsqrt_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fsqrt_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fsqrt_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsqrt() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frb_frd_fsqrt_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fsqrt_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fsqrt_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsqrt() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frb_frd_fsqrts_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fsqrts_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fsqrts_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsqrts() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frb_frd_fsqrts_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 frB;  /* u5 */

	public:
	e200z4_frb_frd_fsqrts_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frb_frd_fsqrts_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frb() {return true;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fsqrts() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frd_fs_load_notu_ra_rb_x : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_frd_fs_load_notu_ra_rb_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frd_fs_load_notu_ra_rb_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_frd_fs_load_ra_rb_u_x : public e200z4_instruction {
	u8 frD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_frd_fs_load_ra_rb_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frd_fs_load_ra_rb_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_frd_mffs_noStatus : public e200z4_instruction {
	u8 frD;  /* u5 */

	public:
	e200z4_frd_mffs_noStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frd_mffs_noStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_mffs() {return true;};
	virtual bool hasID_noStatus() {return true;};
};

class e200z4_frd_mffs_useStatus : public e200z4_instruction {
	u8 frD;  /* u5 */

	public:
	e200z4_frd_mffs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frd_mffs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frd() {return true;};
	virtual bool hasID_mffs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_frs_fs_notu_ra_rb_store_x : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_frs_fs_notu_ra_rb_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frs_fs_notu_ra_rb_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_frs_fs_ra_rb_store_u_x : public e200z4_instruction {
	u8 frS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_frs_fs_ra_rb_store_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_frs_fs_ra_rb_store_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_frs() {return true;};
	virtual bool hasID_fs() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_ge_imm_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ge_imm_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ge_imm_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ge() {return true;};
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_ge_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ge_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ge_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ge() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_gt_imm_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_gt_imm_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_gt_imm_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_gt() {return true;};
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_gt_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_gt_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_gt_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_gt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_half_load_notu_ra_rb_rd_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_half_load_notu_ra_rb_rd_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_half_load_notu_ra_rb_rd_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_half_load_ra_rb_rd_u_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_half_load_ra_rb_rd_u_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_half_load_ra_rb_rd_u_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_half() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_half_notu_ra_rb_rs_store_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_half_notu_ra_rb_rs_store_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_half_notu_ra_rb_rs_store_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_half() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_half_ra_rb_rs_store_u_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_half_ra_rb_rs_store_u_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_half_ra_rb_rs_store_u_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_half() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_i_load_nb_notu_ra_rd_sw : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 NB;  /* u5 */

	public:
	e200z4_i_load_nb_notu_ra_rd_sw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_i_load_nb_notu_ra_rd_sw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_i() {return true;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_nb() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_sw() {return true;};
};

class e200z4_i_nb_notu_ra_rs_store_sw : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 NB;  /* u5 */

	public:
	e200z4_i_nb_notu_ra_rs_store_sw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_i_nb_notu_ra_rs_store_sw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_i() {return true;};
	virtual bool hasID_nb() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_sw() {return true;};
};

class e200z4_icbi_ra_rb : public e200z4_instruction {
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_icbi_ra_rb(const u32 pc, const u32 chunk1);
	virtual ~e200z4_icbi_ra_rb() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_icbi() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
};

class e200z4_imm_le_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_le_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_le_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_le() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_lge_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_lge_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_lge_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_lge() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_lgt_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_lgt_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_lgt_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_lgt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_lle_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_lle_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_lle_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_lle() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_llt_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_llt_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_llt_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_llt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_lt_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_lt_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_lt_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_lt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_ne_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_ne_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_ne_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_ne() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_imm_notSimple_ra_simm_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_imm_notSimple_ra_simm_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_imm_notSimple_ra_simm_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_imm() {return true;};
	virtual bool hasID_notSimple() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_isync : public e200z4_instruction {

	public:
	e200z4_isync(const u32 pc, const u32 chunk1);
	virtual ~e200z4_isync() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_isync() {return true;};
};

class e200z4_le_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_le_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_le_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_le() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_lge_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_lge_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_lge_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_lge() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_lgt_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_lgt_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_lgt_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_lgt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_lle_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_lle_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_lle_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_lle() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_llt_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_llt_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_llt_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_llt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_load_notu_ra_rb_rd_sw_x : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_load_notu_ra_rb_rd_sw_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_load_notu_ra_rb_rd_sw_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_sw() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_load_notu_ra_rb_rd_word_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_load_notu_ra_rb_rd_word_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_load_notu_ra_rb_rd_word_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_load() {return true;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_load_ra_rb_rd_u_word_x_zero : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_load_ra_rb_rd_u_word_x_zero(const u32 pc, const u32 chunk1);
	virtual ~e200z4_load_ra_rb_rd_u_word_x_zero() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_load() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
	virtual bool hasID_zero() {return true;};
};

class e200z4_lt_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_lt_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_lt_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_lt() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_mb_me_noStatus_ra_rb_rlwnm_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mb_me_noStatus_ra_rb_rlwnm_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_noStatus_ra_rb_rlwnm_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rlwnm() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_mb_me_noStatus_ra_rlw_rlwimi_rs_sh : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mb_me_noStatus_ra_rlw_rlwimi_rs_sh(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_noStatus_ra_rlw_rlwimi_rs_sh() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rlw() {return true;};
	virtual bool hasID_rlwimi() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
};

class e200z4_mb_me_noStatus_ra_rlwinm_rs_sh : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mb_me_noStatus_ra_rlwinm_rs_sh(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_noStatus_ra_rlwinm_rs_sh() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rlwinm() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
};

class e200z4_mb_me_ra_rb_rlwnm_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mb_me_ra_rb_rlwnm_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_ra_rb_rlwnm_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rlwnm() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mb_me_ra_rlw_rlwimi_rs_sh_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mb_me_ra_rlw_rlwimi_rs_sh_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_ra_rlw_rlwimi_rs_sh_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rlw() {return true;};
	virtual bool hasID_rlwimi() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mb_me_ra_rlwinm_rs_sh_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u8 MB;  /* u5 */
	u8 ME;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mb_me_ra_rlwinm_rs_sh_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mb_me_ra_rlwinm_rs_sh_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mb() {return true;};
	virtual bool hasID_me() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rlwinm() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mfcr_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mfcr_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mfcr_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mfcr() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mfmsr_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mfmsr_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mfmsr_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mfmsr() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mfspr_rd_spr : public e200z4_instruction {
	u8 rD;  /* u5 */
	u16 SPR;  /* u10 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mfspr_rd_spr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mfspr_rd_spr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mfspr() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_spr() {return true;};
};

class e200z4_mfsr_rd_sr : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 SR;  /* u4 */

	public:
	e200z4_mfsr_rd_sr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mfsr_rd_sr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_mfsr() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_sr() {return true;};
};

class e200z4_mfsrin_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_mfsrin_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mfsrin_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_mfsrin() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mftb_rd_tbr : public e200z4_instruction {
	u8 rD;  /* u5 */
	u16 TBR;  /* u10 */

	public:
	e200z4_mftb_rd_tbr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mftb_rd_tbr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_mftb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_tbr() {return true;};
};

class e200z4_mtmsr_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mtmsr_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mtmsr_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mtmsr() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_mtspr_rs_spr : public e200z4_instruction {
	u8 rS;  /* u5 */
	u16 SPR;  /* u10 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mtspr_rs_spr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mtspr_rs_spr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mtspr() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_spr() {return true;};
};

class e200z4_mtsr_rs_sr : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 SR;  /* u4 */

	public:
	e200z4_mtsr_rs_sr(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mtsr_rs_sr() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_mtsr() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sr() {return true;};
};

class e200z4_mtsrin_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_mtsrin_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mtsrin_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_mtsrin() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_mulhw_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mulhw_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mulhw_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mulhw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mulhw_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mulhw_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mulhw_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mulhw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mulhwu_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mulhwu_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mulhwu_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mulhwu() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mulhwu_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mulhwu_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mulhwu_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mulhwu() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mulli_noOv_noStatus_ra_rd_simm : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mulli_noOv_noStatus_ra_rd_simm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mulli_noOv_noStatus_ra_rd_simm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mulli() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
};

class e200z4_mullw_noOv_noStatus_ra_rb_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_mullw_noOv_noStatus_ra_rb_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mullw_noOv_noStatus_ra_rb_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mullw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_mullw_noOv_ra_rb_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mullw_noOv_ra_rb_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mullw_noOv_ra_rb_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mullw() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_mullw_noStatus_ra_rb_rd_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mullw_noStatus_ra_rb_rd_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mullw_noStatus_ra_rb_rd_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mullw() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_mullw_ra_rb_rd_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_mullw_ra_rb_rd_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_mullw_ra_rb_rd_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_mullw() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_ne_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ne_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ne_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ne() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_neg_noOv_noStatus_ra_rd : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_neg_noOv_noStatus_ra_rd(const u32 pc, const u32 chunk1);
	virtual ~e200z4_neg_noOv_noStatus_ra_rd() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_neg() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
};

class e200z4_neg_noOv_ra_rd_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_neg_noOv_ra_rd_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_neg_noOv_ra_rd_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_neg() {return true;};
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_neg_noStatus_ra_rd_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_neg_noStatus_ra_rd_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_neg_noStatus_ra_rd_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_neg() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_neg_ra_rd_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_neg_ra_rd_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_neg_ra_rd_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_neg() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_noOv_noStatus_ra_rb_rd_subf : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rb_rd_subf(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rb_rd_subf() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
};

class e200z4_noOv_noStatus_ra_rb_rd_subf_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rb_rd_subf_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rb_rd_subf_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_noStatus_ra_rb_rd_subfe_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rb_rd_subfe_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rb_rd_subfe_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfe() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_noStatus_ra_rd_simm_subfic_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	s16 SIMM;  /* s16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rd_simm_subfic_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rd_simm_subfic_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_simm() {return true;};
	virtual bool hasID_subfic() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_noStatus_ra_rd_subfme_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rd_subfme_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rd_subfme_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfme() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_noStatus_ra_rd_subfze_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_noStatus_ra_rd_subfze_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_noStatus_ra_rd_subfze_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfze() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_ra_rb_rd_subf_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_ra_rb_rd_subf_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_ra_rb_rd_subf_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_noOv_ra_rb_rd_subf_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_ra_rb_rd_subf_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_ra_rb_rd_subf_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_ra_rb_rd_subfe_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_ra_rb_rd_subfe_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_ra_rb_rd_subfe_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfe() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_ra_rd_subfme_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_ra_rd_subfme_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_ra_rd_subfme_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfme() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noOv_ra_rd_subfze_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noOv_ra_rd_subfze_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noOv_ra_rd_subfze_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noOv() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfze() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noStatus_notaftercomplemented_notcomplemented_or_ra_rb_rs : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_notcomplemented_or_ra_rb_rs(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_notcomplemented_or_ra_rb_rs() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
};

class e200z4_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_noStatus_notaftercomplemented_notshifted_or_ra_rs_uimm : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_notshifted_or_ra_rs_uimm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_notshifted_or_ra_rs_uimm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notshifted() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_uimm() {return true;};
};

class e200z4_noStatus_notaftercomplemented_notshifted_ra_rs_uimm_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_notshifted_ra_rs_uimm_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_notshifted_ra_rs_uimm_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notshifted() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_uimm() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_noStatus_notaftercomplemented_or_ra_rs_shifted_uimm : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_or_ra_rs_shifted_uimm(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_or_ra_rs_shifted_uimm() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_shifted() {return true;};
	virtual bool hasID_uimm() {return true;};
};

class e200z4_noStatus_notaftercomplemented_ra_rs_shifted_uimm_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u16 UIMM;  /* u16 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_notaftercomplemented_ra_rs_shifted_uimm_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_notaftercomplemented_ra_rs_shifted_uimm_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_shifted() {return true;};
	virtual bool hasID_uimm() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_noStatus_ra_rb_rd_subf_useOv : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rd_subf_useOv(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rd_subf_useOv() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useOv() {return true;};
};

class e200z4_noStatus_ra_rb_rd_subf_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rd_subf_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rd_subf_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noStatus_ra_rb_rd_subfe_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rd_subfe_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rd_subfe_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfe() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noStatus_ra_rb_rs_slw : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rs_slw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rs_slw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_slw() {return true;};
};

class e200z4_noStatus_ra_rb_rs_sraw : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rs_sraw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rs_sraw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sraw() {return true;};
};

class e200z4_noStatus_ra_rb_rs_srw : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_noStatus_ra_rb_rs_srw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rb_rs_srw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_srw() {return true;};
};

class e200z4_noStatus_ra_rd_subfme_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rd_subfme_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rd_subfme_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfme() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noStatus_ra_rd_subfze_useOv_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rd_subfze_useOv_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rd_subfze_useOv_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfze() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_noStatus_ra_rs_sh_sraw : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_noStatus_ra_rs_sh_sraw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_noStatus_ra_rs_sh_sraw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_noStatus() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
	virtual bool hasID_sraw() {return true;};
};

class e200z4_notSimple_ra_rb_reg_to_f_tw : public e200z4_instruction {
	u8 TO;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_notSimple_ra_rb_reg_to_f_tw(const u32 pc, const u32 chunk1);
	virtual ~e200z4_notSimple_ra_rb_reg_to_f_tw() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_notSimple() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_reg() {return true;};
	virtual bool hasID_to_f() {return true;};
	virtual bool hasID_tw() {return true;};
};

class e200z4_notaftercomplemented_notcomplemented_or_ra_rb_rs_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_notaftercomplemented_notcomplemented_or_ra_rb_rs_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_notaftercomplemented_notcomplemented_or_ra_rb_rs_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_or() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor(const u32 pc, const u32 chunk1);
	virtual ~e200z4_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_notaftercomplemented() {return true;};
	virtual bool hasID_notcomplemented() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_xor() {return true;};
};

class e200z4_notu_ra_rb_rs_store_sw_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */

	public:
	e200z4_notu_ra_rb_rs_store_sw_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_notu_ra_rb_rs_store_sw_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_sw() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_notu_ra_rb_rs_store_word_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_notu_ra_rb_rs_store_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_notu_ra_rb_rs_store_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_notu() {return true;};
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_ra_rb_rd_subf_useOv_useStatus : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rd_subf_useOv_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rd_subf_useOv_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_ra_rb_rd_subf_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rd_subf_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rd_subf_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subf() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_ra_rb_rd_subfe_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rd_subfe_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rd_subfe_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfe() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_ra_rb_rs_slw_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rs_slw_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rs_slw_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_slw() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_ra_rb_rs_sraw_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rs_sraw_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rs_sraw_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sraw() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_ra_rb_rs_srw_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rb_rs_srw_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rs_srw_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_srw() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_ra_rb_rs_store_u_word_x : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 rB;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;

	public:
	e200z4_ra_rb_rs_store_u_word_x(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rb_rs_store_u_word_x() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 2;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_store() {return true;};
	virtual bool hasID_u() {return true;};
	virtual bool hasID_word() {return true;};
	virtual bool hasID_x() {return true;};
};

class e200z4_ra_rd_subfme_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rd_subfme_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rd_subfme_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfme() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_ra_rd_subfze_useOv_useStatus_withCarry : public e200z4_instruction {
	u8 rD;  /* u5 */
	u8 rA;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rd_subfze_useOv_useStatus_withCarry(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rd_subfze_useOv_useStatus_withCarry() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rd() {return true;};
	virtual bool hasID_subfze() {return true;};
	virtual bool hasID_useOv() {return true;};
	virtual bool hasID_useStatus() {return true;};
	virtual bool hasID_withCarry() {return true;};
};

class e200z4_ra_rs_sh_sraw_useStatus : public e200z4_instruction {
	u8 rS;  /* u5 */
	u8 rA;  /* u5 */
	u8 SH;  /* u5 */
	u64 m_DDCRegFileSRU_GPRMaskRead;
	u64 m_DDCRegFileSRU_GPRMaskWrite;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_ra_rs_sh_sraw_useStatus(const u32 pc, const u32 chunk1);
	virtual ~e200z4_ra_rs_sh_sraw_useStatus() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool hasID_ra() {return true;};
	virtual bool hasID_rs() {return true;};
	virtual bool hasID_sh() {return true;};
	virtual bool hasID_sraw() {return true;};
	virtual bool hasID_useStatus() {return true;};
};

class e200z4_rb_tlbie : public e200z4_instruction {
	u8 rB;  /* u5 */

	public:
	e200z4_rb_tlbie(const u32 pc, const u32 chunk1);
	virtual ~e200z4_rb_tlbie() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_rb() {return true;};
	virtual bool hasID_tlbie() {return true;};
};

class e200z4_rfi : public e200z4_instruction {
	bool m_jumpTaken;
	u64 m_DDCRegMaskRead;
	u64 m_DDCRegMaskWrite;

	public:
	e200z4_rfi(const u32 pc, const u32 chunk1);
	virtual ~e200z4_rfi() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 1;};
	virtual void lockDDCWriteRegs(u64 &lock0);
	virtual void getDDCReadRegs(u64 &regsMask0);
	virtual bool jumpTaken() {return m_jumpTaken;};
	virtual bool isBranch() {return true;}
	virtual bool isBranchUnconditional() {return true;}
	virtual bool isBranchStaticallyUnknown() {return true;}
	virtual bool hasID_rfi() {return true;};
};

class e200z4_sync : public e200z4_instruction {

	public:
	e200z4_sync(const u32 pc, const u32 chunk1);
	virtual ~e200z4_sync() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_sync() {return true;};
};

class e200z4_tlbia : public e200z4_instruction {

	public:
	e200z4_tlbia(const u32 pc, const u32 chunk1);
	virtual ~e200z4_tlbia() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_tlbia() {return true;};
};

class e200z4_tlbsync : public e200z4_instruction {

	public:
	e200z4_tlbsync(const u32 pc, const u32 chunk1);
	virtual ~e200z4_tlbsync() {};
	virtual void execute(arch *);
	virtual const char* const mnemo();
	virtual unsigned char const size() {return 4;};
	virtual unsigned char const chunks() {return 1;};
	virtual unsigned int const instClass() {return 0;};
	virtual bool hasID_tlbsync() {return true;};
};

#endif

