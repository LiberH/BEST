/**
 * generated by HARMLESS : 'Hardware ARchitecture Modeling Language
 *                          for Embedded Software Simulation'
 * model : e200z4
 *
 */

#include <iostream>
#include "timingSignal.h"

#include "timing_ICacheE200Z4.h"
#include "arch.h"

//state related code
bool timingICacheE200Z4::step_0(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_0" << std::endl;
	#endif
	hit = (_arch->ICacheE200Z4_isInCache((_arch->PC()))) & 0x1;
	if((((!hit) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_1;
		return true;
	}
	else if((((!((!hit) & 0x1)) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_0;
		return false;
	}
	return false;
}
bool timingICacheE200Z4::step_1(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_1" << std::endl;
	#endif
	if((_arch->ICacheE200Z4LineBuffer_isFilling())) {
		nextStep = &timingICacheE200Z4::step_2;
		return true;
	}
	else if((((!_arch->ICacheE200Z4LineBuffer_isFilling()) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_9;
		return true;
	}
	return false;
}
bool timingICacheE200Z4::step_2(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_2" << std::endl;
	#endif
	if((((((_arch->ICacheE200Z4LineBuffer_baseAddress())>>((u32)(5U))))==(FIELD((_arch->PC()),(31U),(5U)))))) {
		nextStep = &timingICacheE200Z4::step_3;
		return true;
	}
	else if((((!((((_arch->ICacheE200Z4LineBuffer_baseAddress())>>((u32)(5U))))==(FIELD((_arch->PC()),(31U),(5U))))) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_7;
		return true;
	}
	return false;
}
bool timingICacheE200Z4::step_3(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_3" << std::endl;
	#endif
	if((((!_arch->ICacheE200Z4LineBuffer_isInBuffer()) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_4;
		return true;
	}
	else if((((!((!_arch->ICacheE200Z4LineBuffer_isInBuffer()) & 0x1)) & 0x1))) {
		nextStep = &timingICacheE200Z4::step_0;
		return false;
	}
	return false;
}
bool timingICacheE200Z4::step_4(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_4" << std::endl;
	#endif
	const bool result = _arch->timingSynchroWait(this,m_inOffset + SIGNAL_WAIT_ICacheE200Z4_bufferData);
	nextStep = &timingICacheE200Z4::step_5;
	return result;
}
bool timingICacheE200Z4::step_5(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_5" << std::endl;
	#endif
	invLoop_0 = (((invLoop_0)+((u8)(1U)))) & 0x7;
	nextStep = &timingICacheE200Z4::step_3;
	return true;
}
bool timingICacheE200Z4::step_6(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_6" << std::endl;
	#endif
	nextStep = &timingICacheE200Z4::step_0;
	return false;
}
bool timingICacheE200Z4::step_7(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_7" << std::endl;
	#endif
	const bool result = _arch->timingSynchroEmit(this,m_outOffset + SIGNAL_EMIT_ICacheE200Z4_fillBuffer, false);
	nextStep = &timingICacheE200Z4::step_8;
	return result;
}
bool timingICacheE200Z4::step_8(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_8" << std::endl;
	#endif
	const bool result = _arch->timingSynchroWait(this,m_inOffset + SIGNAL_WAIT_ICacheE200Z4_bufferData);
	nextStep = &timingICacheE200Z4::step_6;
	return result;
}
bool timingICacheE200Z4::step_9(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_9" << std::endl;
	#endif
	const bool result = _arch->timingSynchroEmit(this,m_outOffset + SIGNAL_EMIT_ICacheE200Z4_fillBuffer, false);
	nextStep = &timingICacheE200Z4::step_10;
	return result;
}
bool timingICacheE200Z4::step_10(arch *_arch)
{
	#ifdef DEBUG_TIMING
		std::cout << "timingICacheE200Z4::step_10" << std::endl;
	#endif
	const bool result = _arch->timingSynchroWait(this,m_inOffset + SIGNAL_WAIT_ICacheE200Z4_bufferData);
	nextStep = &timingICacheE200Z4::step_6;
	return result;
}
