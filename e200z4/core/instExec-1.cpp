/**
 * generated by HARMLESS : 'Hardware ARchitecture Modeling Language
 *                          for Embedded Software Simulation'
 * model : e200z4
 *
 */

#include "instruction.h" //first for precompiled headers
#include <iostream>
#include "macro.h"
#include "arch.h"
#include "utils.h"

using namespace std;

// instruction execute code.

void e200z4_CR0_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1003
	_arch->setCR_CR0((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR0_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1003
	_arch->setCR_CR0((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR0_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1003
	_arch->setCR_CR0((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR0_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1003
	_arch->setCR_CR0((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR0_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1749
	_arch->setCR_CR0((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR0_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1764
	_arch->setCR_CR0((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1004
	_arch->setCR_CR1((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1004
	_arch->setCR_CR1((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1004
	_arch->setCR_CR1((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1004
	_arch->setCR_CR1((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1750
	_arch->setCR_CR1((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR1_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1765
	_arch->setCR_CR1((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1005
	_arch->setCR_CR2((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1005
	_arch->setCR_CR2((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1005
	_arch->setCR_CR2((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1005
	_arch->setCR_CR2((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1751
	_arch->setCR_CR2((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR2_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1766
	_arch->setCR_CR2((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1006
	_arch->setCR_CR3((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1006
	_arch->setCR_CR3((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1006
	_arch->setCR_CR3((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1006
	_arch->setCR_CR3((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1752
	_arch->setCR_CR3((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR3_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1767
	_arch->setCR_CR3((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1007
	_arch->setCR_CR4((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1007
	_arch->setCR_CR4((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1007
	_arch->setCR_CR4((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1007
	_arch->setCR_CR4((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1753
	_arch->setCR_CR4((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR4_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1768
	_arch->setCR_CR4((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1008
	_arch->setCR_CR5((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1008
	_arch->setCR_CR5((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1008
	_arch->setCR_CR5((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1008
	_arch->setCR_CR5((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1754
	_arch->setCR_CR5((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR5_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1769
	_arch->setCR_CR5((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1009
	_arch->setCR_CR6((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1009
	_arch->setCR_CR6((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1009
	_arch->setCR_CR6((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1009
	_arch->setCR_CR6((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1755
	_arch->setCR_CR6((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR6_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1770
	_arch->setCR_CR6((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_arith_cmp_crfd_immediate_l_ra_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.980
	cmp_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1010
	_arch->setCR_CR7((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_arith_cmp_crfd_l_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.993
	cmp_inst_result = (_arch->Integer_Unit_arithCompare((s32)(cmp_inst_op1), (s32)(cmp_inst_op2))) & 0xF;

	// 'ppc_e200z4.hadl', l.1010
	_arch->setCR_CR7((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_cmp_crfd_immediate_l_logical_ra_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.986
	cmp_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1010
	_arch->setCR_CR7((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_cmp_crfd_l_logical_ra_rb_reg::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.962
	u32 cmp_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.963
	u32 cmp_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.964
	u8 cmp_inst_result; //u4
	// 'ppc_e200z4.hadl', l.967
	cmp_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.974
	cmp_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.998
	cmp_inst_result = (_arch->Integer_Unit_logicalCompare(cmp_inst_op1, cmp_inst_op2)) & 0xF;

	// 'ppc_e200z4.hadl', l.1010
	_arch->setCR_CR7((cmp_inst_result) & 0xF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_crfd_crfs_mcrf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1756
	_arch->setCR_CR7((FIELD((_arch->CR()),((((u8)((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))+((u8)(3U)))),((((u8)(((7U)-(this->crfS))))*((u8)(4U)))))) & 0xF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_CR7_crfd_mcrxr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1771
	_arch->setCR_CR7((FIELD((_arch->XER()),(31U),(27U))) & 0xF);

	// 'ppc_e200z4.hadl', l.1774
	_arch->setXER((FIELD_ASSIGN((_arch->XER()),(31U),(27U),((u8)((0U) & 0xF)))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_b_li_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1295
	branch_inst_doJump = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1338
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->LI)<<((s32)(2U))),24U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_nz_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_nz_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_noCond_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_nz_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_revStatPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_d_statPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_f_nd_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_nd_noCond_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_nd_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bd_bi_bo_nd_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_nz_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_f_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_nz_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_noCond_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_nz_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_revStatPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_d_statPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_f_nd_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_noCond_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_ctr_nd_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_revStatPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_f_nz_statPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_f_revStatPred_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_f_statPred_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_noCond_nz_statPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_noCond_revStatPred_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_noCond_statPred_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_nz_revStatPred_t_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_nz_statPred_t_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_revStatPred_t_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_d_statPred_t_tolr_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_f_nd_revStatPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_f_nd_statPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_revStatPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_nd_noCond_statPred_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_nd_revStatPred_t_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_abs_bc_bi_bo_nd_statPred_t_tolr_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_b_li_rel_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1295
	branch_inst_doJump = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1338
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->LI)<<((s32)(2U))),24U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_f_nz_rel_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_f_rel_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_noCond_nz_rel_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_revStatPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_noCond_rel_statPred_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_nz_rel_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_rel_revStatPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_d_rel_statPred_t_updatelr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_f_nd_rel_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_revStatPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_nd_noCond_rel_statPred_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_nd_rel_revStatPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_bc_bd_bi_bo_nd_rel_statPred_t_updatelr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1358
	_arch->setLR(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_SP_Check_sc::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1693
	_arch->setSRR0(((_arch->PC())) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1694
	_arch->setSRR1(((((((_arch->SRR1()))&((u32)(((~2017460083U) & 0x7FFFFFFF)))))|((((((_arch->MSR()))&(2277572607U)))&((u32)(2017460083U)))))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1696
	_arch->setMSR(((((((_arch->MSR()))&(4294644684U)))|((u32)(((_arch->MSR_ILE())) & 0xFFFFFFFF)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1702
	_arch->fetcher_absBranch(3072U, 1U);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_b_li::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1295
	branch_inst_doJump = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1338
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->LI)<<((s32)(2U))),24U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_f_nz_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_f_nz_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_f_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_f_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_noCond_nz_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_noCond_nz_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_noCond_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_noCond_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_nz_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_nz_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_revStatPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_d_statPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_f_nd_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_f_nd_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_nd_noCond_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_nd_noCond_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_nd_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bd_bi_bo_nd_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_f_nz_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_f_nz_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_f_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_f_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_noCond_nz_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_noCond_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_noCond_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_nz_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_nz_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_revStatPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_d_statPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_f_nd_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_f_nd_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_nd_noCond_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_nd_noCond_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_nd_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_ctr_nd_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1343
	branch_inst_value = ((_arch->CTR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_f_nz_revStatPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_f_nz_statPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_f_revStatPred_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_f_statPred_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_noCond_nz_revStatPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_noCond_nz_statPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_noCond_revStatPred_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_noCond_statPred_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_nz_revStatPred_t_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_nz_statPred_t_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_revStatPred_t_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_d_statPred_t_tolr_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_f_nd_revStatPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_f_nd_statPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_nd_noCond_revStatPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_nd_noCond_statPred_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_nd_revStatPred_t_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_abs_bc_bi_bo_nd_statPred_t_tolr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1345
	branch_inst_value = ((_arch->LR())) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1351
	branch_inst_target_address = (branch_inst_value) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_add_noOv_noStatus_ra_rb_rd_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.813
	_arch->Integer_Unit_updateStatus(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_noOv_ra_rb_rd_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_noStatus_ra_rb_rd_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.797
	_arch->Integer_Unit_updateOverflowArith(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_noStatus_ra_rb_rd_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_ra_rb_rd_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.801
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatus(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_add_ra_rb_rd_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.680
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.681
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.682
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_adde_noOv_noStatus_ra_rb_rd_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.688
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.689
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.690
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_adde_noOv_ra_rb_rd_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.688
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.689
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.690
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_adde_noStatus_ra_rb_rd_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.688
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.689
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.690
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_adde_ra_rb_rd_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.688
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.689
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.690
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addi_noOv_noStatus_ra_rd_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.700
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.698
		add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.700
		add_inst_op1 = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.702
	add_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.703
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_addic_noOv_noStatus_ra_rd_simm_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.710
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.711
	add_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.712
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addic_noOv_ra_rd_simm_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.710
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.711
	add_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.712
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addis_noOv_noStatus_ra_rd_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.721
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.719
		add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.721
		add_inst_op1 = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.723
	add_inst_op2 = ((u32)((s32)((SIGN_EXTEND(((this->SIMM)<<((s16)(16U))),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.724
	add_inst_carry = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_addme_noOv_noStatus_ra_rd_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.729
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.730
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.731
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addme_noOv_ra_rd_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.729
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.730
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.731
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addme_noStatus_ra_rd_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.729
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.730
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.731
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addme_ra_rd_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.729
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.730
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.731
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addze_noOv_noStatus_ra_rd_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.736
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.737
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.738
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addze_noOv_ra_rd_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.736
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.737
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.738
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addze_noStatus_ra_rd_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.736
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.737
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.738
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_addze_ra_rd_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.736
	add_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.737
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.738
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_aftercomplemented_and_noStatus_notcomplemented_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_aftercomplemented_and_notcomplemented_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_aftercomplemented_noStatus_notcomplemented_or_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_aftercomplemented_noStatus_notcomplemented_ra_rb_rs_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_aftercomplemented_notcomplemented_or_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_aftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1062
	logical_inst_result = (((~logical_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_algebraic_d_half_load_notu_ra_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1637
	load_inst_value = ((u32)((s32)((SIGN_EXTEND((s16)((load_inst_value) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_algebraic_d_half_load_ra_rd_u::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1637
	load_inst_value = ((u32)((s32)((SIGN_EXTEND((s16)((load_inst_value) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_algebraic_half_load_notu_ra_rb_rd_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1637
	load_inst_value = ((u32)((s32)((SIGN_EXTEND((s16)((load_inst_value) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_algebraic_half_load_ra_rb_rd_u_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1637
	load_inst_value = ((u32)((s32)((SIGN_EXTEND((s16)((load_inst_value) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_and_complemented_noStatus_notaftercomplemented_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1030
	logical_inst_op2 = (((~_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_and_complemented_notaftercomplemented_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1030
	logical_inst_op2 = (((~_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_and_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_and_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_and_notaftercomplemented_notshifted_ra_rs_uimm_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1041
	logical_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_and_notaftercomplemented_ra_rs_shifted_uimm_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1039
	logical_inst_op2 = (((this->UIMM)<<((u16)(16U)))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1056
	logical_inst_result = (((logical_inst_op1)&(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_b_li_rel::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1295
	branch_inst_doJump = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1338
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->LI)<<((s32)(2U))),24U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_f_nz_rel_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_f_nz_rel_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_f_rel_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_f_rel_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_noCond_nz_rel_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_noCond_nz_rel_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_noCond_rel_revStatPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_noCond_rel_statPred_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_nz_rel_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_nz_rel_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_rel_revStatPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_d_rel_statPred_t_z::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1286
	_arch->setCTR(((((_arch->CTR()))-((u32)(1U)))) & 0xFFFFFFFF);

	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1310
	u8 behavior_case_126_ctr_ok; //u1
	// 'ppc_e200z4.hadl', l.1312
	behavior_case_126_ctr_ok = ((((((_arch->CTR()))!=(0U)))^(FIELD(this->BO,(1U),(1U))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1313
	branch_inst_doJump = (((behavior_case_126_ctr_ok)&(behavior_case_120_cond_ok))) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_f_nd_rel_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_f_nd_rel_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1305
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(0U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_nd_noCond_rel_revStatPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_nd_noCond_rel_statPred::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1303
	behavior_case_120_cond_ok = (1U) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_nd_rel_revStatPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_bc_bd_bi_bo_nd_rel_statPred_t::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1293
	u8 branch_inst_doJump; //u1
	// 'ppc_e200z4.hadl', l.1300
	u8 behavior_case_120_cond_ok; //u1
	// 'ppc_e200z4.hadl', l.1304
	behavior_case_120_cond_ok = (((FIELD((_arch->CR()),(((31U)-(this->BI))),(((31U)-(this->BI)))))==(1U))) & 0x1;

	// 'ppc_e200z4.hadl', l.1315
	branch_inst_doJump = (behavior_case_120_cond_ok) & 0x1;

	// 'ppc_e200z4.hadl', l.1334
	u32 branch_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1341
	branch_inst_value = ((u32)((s32)((SIGN_EXTEND(((this->BD)<<((s16)(2U))),14U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1348
	u32 branch_inst_target_address; //u32
	// 'ppc_e200z4.hadl', l.1352
	branch_inst_target_address = ((u32)(((((((s64)(SIGN_EXTEND((s32)((_arch->PC())),32U,33U)))+((s64)(SIGN_EXTEND((s32)(branch_inst_value),32U,33U)))))-((s64)(SIGN_EXTEND(4U,4U,33U))))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1365
	_arch->fetcher_absBranch(branch_inst_target_address, branch_inst_doJump);
	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_br_half_load_notu_ra_rb_rd_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1641
	load_inst_value = ((u32)((CAT(FIELD(load_inst_value,(7U),(0U)),FIELD(load_inst_value,(15U),(8U)),8)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_br_half_notu_ra_rb_rs_store_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1530
	store_inst_value = ((u32)((CAT(FIELD(store_inst_value,(7U),(0U)),FIELD(store_inst_value,(15U),(8U)),8)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1563
	_arch->mem_write16(store_inst_effective_address, (u16)((store_inst_value) & 0xFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_br_load_notu_ra_rb_rd_word_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1619
	load_inst_value = (_arch->mem_read32(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1626
	load_inst_value = (CAT(CAT(CAT(FIELD(load_inst_value,(7U),(0U)),FIELD(load_inst_value,(15U),(8U)),8),FIELD(load_inst_value,(23U),(16U)),8),FIELD(load_inst_value,(31U),(24U)),8)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_br_notu_ra_rb_rs_store_word_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1526
	store_inst_value = (CAT(CAT(CAT(FIELD(store_inst_value,(7U),(0U)),FIELD(store_inst_value,(15U),(8U)),8),FIELD(store_inst_value,(23U),(16U)),8),FIELD(store_inst_value,(31U),(24U)),8)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1559
	_arch->mem_write32(store_inst_effective_address, store_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_d_load_notu_ra_rd_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1646
	load_inst_value = (_arch->mem_read8(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_d_load_ra_rd_u_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1646
	load_inst_value = (_arch->mem_read8(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_d_notu_ra_rs_store::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1567
	_arch->mem_write8(store_inst_effective_address, (u8)((store_inst_value) & 0xFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_d_ra_rs_store_u::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1567
	_arch->mem_write8(store_inst_effective_address, (u8)((store_inst_value) & 0xFF));
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_load_notu_ra_rb_rd_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1646
	load_inst_value = (_arch->mem_read8(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_load_ra_rb_rd_u_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1646
	load_inst_value = (_arch->mem_read8(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_notu_ra_rb_rs_store_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1567
	_arch->mem_write8(store_inst_effective_address, (u8)((store_inst_value) & 0xFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_byte_ra_rb_rs_store_u_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1567
	_arch->mem_write8(store_inst_effective_address, (u8)((store_inst_value) & 0xFF));
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_cntlzw_noStatus_ra_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1080
	u32 count_leading_zero_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1081
	u32 count_leading_zero_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1084
	u32 count_leading_zero_inst_i; //u32
	// 'ppc_e200z4.hadl', l.1084
	count_leading_zero_inst_i = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1085
	count_leading_zero_inst_result = (32U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1086
	count_leading_zero_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1092
	u32 __tmp_0__; //u32
	__tmp_0__ = 0;

	while((__tmp_0__ < 0x20) && (((((count_leading_zero_inst_i)<(32U)))&&(((count_leading_zero_inst_result)==(32U)))))) {
		// 'ppc_e200z4.hadl', l.1090
		if(((FIELD(count_leading_zero_inst_op,(((31U)-(count_leading_zero_inst_i))),(((31U)-(count_leading_zero_inst_i)))))==(1U))){
			// 'ppc_e200z4.hadl', l.1090
			count_leading_zero_inst_result = (count_leading_zero_inst_i) & 0xFFFFFFFF;

		}
		// 'ppc_e200z4.hadl', l.1092
		count_leading_zero_inst_i = ((((u64)(count_leading_zero_inst_i))+((u64)(1U)))) & 0xFFFFFFFF;

		__tmp_0__++;

	}
	// 'ppc_e200z4.hadl', l.1101
	_arch->SRU_GPR_write32(this->rA, count_leading_zero_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_cntlzw_ra_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1080
	u32 count_leading_zero_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1081
	u32 count_leading_zero_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1084
	u32 count_leading_zero_inst_i; //u32
	// 'ppc_e200z4.hadl', l.1084
	count_leading_zero_inst_i = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1085
	count_leading_zero_inst_result = (32U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1086
	count_leading_zero_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1092
	u32 __tmp_0__; //u32
	__tmp_0__ = 0;

	while((__tmp_0__ < 0x20) && (((((count_leading_zero_inst_i)<(32U)))&&(((count_leading_zero_inst_result)==(32U)))))) {
		// 'ppc_e200z4.hadl', l.1090
		if(((FIELD(count_leading_zero_inst_op,(((31U)-(count_leading_zero_inst_i))),(((31U)-(count_leading_zero_inst_i)))))==(1U))){
			// 'ppc_e200z4.hadl', l.1090
			count_leading_zero_inst_result = (count_leading_zero_inst_i) & 0xFFFFFFFF;

		}
		// 'ppc_e200z4.hadl', l.1092
		count_leading_zero_inst_i = ((((u64)(count_leading_zero_inst_i))+((u64)(1U)))) & 0xFFFFFFFF;

		__tmp_0__++;

	}
	// 'ppc_e200z4.hadl', l.1097
	_arch->Integer_Unit_updateStatus(count_leading_zero_inst_result);
	// 'ppc_e200z4.hadl', l.1101
	_arch->SRU_GPR_write32(this->rA, count_leading_zero_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_complemented_noStatus_notaftercomplemented_or_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1030
	logical_inst_op2 = (((~_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_complemented_notaftercomplemented_or_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1030
	logical_inst_op2 = (((~_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crand_crba_crbb_crbd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1725
	CR_logical_operation_res = (((CR_logical_operation_op1)&(CR_logical_operation_op2))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crandc_crba_crbb_crbd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1727
	CR_logical_operation_res = (((CR_logical_operation_op1)&(((~CR_logical_operation_op2) & 0x1)))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_creqv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1729
	CR_logical_operation_res = (((CR_logical_operation_op1)==(CR_logical_operation_op2))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_crnand::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1731
	CR_logical_operation_res = (((~((CR_logical_operation_op1)&(CR_logical_operation_op2))) & 0x1)) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_crnor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1733
	CR_logical_operation_res = (((~((CR_logical_operation_op1)|(CR_logical_operation_op2))) & 0x1)) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_cror::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1735
	CR_logical_operation_res = (((CR_logical_operation_op1)|(CR_logical_operation_op2))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_crorc::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1737
	CR_logical_operation_res = (((CR_logical_operation_op1)|(((~CR_logical_operation_op2) & 0x1)))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crba_crbb_crbd_crxor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1712
	u8 CR_logical_operation_op1; //u1
	// 'ppc_e200z4.hadl', l.1713
	u8 CR_logical_operation_op2; //u1
	// 'ppc_e200z4.hadl', l.1714
	u8 CR_logical_operation_res; //u1
	// 'ppc_e200z4.hadl', l.1718
	CR_logical_operation_op1 = (FIELD((_arch->CR()),(((31U)-(this->crbA))),(((31U)-(this->crbA))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1719
	CR_logical_operation_op2 = (FIELD((_arch->CR()),(((31U)-(this->crbB))),(((31U)-(this->crbB))))) & 0x1;

	// 'ppc_e200z4.hadl', l.1739
	CR_logical_operation_res = (((CR_logical_operation_op1)^(CR_logical_operation_op2))) & 0x1;

	// 'ppc_e200z4.hadl', l.1742
	_arch->setCR((FIELD_ASSIGN((_arch->CR()),(((31U)-(this->crbD))),(((31U)-(this->crbD))),(CR_logical_operation_res))) & 0xFFFFFFFF);

	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_crm_mtcrf_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1405
	u32 move_to_crf_mask; //u32
	// 'ppc_e200z4.hadl', l.1406
	u32 move_to_crf_insert; //u32
	// 'ppc_e200z4.hadl', l.1409
	move_to_crf_mask = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1411
	if(((((this->CRM)&((u8)(((1U)<<(7U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1411
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(7U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1414
	if(((((this->CRM)&((u8)(((1U)<<(6U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1414
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(6U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1417
	if(((((this->CRM)&((u8)(((1U)<<(5U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1417
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(5U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1420
	if(((((this->CRM)&((u8)(((1U)<<(4U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1420
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(4U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1423
	if(((((this->CRM)&((u8)(((1U)<<(3U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1423
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(3U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1426
	if(((((this->CRM)&((u8)(((1U)<<(2U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1426
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(2U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1429
	if(((((this->CRM)&((u8)(((1U)<<(1U))))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1429
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(((15U)<<((((u8)(4U))*((u8)(1U))))))))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1432
	if(((((this->CRM)&((u8)(1U))))!=(0U))){
		// 'ppc_e200z4.hadl', l.1432
		move_to_crf_mask = (((move_to_crf_mask)|((u32)(15U)))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1435
	move_to_crf_insert = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1437
	_arch->setCR((_arch->Integer_Unit_insertWithMask((_arch->CR()), move_to_crf_mask, move_to_crf_insert)) & 0xFFFFFFFF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_d_fd_frd_load_notu_ra::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1462
	u32 load_float_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1463
	u32 load_float_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1466
	u32 &getBaseAddress_base_addr = load_float_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1469
	u32 load_float_valueL; //u32
	// 'ppc_e200z4.hadl', l.1470
	u32 load_float_valueH; //u32
	// 'ppc_e200z4.hadl', l.1471
	_arch->effective_address_Unit_eff_addr_add(load_float_effective_address, load_float_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1472
	load_float_valueL = (_arch->mem_read32(load_float_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1473
	load_float_valueH = (_arch->mem_read32((((u64)(load_float_effective_address))+((u64)(4U))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1474
	_arch->FSRU_FPR_write32(((this->frD)<<((u8)(1U))), load_float_valueL);
	// 'ppc_e200z4.hadl', l.1475
	_arch->FSRU_FPR_write32(((this->frD)<<((u8)((((u8)(1U))+((u8)(1U)))))), load_float_valueH);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileFSRU_FPRAccessMask(this->m_DDCRegFileFSRU_FPRMaskRead, this->m_DDCRegFileFSRU_FPRMaskWrite);
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_fd_frd_load_ra_u::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1462
	u32 load_float_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1463
	u32 load_float_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1466
	u32 &getBaseAddress_base_addr = load_float_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1469
	u32 load_float_valueL; //u32
	// 'ppc_e200z4.hadl', l.1470
	u32 load_float_valueH; //u32
	// 'ppc_e200z4.hadl', l.1471
	_arch->effective_address_Unit_eff_addr_add(load_float_effective_address, load_float_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1472
	load_float_valueL = (_arch->mem_read32(load_float_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1473
	load_float_valueH = (_arch->mem_read32((((u64)(load_float_effective_address))+((u64)(4U))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1474
	_arch->FSRU_FPR_write32(((this->frD)<<((u8)(1U))), load_float_valueL);
	// 'ppc_e200z4.hadl', l.1475
	_arch->FSRU_FPR_write32(((this->frD)<<((u8)((((u8)(1U))+((u8)(1U)))))), load_float_valueH);
	// 'ppc_e200z4.hadl', l.1478
	_arch->SRU_GPR_write32(this->rA, load_float_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileFSRU_FPRAccessMask(this->m_DDCRegFileFSRU_FPRMaskRead, this->m_DDCRegFileFSRU_FPRMaskWrite);
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_fd_frs_notu_ra_store::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1484
	u32 store_float_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1485
	u32 store_float_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1488
	u32 &getBaseAddress_base_addr = store_float_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1491
	u32 store_float_valueL; //u32
	// 'ppc_e200z4.hadl', l.1492
	u32 store_float_valueH; //u32
	// 'ppc_e200z4.hadl', l.1493
	_arch->effective_address_Unit_eff_addr_add(store_float_effective_address, store_float_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1494
	store_float_valueL = (_arch->FSRU_FPR_read32(((this->frS)<<((u8)(1U))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1495
	store_float_valueH = (_arch->FSRU_FPR_read32(((this->frS)<<((u8)((((u8)(1U))+((u8)(1U)))))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1496
	_arch->mem_write32(store_float_effective_address, store_float_valueL);
	// 'ppc_e200z4.hadl', l.1497
	_arch->mem_write32((((u64)(store_float_effective_address))+((u64)(4U))), store_float_valueH);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileFSRU_FPRAccessMask(this->m_DDCRegFileFSRU_FPRMaskRead, this->m_DDCRegFileFSRU_FPRMaskWrite);
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_fd_frs_ra_store_u::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1484
	u32 store_float_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1485
	u32 store_float_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1488
	u32 &getBaseAddress_base_addr = store_float_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1491
	u32 store_float_valueL; //u32
	// 'ppc_e200z4.hadl', l.1492
	u32 store_float_valueH; //u32
	// 'ppc_e200z4.hadl', l.1493
	_arch->effective_address_Unit_eff_addr_add(store_float_effective_address, store_float_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1494
	store_float_valueL = (_arch->FSRU_FPR_read32(((this->frS)<<((u8)(1U))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1495
	store_float_valueH = (_arch->FSRU_FPR_read32(((this->frS)<<((u8)((((u8)(1U))+((u8)(1U)))))))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1496
	_arch->mem_write32(store_float_effective_address, store_float_valueL);
	// 'ppc_e200z4.hadl', l.1497
	_arch->mem_write32((((u64)(store_float_effective_address))+((u64)(4U))), store_float_valueH);
	// 'ppc_e200z4.hadl', l.1500
	_arch->SRU_GPR_write32(this->rA, store_float_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileFSRU_FPRAccessMask(this->m_DDCRegFileFSRU_FPRMaskRead, this->m_DDCRegFileFSRU_FPRMaskWrite);
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_half_load_notu_ra_rd_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_half_load_ra_rd_u_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_half_notu_ra_rs_store::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1563
	_arch->mem_write16(store_inst_effective_address, (u16)((store_inst_value) & 0xFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_half_ra_rs_store_u::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1563
	_arch->mem_write16(store_inst_effective_address, (u16)((store_inst_value) & 0xFFFF));
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_load_notu_ra_rd_word_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1619
	load_inst_value = (_arch->mem_read32(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_load_ra_rd_u_word_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1602
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1605
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1619
	load_inst_value = (_arch->mem_read32(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_mw_notu_ra_rs_store::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1579
	u32 stm_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1580
	u32 stm_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1583
	u32 &getBaseAddress_base_addr = stm_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1585
	_arch->effective_address_Unit_eff_addr_add(stm_effective_address, stm_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1586
	_arch->SRU_storeMultiWord(stm_effective_address, this->rS);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_notu_ra_rs_store_word::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1559
	_arch->mem_write32(store_inst_effective_address, store_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_d_ra_rs_store_u_word::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1541
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, (u32)((this->D) & 0xFFFFFFFF));
	// 'ppc_e200z4.hadl', l.1544
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemOffset(this->D);
	#endif
	// 'ppc_e200z4.hadl', l.1559
	_arch->mem_write32(store_inst_effective_address, store_inst_value);
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_divw_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.853
	if((((s32)(div_inst_divisor))!=((u8)(0U)))){
		// 'ppc_e200z4.hadl', l.851
		div_inst_quotient = ((u32)((((s32)(div_inst_dividend))/((s32)(div_inst_divisor))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.853
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_divw_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.853
	if((((s32)(div_inst_divisor))!=((u8)(0U)))){
		// 'ppc_e200z4.hadl', l.851
		div_inst_quotient = ((u32)((((s32)(div_inst_dividend))/((s32)(div_inst_divisor))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.853
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.874
	_arch->Integer_Unit_updateStatus(div_inst_quotient);
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_divw_noStatus_ra_rb_rd_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.853
	if((((s32)(div_inst_divisor))!=((u8)(0U)))){
		// 'ppc_e200z4.hadl', l.851
		div_inst_quotient = ((u32)((((s32)(div_inst_dividend))/((s32)(div_inst_divisor))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.853
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.868
	_arch->Integer_Unit_div_ov_signed((s32)(div_inst_dividend), (s32)(div_inst_divisor));
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_divw_ra_rb_rd_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.853
	if((((s32)(div_inst_divisor))!=((u8)(0U)))){
		// 'ppc_e200z4.hadl', l.851
		div_inst_quotient = ((u32)((((s32)(div_inst_dividend))/((s32)(div_inst_divisor))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.853
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.869
	_arch->Integer_Unit_div_ov_signed_withUpdateStatus((s32)(div_inst_dividend), (s32)(div_inst_divisor), div_inst_quotient);
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_divwu_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.860
	if(((div_inst_divisor)!=(0U))){
		// 'ppc_e200z4.hadl', l.858
		div_inst_quotient = (((div_inst_dividend)/(div_inst_divisor))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.860
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_divwu_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.860
	if(((div_inst_divisor)!=(0U))){
		// 'ppc_e200z4.hadl', l.858
		div_inst_quotient = (((div_inst_dividend)/(div_inst_divisor))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.860
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.874
	_arch->Integer_Unit_updateStatus(div_inst_quotient);
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_divwu_noStatus_ra_rb_rd_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.860
	if(((div_inst_divisor)!=(0U))){
		// 'ppc_e200z4.hadl', l.858
		div_inst_quotient = (((div_inst_dividend)/(div_inst_divisor))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.860
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.870
	_arch->Integer_Unit_div_ov_unsigned(div_inst_dividend, div_inst_divisor);
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_divwu_ra_rb_rd_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.837
	u32 div_inst_dividend; //u32
	// 'ppc_e200z4.hadl', l.838
	u32 div_inst_divisor; //u32
	// 'ppc_e200z4.hadl', l.839
	u32 div_inst_quotient; //u32
	// 'ppc_e200z4.hadl', l.842
	div_inst_dividend = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.843
	div_inst_divisor = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.860
	if(((div_inst_divisor)!=(0U))){
		// 'ppc_e200z4.hadl', l.858
		div_inst_quotient = (((div_inst_dividend)/(div_inst_divisor))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.860
		div_inst_quotient = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.871
	_arch->Integer_Unit_div_ov_unsigned_withUpdateStatus(div_inst_dividend, div_inst_divisor, div_inst_quotient);
	// 'ppc_e200z4.hadl', l.883
	_arch->SRU_GPR_write32(this->rD, div_inst_quotient);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_eq_imm_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_eq_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_extsb_noStatus_ra_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1108
	u32 ext_sign_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1109
	u32 ext_sign_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1110
	ext_sign_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1115
	ext_sign_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)((((ext_sign_inst_op)&((u32)(255U)))) & 0xFF),8U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1129
	_arch->SRU_GPR_write32(this->rA, ext_sign_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_extsb_ra_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1108
	u32 ext_sign_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1109
	u32 ext_sign_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1110
	ext_sign_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1115
	ext_sign_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)((((ext_sign_inst_op)&((u32)(255U)))) & 0xFF),8U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1125
	_arch->Integer_Unit_updateStatus(ext_sign_inst_result);
	// 'ppc_e200z4.hadl', l.1129
	_arch->SRU_GPR_write32(this->rA, ext_sign_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_extsh_noStatus_ra_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1108
	u32 ext_sign_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1109
	u32 ext_sign_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1110
	ext_sign_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1120
	ext_sign_inst_result = ((u32)((s32)((SIGN_EXTEND((s16)((((ext_sign_inst_op)&((u32)(65535U)))) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1129
	_arch->SRU_GPR_write32(this->rA, ext_sign_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_extsh_ra_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1108
	u32 ext_sign_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1109
	u32 ext_sign_inst_op; //u32
	// 'ppc_e200z4.hadl', l.1110
	ext_sign_inst_op = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1120
	ext_sign_inst_result = ((u32)((s32)((SIGN_EXTEND((s16)((((ext_sign_inst_op)&((u32)(65535U)))) & 0xFFFF),16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1125
	_arch->Integer_Unit_updateStatus(ext_sign_inst_result);
	// 'ppc_e200z4.hadl', l.1129
	_arch->SRU_GPR_write32(this->rA, ext_sign_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ge_imm_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ge_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_gt_imm_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_gt_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_half_load_notu_ra_rb_rd_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_half_load_ra_rb_rd_u_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1631
	load_inst_value = (_arch->mem_read16(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_half_notu_ra_rb_rs_store_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1563
	_arch->mem_write16(store_inst_effective_address, (u16)((store_inst_value) & 0xFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_half_ra_rb_rs_store_u_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1563
	_arch->mem_write16(store_inst_effective_address, (u16)((store_inst_value) & 0xFFFF));
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_imm_le_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_lge_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_lgt_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_lle_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_llt_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_lt_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_ne_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_imm_notSimple_ra_simm_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1792
	trap_instructions_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_le_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_lge_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_lgt_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_lle_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_llt_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_load_notu_ra_rb_rd_word_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1619
	load_inst_value = (_arch->mem_read32(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_load_ra_rb_rd_u_word_x_zero::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1593
	u32 load_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1594
	u32 load_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1595
	u32 load_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1596
	u32 &getBaseAddress_base_addr = load_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1609
	_arch->effective_address_Unit_eff_addr_add(load_inst_effective_address, load_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1612
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1619
	load_inst_value = (_arch->mem_read32(load_inst_effective_address)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1659
	_arch->SRU_GPR_write32(this->rA, load_inst_effective_address);
	// 'ppc_e200z4.hadl', l.1664
	_arch->SRU_GPR_write32(this->rD, load_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_lt_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mb_me_noStatus_ra_rb_rlwnm_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1146
	rotate_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x1F)) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1184
	rotate_inst_result = (((rotate_inst_m)&(rotate_inst_r))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mb_me_noStatus_ra_rlw_rlwimi_rs_sh::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1142
	rotate_inst_n = (this->SH) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1153
	rotate_inst_rs2 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1174
	rotate_inst_result = (_arch->Integer_Unit_insertWithMask(rotate_inst_rs2, rotate_inst_m, rotate_inst_r)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mb_me_noStatus_ra_rlwinm_rs_sh::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1142
	rotate_inst_n = (this->SH) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1177
	rotate_inst_result = (((rotate_inst_m)&(rotate_inst_r))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mb_me_ra_rb_rlwnm_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1146
	rotate_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x1F)) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1187
	rotate_inst_result = (((rotate_inst_m)&(rotate_inst_r))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1188
	_arch->Integer_Unit_updateStatus(rotate_inst_result);
	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mb_me_ra_rlw_rlwimi_rs_sh_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1142
	rotate_inst_n = (this->SH) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1153
	rotate_inst_rs2 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1175
	rotate_inst_result = (_arch->Integer_Unit_insertWithMaskAndUpdateStatus(rotate_inst_rs2, rotate_inst_m, rotate_inst_r)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mb_me_ra_rlwinm_rs_sh_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1138
	u8 rotate_inst_n; //u5
	// 'ppc_e200z4.hadl', l.1142
	rotate_inst_n = (this->SH) & 0x1F;

	// 'ppc_e200z4.hadl', l.1149
	u32 rotate_inst_rs2; //u32
	// 'ppc_e200z4.hadl', l.1149
	rotate_inst_rs2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1158
	u32 rotate_inst_r; //u32
	// 'ppc_e200z4.hadl', l.1160
	rotate_inst_r = (ROTATION_ROL(_arch->SRU_GPR_read32(this->rS),32,rotate_inst_n)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1163
	u32 rotate_inst_m; //u32
	// 'ppc_e200z4.hadl', l.1168
	if(((this->MB)<=(this->ME))){
		// 'ppc_e200z4.hadl', l.1166
		rotate_inst_m = (((((((1U)<<((((u8)(((this->ME)-(this->MB))))+((u8)(1U))))))-(1U)))<<(((31U)-(this->ME))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1168
		rotate_inst_m = (((~(u32)((((((((1U)<<(((((this->MB)-(this->ME)))-((u8)(1U))))))-(1U)))<<(((32U)-((u8)(this->MB)))))) & 0xFFFFFFFF)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1172
	u32 rotate_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1180
	rotate_inst_result = (((rotate_inst_m)&(rotate_inst_r))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1181
	_arch->Integer_Unit_updateStatus(rotate_inst_result);
	// 'ppc_e200z4.hadl', l.1197
	_arch->SRU_GPR_write32(this->rA, rotate_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mfcr_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1397
	_arch->SRU_GPR_write32(this->rD, (_arch->CR()));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mfmsr_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1680
	_arch->SRU_GPR_write32(this->rD, (_arch->MSR()));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mfspr_rd_spr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1386
	u32 move_from_spr_value; //u32
	// 'ppc_e200z4.hadl', l.1388
	move_from_spr_value = (_arch->SRU_spr_read(this->SPR)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1389
	_arch->SRU_GPR_write32(this->rD, move_from_spr_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mtmsr_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1687
	_arch->setMSR((_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF);

	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mtspr_rs_spr::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1375
	u32 move_to_spr_value; //u32
	// 'ppc_e200z4.hadl', l.1377
	move_to_spr_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1378
	_arch->SRU_spr_write(this->SPR, move_to_spr_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mulhw_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.902
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.904
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.905
	mul_inst_resWrite = ((u32)((((mul_inst_result)>>((u64)(32U)))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mulhw_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.902
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.904
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.905
	mul_inst_resWrite = ((u32)((((mul_inst_result)>>((u64)(32U)))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.943
	_arch->Integer_Unit_updateStatus(mul_inst_resWrite);
	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mulhwu_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.910
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.912
	mul_inst_result = ((((u64)(mul_inst_op1))*((u64)(mul_inst_op2)))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.913
	mul_inst_resWrite = ((u32)((((mul_inst_result)>>((u64)(32U)))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mulhwu_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.910
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.912
	mul_inst_result = ((((u64)(mul_inst_op1))*((u64)(mul_inst_op2)))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.913
	mul_inst_resWrite = ((u32)((((mul_inst_result)>>((u64)(32U)))) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.943
	_arch->Integer_Unit_updateStatus(mul_inst_resWrite);
	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mulli_noOv_noStatus_ra_rd_simm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.926
	mul_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.928
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.929
	mul_inst_resWrite = ((u32)((mul_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mullw_noOv_noStatus_ra_rb_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.918
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.920
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.921
	mul_inst_resWrite = ((u32)((mul_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_mullw_noOv_ra_rb_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.918
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.920
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.921
	mul_inst_resWrite = ((u32)((mul_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.943
	_arch->Integer_Unit_updateStatus(mul_inst_resWrite);
	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mullw_noStatus_ra_rb_rd_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.918
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.920
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.921
	mul_inst_resWrite = ((u32)((mul_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.937
	_arch->Integer_Unit_mul_ov(mul_inst_result);
	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_mullw_ra_rb_rd_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.891
	u64 mul_inst_result; //u64
	// 'ppc_e200z4.hadl', l.892
	u32 mul_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.893
	u32 mul_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.894
	u32 mul_inst_resWrite; //u32
	// 'ppc_e200z4.hadl', l.896
	mul_inst_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.918
	mul_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.920
	mul_inst_result = ((u64)((((s64)(SIGN_EXTEND((s32)(mul_inst_op1),32U,64U)))*((s64)(SIGN_EXTEND((s32)(mul_inst_op2),32U,64U)))))) & 0xFFFFFFFFFFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.921
	mul_inst_resWrite = ((u32)((mul_inst_result) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.941
	_arch->Integer_Unit_mul_ov_withUpdateStatus(mul_inst_result, mul_inst_resWrite);
	// 'ppc_e200z4.hadl', l.953
	_arch->SRU_GPR_write32(this->rD, mul_inst_resWrite);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ne_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_neg_noOv_noStatus_ra_rd::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.780
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.781
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.782
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_neg_noOv_ra_rd_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.780
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.781
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.782
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.813
	_arch->Integer_Unit_updateStatus(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_neg_noStatus_ra_rd_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.780
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.781
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.782
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.797
	_arch->Integer_Unit_updateOverflowArith(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_neg_ra_rd_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.780
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.781
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.782
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.801
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatus(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_noStatus_ra_rb_rd_subf::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noOv_noStatus_ra_rb_rd_subf_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_noStatus_ra_rb_rd_subfe_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.752
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.753
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.754
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_noStatus_ra_rd_simm_subfic_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.760
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.761
	add_inst_op2 = ((u32)((s32)((SIGN_EXTEND(this->SIMM,16U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.762
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_noStatus_ra_rd_subfme_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.767
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.768
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.769
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_noStatus_ra_rd_subfze_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.774
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.775
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.776
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.812
	_arch->Integer_Unit_updateCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_ra_rb_rd_subf_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.813
	_arch->Integer_Unit_updateStatus(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_ra_rb_rd_subf_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_ra_rb_rd_subfe_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.752
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.753
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.754
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_ra_rd_subfme_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.767
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.768
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.769
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noOv_ra_rd_subfze_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.774
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.775
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.776
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.814
	_arch->Integer_Unit_updateStatusAndCarry(add_inst_result);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_notcomplemented_or_ra_rb_rs::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_notcomplemented_ra_rb_rs_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_notshifted_or_ra_rs_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1041
	logical_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_notshifted_ra_rs_uimm_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1041
	logical_inst_op2 = ((u32)((this->UIMM) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_or_ra_rs_shifted_uimm::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1039
	logical_inst_op2 = (((this->UIMM)<<((u16)(16U)))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_notaftercomplemented_ra_rs_shifted_uimm_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1039
	logical_inst_op2 = (((this->UIMM)<<((u16)(16U)))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_ra_rb_rd_subf_useOv::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.797
	_arch->Integer_Unit_updateOverflowArith(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rb_rd_subf_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rb_rd_subfe_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.752
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.753
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.754
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rb_rs_slw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1228
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1226
		shift_inst_result = (((shift_inst_src)<<((u32)((u8)((shift_inst_n) & 0x1F))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1228
		shift_inst_result = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_ra_rb_rs_sraw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1246
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1244
		shift_inst_result = ((u32)((((s32)(shift_inst_src))>>((s32)((u8)((shift_inst_n) & 0x1F)))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1246
		shift_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)(FIELD(shift_inst_src,(31U),(31U))),1U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1252
	if(((((shift_inst_n)!=(0U)))&&(((((shift_inst_src)&((u32)(((((1U)<<(shift_inst_n)))-(1U))))))!=(0U))))){
		// 'ppc_e200z4.hadl', l.1250
		_arch->setXER_CA((FIELD(shift_inst_result,(31U),(31U))) & 0x1);

	} else {
		// 'ppc_e200z4.hadl', l.1252
		_arch->setXER_CA((0U) & 0x1);

	}
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rb_rs_srw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1237
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1235
		shift_inst_result = (((shift_inst_src)>>((u32)((u8)((shift_inst_n) & 0x1F))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1237
		shift_inst_result = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_noStatus_ra_rd_subfme_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.767
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.768
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.769
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rd_subfze_useOv_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.774
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.775
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.776
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.805
	_arch->Integer_Unit_updateOverflowArith_withUpdateCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_noStatus_ra_rs_sh_sraw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1219
	shift_inst_n = ((u8)((this->SH) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1246
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1244
		shift_inst_result = ((u32)((((s32)(shift_inst_src))>>((s32)((u8)((shift_inst_n) & 0x1F)))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1246
		shift_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)(FIELD(shift_inst_src,(31U),(31U))),1U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1252
	if(((((shift_inst_n)!=(0U)))&&(((((shift_inst_src)&((u32)(((((1U)<<(shift_inst_n)))-(1U))))))!=(0U))))){
		// 'ppc_e200z4.hadl', l.1250
		_arch->setXER_CA((FIELD(shift_inst_result,(31U),(31U))) & 0x1);

	} else {
		// 'ppc_e200z4.hadl', l.1252
		_arch->setXER_CA((0U) & 0x1);

	}
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_notSimple_ra_rb_reg_to_f_tw::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1783
	u32 trap_instructions_op1; //u32
	// 'ppc_e200z4.hadl', l.1784
	trap_instructions_op1 = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1785
	u32 trap_instructions_op2; //u32
	// 'ppc_e200z4.hadl', l.1789
	trap_instructions_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1814
	u8 trap_instructions_do_TRAP; //u1
	// 'ppc_e200z4.hadl', l.1816
	trap_instructions_do_TRAP = (0U) & 0x1;

	// 'ppc_e200z4.hadl', l.1818
	if((((((s32)(trap_instructions_op1))<((s32)(trap_instructions_op2))))&(FIELD(this->TO,(4U),(4U))))){
		// 'ppc_e200z4.hadl', l.1818
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1821
	if((((((s32)(trap_instructions_op1))>((s32)(trap_instructions_op2))))&(FIELD(this->TO,(3U),(3U))))){
		// 'ppc_e200z4.hadl', l.1821
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1824
	if(((((trap_instructions_op1)==(trap_instructions_op2)))&(FIELD(this->TO,(2U),(2U))))){
		// 'ppc_e200z4.hadl', l.1824
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1827
	if(((((trap_instructions_op1)<(trap_instructions_op2)))&(FIELD(this->TO,(1U),(1U))))){
		// 'ppc_e200z4.hadl', l.1827
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1830
	if(((((trap_instructions_op1)>(trap_instructions_op2)))&(FIELD(this->TO,(0U),(0U))))){
		// 'ppc_e200z4.hadl', l.1830
		trap_instructions_do_TRAP = (1U) & 0x1;

	}
	// 'ppc_e200z4.hadl', l.1859
	if(trap_instructions_do_TRAP){
		// 'ppc_e200z4.hadl', l.1834
		_arch->setSRR0(((((_arch->PC()))-((u32)(4U)))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1835
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(30U),(27U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1836
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(21U),(13U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1837
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(17U),(17U),(1U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1838
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(16U),(16U),(0U))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1839
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(15U),(8U),(FIELD((_arch->MSR()),(15U),(8U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1840
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(6U),(4U),(FIELD((_arch->MSR()),(6U),(4U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1841
		_arch->setSRR1((FIELD_ASSIGN((_arch->SRR1()),(1U),(0U),(FIELD((_arch->MSR()),(1U),(0U))))) & 0xFFFFFFFF);

		// 'ppc_e200z4.hadl', l.1842
		_arch->setMSR_POW((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1843
		_arch->setMSR_EE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1844
		_arch->setMSR_PR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1845
		_arch->setMSR_FP((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1846
		_arch->setMSR_FE0((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1847
		_arch->setMSR_SE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1848
		_arch->setMSR_BE((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1849
		_arch->setMSR_FE1((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1850
		_arch->setMSR_IR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1851
		_arch->setMSR_DR((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1852
		_arch->setMSR_RI((0U) & 0x1);

		// 'ppc_e200z4.hadl', l.1853
		_arch->setMSR_LE(((_arch->MSR_ILE())) & 0x1);

		// 'ppc_e200z4.hadl', l.1858
		if((((_arch->MSR_IP()))==(1U))){
			// 'ppc_e200z4.hadl', l.1856
			_arch->fetcher_absBranch(4293920512U, 1U);
		} else {
			// 'ppc_e200z4.hadl', l.1858
			_arch->fetcher_absBranch(1792U, 1U);
		}
	}
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_notaftercomplemented_notcomplemented_or_ra_rb_rs_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1048
	logical_inst_result = (((logical_inst_op1)|(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_notaftercomplemented_notcomplemented_ra_rb_rs_useStatus_xor::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1017
	u32 logical_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.1018
	u32 logical_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.1019
	u32 logical_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1022
	logical_inst_op1 = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1032
	logical_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1052
	logical_inst_result = (((logical_inst_op1)^(logical_inst_op2))) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1069
	_arch->Integer_Unit_updateStatus(logical_inst_result);
	// 'ppc_e200z4.hadl', l.1073
	_arch->SRU_GPR_write32(this->rA, logical_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_notu_ra_rb_rs_store_word_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1453
	if(((this->rA)!=(0U))){
		// 'ppc_e200z4.hadl', l.1451
		getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1453
		getBaseAddress_base_addr = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1559
	_arch->mem_write32(store_inst_effective_address, store_inst_value);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_ra_rb_rd_subf_useOv_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.801
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatus(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rd_subf_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.744
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.745
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.746
	add_inst_carry = (1U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rd_subfe_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.752
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.753
	add_inst_op2 = (_arch->SRU_GPR_read32(this->rB)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.754
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rs_slw_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1228
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1226
		shift_inst_result = (((shift_inst_src)<<((u32)((u8)((shift_inst_n) & 0x1F))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1228
		shift_inst_result = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1274
	_arch->Integer_Unit_updateStatus(shift_inst_result);
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rs_sraw_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1246
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1244
		shift_inst_result = ((u32)((((s32)(shift_inst_src))>>((s32)((u8)((shift_inst_n) & 0x1F)))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1246
		shift_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)(FIELD(shift_inst_src,(31U),(31U))),1U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1252
	if(((((shift_inst_n)!=(0U)))&&(((((shift_inst_src)&((u32)(((((1U)<<(shift_inst_n)))-(1U))))))!=(0U))))){
		// 'ppc_e200z4.hadl', l.1250
		_arch->setXER_CA((FIELD(shift_inst_result,(31U),(31U))) & 0x1);

	} else {
		// 'ppc_e200z4.hadl', l.1252
		_arch->setXER_CA((0U) & 0x1);

	}
	// 'ppc_e200z4.hadl', l.1274
	_arch->Integer_Unit_updateStatus(shift_inst_result);
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rs_srw_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1216
	shift_inst_n = ((u8)((_arch->SRU_GPR_read32(this->rB)) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1237
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1235
		shift_inst_result = (((shift_inst_src)>>((u32)((u8)((shift_inst_n) & 0x1F))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1237
		shift_inst_result = (0U) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1274
	_arch->Integer_Unit_updateStatus(shift_inst_result);
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rb_rs_store_u_word_x::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1506
	u32 store_inst_value; //u32
	// 'ppc_e200z4.hadl', l.1507
	u32 store_inst_base_addr; //u32
	// 'ppc_e200z4.hadl', l.1508
	u32 store_inst_effective_address; //u32
	// 'ppc_e200z4.hadl', l.1509
	u32 &getBaseAddress_base_addr = store_inst_base_addr; // u32
	// 'ppc_e200z4.hadl', l.1446
	getBaseAddress_base_addr = (_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1457
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemReg(this->rA);
	#endif
	// 'ppc_e200z4.hadl', l.1515
	store_inst_value = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1549
	_arch->effective_address_Unit_eff_addr_add(store_inst_effective_address, store_inst_base_addr, _arch->SRU_GPR_read32(this->rB));
	// 'ppc_e200z4.hadl', l.1552
	//-> code memAccess for p2ac
	#ifdef __P2AC_MEM__
		setP2ACMemRegOffset(this->rB);
	#endif
	// 'ppc_e200z4.hadl', l.1559
	_arch->mem_write32(store_inst_effective_address, store_inst_value);
	// 'ppc_e200z4.hadl', l.1573
	_arch->SRU_GPR_write32(this->rA, store_inst_effective_address);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
}

void e200z4_ra_rd_subfme_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.767
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.768
	add_inst_op2 = (4294967295U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.769
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rd_subfze_useOv_useStatus_withCarry::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.671
	u64 add_inst_result; //u33
	// 'ppc_e200z4.hadl', l.672
	u32 add_inst_op1; //u32
	// 'ppc_e200z4.hadl', l.673
	u32 add_inst_op2; //u32
	// 'ppc_e200z4.hadl', l.674
	u32 add_inst_carry; //u32
	// 'ppc_e200z4.hadl', l.774
	add_inst_op1 = (((~_arch->SRU_GPR_read32(this->rA)) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.775
	add_inst_op2 = (0U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.776
	add_inst_carry = ((u32)(((_arch->XER_CA())) & 0xFFFFFFFF)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.786
	u64 add_inst_tmp; //u34
	// 'ppc_e200z4.hadl', l.789
	add_inst_tmp = ((((u64)((((u64)(add_inst_op1))+((u64)(add_inst_op2)))))+((u64)(add_inst_carry)))) & 0x3FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.790
	add_inst_result = ((u64)((((((add_inst_tmp)|((u64)(((FIELD(add_inst_tmp,(33U),(33U)))<<(32U))))))|((u64)(((FIELD(add_inst_tmp,(32U),(32U)))<<(32U)))))) & 0x1FFFFFFFFULL)) & 0x1FFFFFFFFULL;

	// 'ppc_e200z4.hadl', l.809
	_arch->Integer_Unit_updateOverflowArith_withUpdateStatusAndCarry(add_inst_result, add_inst_op1, add_inst_op2);
	// 'ppc_e200z4.hadl', l.828
	_arch->SRU_GPR_write32(this->rD, (u32)((add_inst_result) & 0xFFFFFFFF));
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_ra_rs_sh_sraw_useStatus::execute(arch *_arch){
	_arch->initDDCRegAccess();
	//effective code
	// 'ppc_e200z4.hadl', l.1207
	u32 shift_inst_result; //u32
	// 'ppc_e200z4.hadl', l.1208
	u32 shift_inst_src; //u32
	// 'ppc_e200z4.hadl', l.1210
	shift_inst_src = (_arch->SRU_GPR_read32(this->rS)) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1212
	u8 shift_inst_n; //u6
	// 'ppc_e200z4.hadl', l.1219
	shift_inst_n = ((u8)((this->SH) & 0x3F)) & 0x3F;

	// 'ppc_e200z4.hadl', l.1246
	if(((FIELD(shift_inst_n,(5U),(5U)))==(0U))){
		// 'ppc_e200z4.hadl', l.1244
		shift_inst_result = ((u32)((((s32)(shift_inst_src))>>((s32)((u8)((shift_inst_n) & 0x1F)))))) & 0xFFFFFFFF;

	} else {
		// 'ppc_e200z4.hadl', l.1246
		shift_inst_result = ((u32)((s32)((SIGN_EXTEND((s8)(FIELD(shift_inst_src,(31U),(31U))),1U,32U)) & 0xFFFFFFFF))) & 0xFFFFFFFF;

	}
	// 'ppc_e200z4.hadl', l.1252
	if(((((shift_inst_n)!=(0U)))&&(((((shift_inst_src)&((u32)(((((1U)<<(shift_inst_n)))-(1U))))))!=(0U))))){
		// 'ppc_e200z4.hadl', l.1250
		_arch->setXER_CA((FIELD(shift_inst_result,(31U),(31U))) & 0x1);

	} else {
		// 'ppc_e200z4.hadl', l.1252
		_arch->setXER_CA((0U) & 0x1);

	}
	// 'ppc_e200z4.hadl', l.1274
	_arch->Integer_Unit_updateStatus(shift_inst_result);
	// 'ppc_e200z4.hadl', l.1278
	_arch->SRU_GPR_write32(this->rA, shift_inst_result);
	//Data Dependancy Controller related part
	_arch->getDDCRegFileSRU_GPRAccessMask(this->m_DDCRegFileSRU_GPRMaskRead, this->m_DDCRegFileSRU_GPRMaskWrite);
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}

void e200z4_rfi::execute(arch *_arch){
	_arch->initDDCRegAccess();
	u32 val_pc_before = _arch->PC();
	//effective code
	// 'ppc_e200z4.hadl', l.1669
	u32 return_from_interrupt_mask; //u32
	// 'ppc_e200z4.hadl', l.1671
	return_from_interrupt_mask = (65395U) & 0xFFFFFFFF;

	// 'ppc_e200z4.hadl', l.1672
	_arch->fetcher_absBranch((((_arch->SRR0()))&(4294967292U)), 1U);
	// 'ppc_e200z4.hadl', l.1673
	_arch->setMSR((_arch->Integer_Unit_insertWithMask((_arch->MSR()), return_from_interrupt_mask, (_arch->SRR1()))) & 0xFFFFFFFF);

	//branch check.
	m_jumpTaken = _arch->PC()-val_pc_before;
	_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);
}
