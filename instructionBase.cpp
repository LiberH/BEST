/**
 * generated by HARMLESS : 'Hardware ARchitecture Modeling Language
 *                          for Embedded Software Simulation'
 * model : e200z4
 *
 */

#include "instructionBase.h"
#include "arch.h"
#include <sstream>

using namespace std;

/** static information extracted from an instruction:
 *  * PC
 *  * mnemonic
 *  * size (in bytes)
 *  * instruction class
 *  * branch target.
 */

staticInfo *
e200z4_instruction::getStaticInfo (arch *_arch)
{
  staticInfo *i = new staticInfo ();
  
  i -> pc = this -> getInstructionPointer ();
  i -> mnemo = string (this -> mnemo ());
  
  this -> execute (_arch);
  i -> write_regs; this -> lockDDCWriteRegs (i -> write_regs);
  i -> read_regs; this -> getDDCReadRegs (i -> read_regs);
  
  i -> is_branch = this -> isBranch ();
  i -> is_unkown = this -> isBranchStaticallyUnknown ();
  i -> do_link = this -> hasID_SP_Check ();
  i -> is_uncond = this -> isBranchUnconditional ();
  
  _arch -> setProgramCounter (i -> pc + this -> size ());
  this -> detectBranch (_arch);
  i -> target = _arch -> programCounter ();
  
  /*
    #ifdef __P2AC_MEM__
    if (this -> m_memOffset != 0 || this -> m_memReg!=0 || this -> m_memRegOffset!=0)
      {
        this -> m_memOffset;
        this -> m_memReg;
        this -> m_memRegOffset;
      }
    #endif
  */
  
  return i;
}

