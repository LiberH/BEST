instruction < basic block < function

---

instruction
 - adhoc data structure

 fall trough edge
  - connect two instructions

---

basic block
 - list of instruction
 - instructions between two basic block leaders
     (including the former, excluding the later)

 basic block leader
  - the program's entry point
  - the program's first instruction (lexical order)
  - instruction targeted by a branching instruction
  - instruction following a branching instruction
  - instruction targeted by a calling instruction
  - instruction following a calling instruction

 call site
  - basic block ending by a call

 return site
  - basic block following a call site
      (lexical successor of a call site)

 unknown basic block
  - used as target for unresolved branching
  - in each function that contains unresolved branching

 control flow edge
  - connect two basic blocks
  - represent possible control flow
  - connect the unknown block node to possible targets of unresolved branching

 call edge
  - connect call site to the entry point of the called function
  - connect the unknown function node to possible targets of unresolved calls

 return edge
  - connect exit of a function to the corresponding return sites

---

function
 - graph of basic block
 - basic blocks between a call target and a return instruction
     (including both)

 function exit
  - function unique exit node
      (virtual basic block)

 unknown function
  - target of unresolved function calls
 
---

we consider graph with:
 - a unique start node and,
 - a unique end node.

depth-first search
  algorithm
    1  procedure DepthFirstSearch(G,v):
    2    Order(v) := i
    3    i := i +1
    3    for (v,w) in EdgesFrom(G,v) do
    4      if (Order(w) = -1) then
    5        DFS(G,w)

dominance
  the node D is a dominator of the node N
  if all path from the start node to the node N
  contains the node D.
  (by definition, every node is dominator for itself.)

  post-dominance
    the node P is a post-dominator of the node N
    if in the reverse graph
    the node P is a dominator of the node N.

  strict dominance
    the node S is a strict dominator of the node N
    if the node S is a dominator of the node N
    and the node S is not the node N.
    (by definition, the start node do not have a strict dominator)

  immediate dominance
    the node I is the immediate dominator the node N
    if the node I is a strict dominator of the node N and
    if the node I is not a strict dominator of any other node that is a strict dominator of the node N.
    (by definition, every node -- except the start node -- do have a unique immediate dominator)

  dominance tree
    the tree T is a dominator tree
    if all parent node is the immediate dominator of its child nodes.
    (by definition, the start node is the root of the dominance tree.)

  semi-dominance
    the node A is the semi-dominator of the node N
    if in the depth-first search numbered graph
    the node A is the smallest numbered node such that
    there is a path v0.v1.v2.[...].vk (from v0 = A to vk = N)
    with vi > vk for 0 <= i <= k -1.

  algorithm
    1  ...

control dependence graph
  the node M is control dependent on the node N if:
  (1) there exists a directed path from N to M,
      with any Z (excluding N and M) post-dominated by M
  (2) N is not post-dominated by M.

  algorithm
    1  procedure ControlDependences(G,v):
    2    pdt := PostDominatorTree(G);
    3    for (v,w) in EdgesFrom(G,v) do
    4      if (not PostDominate(pdt,w,v)) then
    5        l := LastCommonAncestor(pdt,v,w)
    6        p := FindPath(pdt,l,w)
    7        return (Nodes(p) \ {l})
