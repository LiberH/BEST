<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
    <declaration>/* TODO:
 *  - data struct for _Stack
 *  - capitalize _DATA, _INSTS &amp; _BSS
 *  - microbench for memory access time
 *  - set proper values for _Inst_t.cycles
 *  - should remove '_do'?
 */

//////////////////////////////////////////
////////////////// Types and Constants: //
//////////////////////////////////////////

/* NOTE: This is the opt. template. */

const bool MONITORING = false;
const bool BACKWARD_TAKEN = false;
const bool DYNAMIC_PRED = false;

/* Binary: */

const int _UINT1_MAX  =           1;
const int _UINT2_MAX  =           3;
const int _UINT3_MAX  =           7;
const int _UINT4_MAX  =          15;
const int _UINT5_MAX  =          31;
const int _UINT8_MAX  =         255;
const int _UINT16_MAX =       65535;
const int _UINT32_MAX =  2147483647; // not 4294967295 because of UPPAAL internal limitation...
typedef int[0, _UINT1_MAX ] uint1_t;
typedef int[0, _UINT2_MAX ] uint2_t;
typedef int[0, _UINT3_MAX ] uint3_t;
typedef int[0, _UINT4_MAX ] uint4_t;
typedef int[0, _UINT5_MAX ] uint5_t;
typedef int[0, _UINT8_MAX ] uint8_t;
typedef int[0, _UINT16_MAX] uint16_t;
typedef int[0, _UINT32_MAX] uint32_t;

const int _SINT8_MIN =         -128;
const int _SINT8_MAX =          127;
const int _SINT16_MIN =      -32768;
const int _SINT16_MAX =       32767;
const int _SINT32_MIN = -2147483648;
const int _SINT32_MAX =  2147483647;
typedef int[_SINT8_MIN, _SINT8_MAX] sint8_t;
typedef int[_SINT16_MIN, _SINT16_MAX] sint16_t;
typedef int[_SINT32_MIN, _SINT32_MAX] sint32_t;

const int  _REGS_MAX  =  8;
const int _CYCLES_MAX =  1; // Arbitrary.
const int _STACK_MAX  = 10; // Arbitrary.
const int  _INST_MAX  = 421;
const int  _DATA_MAX  = 1;
const int   _BSS_MAX  = 10400;

typedef struct {
  int  addr;
  int[-1,_CYCLES_MAX]  cycles;
  bool do_branch;
  int[0,_INST_MAX] target;
  bool do_memory;
  uint8_t  read_regs[_REGS_MAX];
  uint8_t  write_regs[_REGS_MAX];
} _Inst_t;
const uint8_t _EMPTY_REGS[_REGS_MAX] = { 0, 0, 0, 0, 0, 0, 0, 0 };
const _Inst_t _EMPTY_INST            = { 0, 0, false, 0, false, _EMPTY_REGS, _EMPTY_REGS };

typedef struct {
  int incorrectly_predicted_not_taken;
  int incorrectly_predicted_taken;
  int correctly_predicted_not_taken;
  int correctly_predicted_taken;
  int incorrect_target;
} _M_Pred_t;
const _M_Pred_t _M_EMPTY_PRED = { 0, 0, 0, 0, 0 };

/* Flash: */

const int FLASH_LATENCY   = 10; // TODO: arbitrary; to set correctly
const int FLASH_BURST_MAX =  4;
typedef struct {
  int[0, FLASH_BURST_MAX] burst_index;
} Flash_t;

/* Static RAM (SRAM): */

const int SRAM_LATENCY = -1 + 10; // TODO: arbitrary; to set correctly
typedef struct {
  bool executing;
} SRAM_t;

/* Instruction Memory Unit (IMU): */

const int IMU_WAYS_MAX              =  2;
const int IMU_SETS_MAX              = 64;
const int IMU_FILLBUFFER_DWORDS_MAX =  4;

/*
const int IMU_FIRST_USED_SET = (_INSTS[           0].addr / 32) % IMU_SETS_MAX; // First 'in-use-at-run-time' set
const int IMU_LAST_USED_SET  = (_INSTS[_INST_MAX -1].addr / 32) % IMU_SETS_MAX; // Last  'in-use-at-run-time' set
const int IMU_USED_SETS_MAX  = IMU_LAST_USED_SET - IMU_FIRST_USED_SET +1;       // Number of 'used' sets
*/
const int IMU_USED_SETS_MAX = IMU_SETS_MAX;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[0, IMU_WAYS_MAX -1] rp_way;
  int tags[IMU_WAYS_MAX][IMU_USED_SETS_MAX]; // TODO: set a range as [-1, ???]
} IMU_ICache_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1, IMU_FILLBUFFER_DWORDS_MAX -1] dword;
  int[-1, IMU_SETS_MAX -1] set;
  int tag; // TODO: set a range as [-1, ???]
  bool filled[IMU_FILLBUFFER_DWORDS_MAX];
} IMU_FillBuffer_t;
const IMU_FillBuffer_t IMU_EMPTY_FILLBUFFER_LINE = { -1, -1, -1, -1, { false, false, false, false } };

typedef struct {
  IMU_FillBuffer_t FillBuffer;
  IMU_ICache_t ICache;
} IMU_t;

const int IMU_CACHE_HIT       = 0;
const int IMU_FILLBUFFER_HIT  = 1;
const int IMU_FILLBUFFER_MISS = 2;
const int IMU_CACHE_MISS      = 3;

/* Instruction and Control Unit (InCU): */

const int INCU_STRONGLY_NOT_TAKEN = 0;
const int INCU_WEAKLY___NOT_TAKEN = 1;
const int INCU_WEAKLY_______TAKEN = 2;
const int INCU_STRONGLY_____TAKEN = 3;
typedef struct {
  int[-1, _INST_MAX -1] index;
//int[-1, _INST_MAX -1] target;
  int[-1, INCU_STRONGLY_____TAKEN +1] prediction;
} InCU_BTB_Entry_t;
const InCU_BTB_Entry_t INCU_EMPTY_BTB_ENTRY = { -1, /*-1,*/ INCU_STRONGLY_NOT_TAKEN };

const int INCU_BTB_MAX = 8;
typedef struct {
  int[0, 8] top;
  InCU_BTB_Entry_t buffer[INCU_BTB_MAX];
} InCU_BTB_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_PC_t;
const InCU_PC_t INCU_EMPTY_PC = { -1, -1, false, false, false };

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IBuff_Entry_t;
const InCU_IBuff_Entry_t INCU_EMPTY_IBUFF_ENTRY = { -1, -1, false, false, false };

const int INCU_IBUFF_MAX = 8;
typedef struct {
  int[0, INCU_IBUFF_MAX] count;
  InCU_IBuff_Entry_t buffer[INCU_IBUFF_MAX];
} InCU_IBuff_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IR_t;
const InCU_IR_t INCU_EMPTY_IR = { -1, -1, false, false, false };

typedef struct {
  InCU_BTB_t BTB;
  InCU_PC_t PC;
  InCU_IBuff_t IBuff;
  InCU_IR_t IR;
} InCU_t;

/* Execution Units (EUs): */

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} EUs_Pipeline_Stage_t;
const EUs_Pipeline_Stage_t EUS_EMPTY_PIPELINE_STAGE = { -1, -1, false, false, false };

const int EUS_PIPELINE_D   = 0;
const int EUS_PIPELINE_E   = 1;
const int EUS_PIPELINE_M   = 2;
const int EUS_PIPELINE_W   = 3;
const int EUS_PIPELINE_MAX = 4;
const int EUS_CYCLES_MAX   = 5; // TODO: arbitrary; set properly
typedef struct {
  EUs_Pipeline_Stage_t pipeline[EUS_PIPELINE_MAX];
} EUs_t;

//////////////////////////////////////////
///////////////////////// Declarations: //
//////////////////////////////////////////

/* (global:) */

clock _clock;

broadcast chan _doInitialize;
   urgent chan _doTerminate;
   urgent chan _do;

bool _mustTerminate;
int[-1,  _INST_MAX -1] _Stack[_STACK_MAX];
int[ 0, _STACK_MAX   ] _stack_top;

_M_Pred_t _M_StaticPred;
_M_Pred_t _M_DynamicPred;
uint32_t  _M_BTBOverwriting;
uint32_t  _M_ICacheMiss;
uint32_t  _M_ICacheHit;
uint32_t  _M_IBuffPop;
uint32_t  _M_IBuffFlush;
uint32_t  _M_IBuffFlushedInst;
uint32_t  _M_ExecutedInst;

/* Binary: */

sint32_t CTR ,XER;

const int _CR_MAX = 2;
const int[-1, _CR_MAX] IndCR[8] = { 0, -1, -1, -1, -1, -1, -1, 1 };
uint4_t CR[_CR_MAX];

const uint3_t cr0 = 0;
const uint3_t cr7 = 7;


const int _GPRS_MAX = 10;
sint32_t GPRS[_GPRS_MAX];

const uint3_t r0 = 0;
const uint5_t r1 = 1;
const uint5_t r3 = 2;
const uint5_t r7 = 3;
const uint5_t r8 = 4;
const uint5_t r9 = 5;
const uint5_t r10 = 6;
const uint5_t r11 = 7;
const uint5_t r30 = 8;
const uint5_t r31 = 9;


const int _RETS_MAX = 2;
      int[-1, _INST_MAX -32] _Rets[_RETS_MAX] = { -1, -1 };
const int[-1, _RETS_MAX] IndRets[_INST_MAX -32] = {
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, 1, -1, -1, -1, -1
};

const _Inst_t _INSTS[_INST_MAX] = {

  /* BB0 */
  /*  3000: stwu r1,-48(r1)          - 0 */ { 12288, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3004: mfspr r0,100             - 1 */ { 12292, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  3008: stw r0,52(r1)            - 2 */ { 12296, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 192,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  300c: stw r30,40(r1)           - 3 */ { 12300, 1, false, _INST_MAX, true,  {  16,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3010: stw r31,44(r1)           - 4 */ { 12304, 1, false, _INST_MAX, true,  { 224,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3014: mr r31,r1                - 5 */ { 12308, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3018: bcl- 20,4*cr7+so,3018    - 6 */ { 12312, 1, true,          7, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB1 */
  /*  301c: mfspr r30,100            - 7 */ { 12316, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3020: addis r30,r30,1          - 8 */ { 12320, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3024: addi r30,r30,-30932      - 9 */ { 12324, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3028: li r9,5                  - 10 */ { 12328, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  302c: stw r9,20(r31)           - 11 */ { 12332, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3030: li r9,0                  - 12 */ { 12336, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3034: stw r9,8(r31)            - 13 */ { 12340, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3038: b 3144                   - 14 */ { 12344, 1, true,         81, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB2 */
  /*  303c: li r9,0                  - 15 */ { 12348, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3040: stw r9,16(r31)           - 16 */ { 12352, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3044: li r9,0                  - 17 */ { 12356, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3048: stw r9,12(r31)           - 18 */ { 12360, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  304c: b 3110                   - 19 */ { 12364, 1, true,         68, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB3 */
  /*  3050: lwz r9,8(r31)            - 20 */ { 12368, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3054: addi r10,r9,1            - 21 */ { 12372, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3058: lwz r9,12(r31)           - 22 */ { 12376, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  305c: addi r9,r9,1             - 23 */ { 12380, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3060: add r10,r10,r9           - 24 */ { 12384, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3064: lwz r8,-32768(r30)       - 25 */ { 12388, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3068: lwz r9,8(r31)            - 26 */ { 12392, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  306c: mulli r7,r9,50           - 27 */ { 12396, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3070: lwz r9,12(r31)           - 28 */ { 12400, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3074: add r9,r7,r9             - 29 */ { 12404, 1, false, _INST_MAX, false, {   0,   0,   0, 160,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3078: rlwinm r9,r9,2,0,29      - 30 */ { 12408, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  307c: add r9,r8,r9             - 31 */ { 12412, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3080: stw r10,0(r9)            - 32 */ { 12416, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3084: lwz r10,8(r31)           - 33 */ { 12420, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3088: lwz r9,12(r31)           - 34 */ { 12424, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  308c: cmpw cr7,r10,r9          - 35 */ { 12428, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3090: bne- cr7,30d8            - 36 */ { 12432, 1, true,         54, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB4 */
  /*  3094: lwz r10,-32768(r30)      - 37 */ { 12436, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3098: lwz r9,8(r31)            - 38 */ { 12440, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  309c: mulli r8,r9,50           - 39 */ { 12444, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  30a0: lwz r9,12(r31)           - 40 */ { 12448, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30a4: add r9,r8,r9             - 41 */ { 12452, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30a8: rlwinm r9,r9,2,0,29      - 42 */ { 12456, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30ac: add r9,r10,r9            - 43 */ { 12460, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30b0: lwz r9,0(r9)             - 44 */ { 12464, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30b4: rlwinm r10,r9,1,0,30     - 45 */ { 12468, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  30b8: lwz r8,-32768(r30)       - 46 */ { 12472, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  30bc: lwz r9,8(r31)            - 47 */ { 12476, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30c0: mulli r7,r9,50           - 48 */ { 12480, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  30c4: lwz r9,12(r31)           - 49 */ { 12484, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30c8: add r9,r7,r9             - 50 */ { 12488, 1, false, _INST_MAX, false, {   0,   0,   0, 160,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30cc: rlwinm r9,r9,2,0,29      - 51 */ { 12492, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30d0: add r9,r8,r9             - 52 */ { 12496, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30d4: stw r10,0(r9)            - 53 */ { 12500, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB5 */
  /*  30d8: lwz r10,-32768(r30)      - 54 */ { 12504, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  30dc: lwz r9,8(r31)            - 55 */ { 12508, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30e0: mulli r8,r9,50           - 56 */ { 12512, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  30e4: lwz r9,12(r31)           - 57 */ { 12516, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30e8: add r9,r8,r9             - 58 */ { 12520, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30ec: rlwinm r9,r9,2,0,29      - 59 */ { 12524, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30f0: add r9,r10,r9            - 60 */ { 12528, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30f4: lwz r9,0(r9)             - 61 */ { 12532, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30f8: lwz r10,16(r31)          - 62 */ { 12536, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  30fc: add r9,r10,r9            - 63 */ { 12540, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3100: stw r9,16(r31)           - 64 */ { 12544, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3104: lwz r9,12(r31)           - 65 */ { 12548, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3108: addi r9,r9,1             - 66 */ { 12552, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  310c: stw r9,12(r31)           - 67 */ { 12556, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB6 */
  /*  3110: lwz r10,12(r31)          - 68 */ { 12560, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3114: lwz r9,20(r31)           - 69 */ { 12564, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3118: cmpw cr7,r10,r9          - 70 */ { 12568, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  311c: ble+ cr7,3050            - 71 */ { 12572, 1, true,         20, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB7 */
  /*  3120: lwz r10,-32764(r30)      - 72 */ { 12576, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3124: lwz r9,8(r31)            - 73 */ { 12580, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3128: rlwinm r9,r9,2,0,29      - 74 */ { 12584, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  312c: add r9,r10,r9            - 75 */ { 12588, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3130: lwz r10,16(r31)          - 76 */ { 12592, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3134: stw r10,0(r9)            - 77 */ { 12596, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3138: lwz r9,8(r31)            - 78 */ { 12600, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  313c: addi r9,r9,1             - 79 */ { 12604, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3140: stw r9,8(r31)            - 80 */ { 12608, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB8 */
  /*  3144: lwz r10,8(r31)           - 81 */ { 12612, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3148: lwz r9,20(r31)           - 82 */ { 12616, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  314c: cmpw cr7,r10,r9          - 83 */ { 12620, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3150: ble+ cr7,303c            - 84 */ { 12624, 1, true,         15, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB9 */
  /*  3154: lwz r3,20(r31)           - 85 */ { 12628, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  3158: bl 3184                  - 86 */ { 12632, 1, true,         97, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB10 */
  /*  315c: stw r3,24(r31)           - 87 */ { 12636, 1, false, _INST_MAX, true,  { 224,   0,   0,   2,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3160: lwz r9,24(r31)           - 88 */ { 12640, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3164: mr r3,r9                 - 89 */ { 12644, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  3168: addi r11,r31,48          - 90 */ { 12648, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   2,   0,   0,   0,   0,   0 } },
  /*  316c: lwz r0,4(r11)            - 91 */ { 12652, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  3170: mtspr 100,r0             - 92 */ { 12656, 1, false, _INST_MAX, false, {   0,   0,   0,   0,  64,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,  32 } },
  /*  3174: lwz r30,-8(r11)          - 93 */ { 12660, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3178: lwz r31,-4(r11)          - 94 */ { 12664, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  317c: mr r1,r11                - 95 */ { 12668, 1, false, _INST_MAX, false, {   0,   0,   2,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3180: bclr- 20,lt              - 96 */ { 12672, 1, true,  _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB11 */
  /*  3184: stwu r1,-448(r1)         - 97 */ { 12676, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3188: mfspr r0,100             - 98 */ { 12680, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  318c: stw r0,452(r1)           - 99 */ { 12684, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 192,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3190: stw r30,440(r1)          - 100 */ { 12688, 1, false, _INST_MAX, true,  {  16,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3194: stw r31,444(r1)          - 101 */ { 12692, 1, false, _INST_MAX, true,  { 224,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3198: mr r31,r1                - 102 */ { 12696, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  319c: bcl- 20,4*cr7+so,319c    - 103 */ { 12700, 1, true,        104, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB12 */
  /*  31a0: mfspr r30,100            - 104 */ { 12704, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31a4: addis r30,r30,1          - 105 */ { 12708, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31a8: addi r30,r30,-31320      - 106 */ { 12712, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31ac: stw r3,424(r31)          - 107 */ { 12716, 1, false, _INST_MAX, true,  { 224,   0,   0,   2,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31b0: li r9,0                  - 108 */ { 12720, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31b4: stw r9,8(r31)            - 109 */ { 12724, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31b8: b 33d0                   - 110 */ { 12728, 1, true,        244, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB13 */
  /*  31bc: lwz r9,8(r31)            - 111 */ { 12732, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31c0: addi r9,r9,1             - 112 */ { 12736, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31c4: stw r9,12(r31)           - 113 */ { 12740, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31c8: b 32bc                   - 114 */ { 12744, 1, true,        175, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB14 */
  /*  31cc: lwz r10,-32768(r30)      - 115 */ { 12748, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  31d0: lwz r9,12(r31)           - 116 */ { 12752, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31d4: mulli r8,r9,50           - 117 */ { 12756, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  31d8: lwz r9,8(r31)            - 118 */ { 12760, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31dc: add r9,r8,r9             - 119 */ { 12764, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31e0: rlwinm r9,r9,2,0,29      - 120 */ { 12768, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31e4: add r9,r10,r9            - 121 */ { 12772, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31e8: lwz r9,0(r9)             - 122 */ { 12776, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31ec: stw r9,20(r31)           - 123 */ { 12780, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  31f0: lwz r9,8(r31)            - 124 */ { 12784, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  31f4: cmpwi cr7,r9,0           - 125 */ { 12788, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  31f8: beq- cr7,3274            - 126 */ { 12792, 1, true,        157, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB15 */
  /*  31fc: li r9,0                  - 127 */ { 12796, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3200: stw r9,16(r31)           - 128 */ { 12800, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3204: b 3264                   - 129 */ { 12804, 1, true,        153, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB16 */
  /*  3208: lwz r10,-32768(r30)      - 130 */ { 12808, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  320c: lwz r9,12(r31)           - 131 */ { 12812, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3210: mulli r8,r9,50           - 132 */ { 12816, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3214: lwz r9,16(r31)           - 133 */ { 12820, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3218: add r9,r8,r9             - 134 */ { 12824, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  321c: rlwinm r9,r9,2,0,29      - 135 */ { 12828, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3220: add r9,r10,r9            - 136 */ { 12832, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3224: lwz r10,0(r9)            - 137 */ { 12836, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3228: lwz r8,-32768(r30)       - 138 */ { 12840, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  322c: lwz r9,16(r31)           - 139 */ { 12844, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3230: mulli r7,r9,50           - 140 */ { 12848, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3234: lwz r9,8(r31)            - 141 */ { 12852, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3238: add r9,r7,r9             - 142 */ { 12856, 1, false, _INST_MAX, false, {   0,   0,   0, 160,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  323c: rlwinm r9,r9,2,0,29      - 143 */ { 12860, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3240: add r9,r8,r9             - 144 */ { 12864, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3244: lwz r9,0(r9)             - 145 */ { 12868, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3248: mullw r9,r10,r9          - 146 */ { 12872, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  324c: lwz r10,20(r31)          - 147 */ { 12876, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3250: subf r9,r9,r10           - 148 */ { 12880, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3254: stw r9,20(r31)           - 149 */ { 12884, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3258: lwz r9,16(r31)           - 150 */ { 12888, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  325c: addi r9,r9,1             - 151 */ { 12892, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3260: stw r9,16(r31)           - 152 */ { 12896, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB17 */
  /*  3264: lwz r10,16(r31)          - 153 */ { 12900, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3268: lwz r9,8(r31)            - 154 */ { 12904, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  326c: cmpw cr7,r10,r9          - 155 */ { 12908, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3270: blt+ cr7,3208            - 156 */ { 12912, 1, true,        130, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB18 */
  /*  3274: lwz r10,-32768(r30)      - 157 */ { 12916, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3278: lwz r9,8(r31)            - 158 */ { 12920, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  327c: mulli r9,r9,204          - 159 */ { 12924, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3280: add r9,r10,r9            - 160 */ { 12928, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3284: lwz r9,0(r9)             - 161 */ { 12932, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3288: lwz r10,20(r31)          - 162 */ { 12936, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  328c: divw r10,r10,r9          - 163 */ { 12940, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3290: lwz r8,-32768(r30)       - 164 */ { 12944, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3294: lwz r9,12(r31)           - 165 */ { 12948, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3298: mulli r7,r9,50           - 166 */ { 12952, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  329c: lwz r9,8(r31)            - 167 */ { 12956, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32a0: add r9,r7,r9             - 168 */ { 12960, 1, false, _INST_MAX, false, {   0,   0,   0, 160,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32a4: rlwinm r9,r9,2,0,29      - 169 */ { 12964, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32a8: add r9,r8,r9             - 170 */ { 12968, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32ac: stw r10,0(r9)            - 171 */ { 12972, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  32b0: lwz r9,12(r31)           - 172 */ { 12976, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32b4: addi r9,r9,1             - 173 */ { 12980, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32b8: stw r9,12(r31)           - 174 */ { 12984, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB19 */
  /*  32bc: lwz r10,12(r31)          - 175 */ { 12988, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  32c0: lwz r9,424(r31)          - 176 */ { 12992, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32c4: cmpw cr7,r10,r9          - 177 */ { 12996, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  32c8: ble+ cr7,31cc            - 178 */ { 13000, 1, true,        115, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB20 */
  /*  32cc: lwz r9,8(r31)            - 179 */ { 13004, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32d0: addi r9,r9,1             - 180 */ { 13008, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32d4: stw r9,12(r31)           - 181 */ { 13012, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  32d8: b 33b4                   - 182 */ { 13016, 1, true,        237, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB21 */
  /*  32dc: lwz r9,8(r31)            - 183 */ { 13020, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32e0: addi r9,r9,1             - 184 */ { 13024, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32e4: lwz r10,-32768(r30)      - 185 */ { 13028, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  32e8: mulli r8,r9,50           - 186 */ { 13032, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  32ec: lwz r9,12(r31)           - 187 */ { 13036, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32f0: add r9,r8,r9             - 188 */ { 13040, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32f4: rlwinm r9,r9,2,0,29      - 189 */ { 13044, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32f8: add r9,r10,r9            - 190 */ { 13048, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  32fc: lwz r9,0(r9)             - 191 */ { 13052, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3300: stw r9,20(r31)           - 192 */ { 13056, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3304: li r9,0                  - 193 */ { 13060, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3308: stw r9,16(r31)           - 194 */ { 13064, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  330c: b 3370                   - 195 */ { 13068, 1, true,        220, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB22 */
  /*  3310: lwz r9,8(r31)            - 196 */ { 13072, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3314: addi r9,r9,1             - 197 */ { 13076, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3318: lwz r10,-32768(r30)      - 198 */ { 13080, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  331c: mulli r8,r9,50           - 199 */ { 13084, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3320: lwz r9,16(r31)           - 200 */ { 13088, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3324: add r9,r8,r9             - 201 */ { 13092, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3328: rlwinm r9,r9,2,0,29      - 202 */ { 13096, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  332c: add r9,r10,r9            - 203 */ { 13100, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3330: lwz r10,0(r9)            - 204 */ { 13104, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3334: lwz r8,-32768(r30)       - 205 */ { 13108, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3338: lwz r9,16(r31)           - 206 */ { 13112, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  333c: mulli r7,r9,50           - 207 */ { 13116, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3340: lwz r9,12(r31)           - 208 */ { 13120, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3344: add r9,r7,r9             - 209 */ { 13124, 1, false, _INST_MAX, false, {   0,   0,   0, 160,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3348: rlwinm r9,r9,2,0,29      - 210 */ { 13128, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  334c: add r9,r8,r9             - 211 */ { 13132, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3350: lwz r9,0(r9)             - 212 */ { 13136, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3354: mullw r9,r10,r9          - 213 */ { 13140, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3358: lwz r10,20(r31)          - 214 */ { 13144, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  335c: subf r9,r9,r10           - 215 */ { 13148, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3360: stw r9,20(r31)           - 216 */ { 13152, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3364: lwz r9,16(r31)           - 217 */ { 13156, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3368: addi r9,r9,1             - 218 */ { 13160, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  336c: stw r9,16(r31)           - 219 */ { 13164, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB23 */
  /*  3370: lwz r10,16(r31)          - 220 */ { 13168, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3374: lwz r9,8(r31)            - 221 */ { 13172, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3378: cmpw cr7,r10,r9          - 222 */ { 13176, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  337c: ble+ cr7,3310            - 223 */ { 13180, 1, true,        196, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB24 */
  /*  3380: lwz r9,8(r31)            - 224 */ { 13184, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3384: addi r9,r9,1             - 225 */ { 13188, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3388: lwz r10,-32768(r30)      - 226 */ { 13192, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  338c: mulli r8,r9,50           - 227 */ { 13196, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3390: lwz r9,12(r31)           - 228 */ { 13200, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3394: add r9,r8,r9             - 229 */ { 13204, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3398: rlwinm r9,r9,2,0,29      - 230 */ { 13208, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  339c: add r9,r10,r9            - 231 */ { 13212, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33a0: lwz r10,20(r31)          - 232 */ { 13216, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  33a4: stw r10,0(r9)            - 233 */ { 13220, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  33a8: lwz r9,12(r31)           - 234 */ { 13224, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33ac: addi r9,r9,1             - 235 */ { 13228, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33b0: stw r9,12(r31)           - 236 */ { 13232, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB25 */
  /*  33b4: lwz r10,12(r31)          - 237 */ { 13236, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  33b8: lwz r9,424(r31)          - 238 */ { 13240, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33bc: cmpw cr7,r10,r9          - 239 */ { 13244, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  33c0: ble+ cr7,32dc            - 240 */ { 13248, 1, true,        183, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB26 */
  /*  33c4: lwz r9,8(r31)            - 241 */ { 13252, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33c8: addi r9,r9,1             - 242 */ { 13256, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33cc: stw r9,8(r31)            - 243 */ { 13260, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB27 */
  /*  33d0: lwz r10,8(r31)           - 244 */ { 13264, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  33d4: lwz r9,424(r31)          - 245 */ { 13268, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33d8: cmpw cr7,r10,r9          - 246 */ { 13272, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  33dc: blt+ cr7,31bc            - 247 */ { 13276, 1, true,        111, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB28 */
  /*  33e0: lwz r9,-32764(r30)       - 248 */ { 13280, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33e4: lwz r9,0(r9)             - 249 */ { 13284, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33e8: stw r9,24(r31)           - 250 */ { 13288, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  33ec: li r9,1                  - 251 */ { 13292, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  33f0: stw r9,8(r31)            - 252 */ { 13296, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  33f4: b 34a8                   - 253 */ { 13300, 1, true,        298, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB29 */
  /*  33f8: lwz r10,-32764(r30)      - 254 */ { 13304, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  33fc: lwz r9,8(r31)            - 255 */ { 13308, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3400: rlwinm r9,r9,2,0,29      - 256 */ { 13312, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3404: add r9,r10,r9            - 257 */ { 13316, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3408: lwz r9,0(r9)             - 258 */ { 13320, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  340c: stw r9,20(r31)           - 259 */ { 13324, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3410: li r9,0                  - 260 */ { 13328, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3414: stw r9,12(r31)           - 261 */ { 13332, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3418: b 3470                   - 262 */ { 13336, 1, true,        284, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB30 */
  /*  341c: lwz r10,-32768(r30)      - 263 */ { 13340, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3420: lwz r9,8(r31)            - 264 */ { 13344, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3424: mulli r8,r9,50           - 265 */ { 13348, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3428: lwz r9,12(r31)           - 266 */ { 13352, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  342c: add r9,r8,r9             - 267 */ { 13356, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3430: rlwinm r9,r9,2,0,29      - 268 */ { 13360, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3434: add r9,r10,r9            - 269 */ { 13364, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3438: lwz r10,0(r9)            - 270 */ { 13368, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  343c: lwz r9,12(r31)           - 271 */ { 13372, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3440: rlwinm r9,r9,2,0,29      - 272 */ { 13376, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3444: addi r8,r31,8            - 273 */ { 13380, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3448: add r9,r8,r9             - 274 */ { 13384, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  344c: addi r9,r9,16            - 275 */ { 13388, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3450: lwz r9,0(r9)             - 276 */ { 13392, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3454: mullw r9,r10,r9          - 277 */ { 13396, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3458: lwz r10,20(r31)          - 278 */ { 13400, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  345c: subf r9,r9,r10           - 279 */ { 13404, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3460: stw r9,20(r31)           - 280 */ { 13408, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3464: lwz r9,12(r31)           - 281 */ { 13412, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3468: addi r9,r9,1             - 282 */ { 13416, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  346c: stw r9,12(r31)           - 283 */ { 13420, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB31 */
  /*  3470: lwz r10,12(r31)          - 284 */ { 13424, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3474: lwz r9,8(r31)            - 285 */ { 13428, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3478: cmpw cr7,r10,r9          - 286 */ { 13432, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  347c: blt+ cr7,341c            - 287 */ { 13436, 1, true,        263, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB32 */
  /*  3480: lwz r9,8(r31)            - 288 */ { 13440, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3484: rlwinm r9,r9,2,0,29      - 289 */ { 13444, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3488: addi r10,r31,8           - 290 */ { 13448, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  348c: add r9,r10,r9            - 291 */ { 13452, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3490: addi r9,r9,16            - 292 */ { 13456, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3494: lwz r10,20(r31)          - 293 */ { 13460, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3498: stw r10,0(r9)            - 294 */ { 13464, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  349c: lwz r9,8(r31)            - 295 */ { 13468, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34a0: addi r9,r9,1             - 296 */ { 13472, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34a4: stw r9,8(r31)            - 297 */ { 13476, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB33 */
  /*  34a8: lwz r10,8(r31)           - 298 */ { 13480, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  34ac: lwz r9,424(r31)          - 299 */ { 13484, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34b0: cmpw cr7,r10,r9          - 300 */ { 13488, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  34b4: ble+ cr7,33f8            - 301 */ { 13492, 1, true,        254, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB34 */
  /*  34b8: lwz r9,424(r31)          - 302 */ { 13496, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34bc: rlwinm r9,r9,2,0,29      - 303 */ { 13500, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34c0: addi r10,r31,8           - 304 */ { 13504, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  34c4: add r9,r10,r9            - 305 */ { 13508, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34c8: addi r9,r9,16            - 306 */ { 13512, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34cc: lwz r10,0(r9)            - 307 */ { 13516, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  34d0: lwz r8,-32768(r30)       - 308 */ { 13520, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  34d4: lwz r9,424(r31)          - 309 */ { 13524, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34d8: mulli r9,r9,204          - 310 */ { 13528, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34dc: add r9,r8,r9             - 311 */ { 13532, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34e0: lwz r9,0(r9)             - 312 */ { 13536, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34e4: divw r10,r10,r9          - 313 */ { 13540, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  34e8: lwz r8,-32760(r30)       - 314 */ { 13544, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  34ec: lwz r9,424(r31)          - 315 */ { 13548, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34f0: rlwinm r9,r9,2,0,29      - 316 */ { 13552, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34f4: add r9,r8,r9             - 317 */ { 13556, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  34f8: stw r10,0(r9)            - 318 */ { 13560, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  34fc: lwz r9,424(r31)          - 319 */ { 13564, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3500: addi r9,r9,-1            - 320 */ { 13568, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3504: stw r9,8(r31)            - 321 */ { 13572, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3508: b 35d4                   - 322 */ { 13576, 1, true,        373, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB35 */
  /*  350c: lwz r9,8(r31)            - 323 */ { 13580, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3510: rlwinm r9,r9,2,0,29      - 324 */ { 13584, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3514: addi r10,r31,8           - 325 */ { 13588, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3518: add r9,r10,r9            - 326 */ { 13592, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  351c: addi r9,r9,16            - 327 */ { 13596, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3520: lwz r9,0(r9)             - 328 */ { 13600, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3524: stw r9,20(r31)           - 329 */ { 13604, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3528: lwz r9,8(r31)            - 330 */ { 13608, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  352c: addi r9,r9,1             - 331 */ { 13612, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3530: stw r9,12(r31)           - 332 */ { 13616, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3534: b 3588                   - 333 */ { 13620, 1, true,        354, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB36 */
  /*  3538: lwz r10,-32768(r30)      - 334 */ { 13624, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  353c: lwz r9,8(r31)            - 335 */ { 13628, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3540: mulli r8,r9,50           - 336 */ { 13632, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3544: lwz r9,12(r31)           - 337 */ { 13636, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3548: add r9,r8,r9             - 338 */ { 13640, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  354c: rlwinm r9,r9,2,0,29      - 339 */ { 13644, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3550: add r9,r10,r9            - 340 */ { 13648, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3554: lwz r10,0(r9)            - 341 */ { 13652, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3558: lwz r8,-32760(r30)       - 342 */ { 13656, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  355c: lwz r9,12(r31)           - 343 */ { 13660, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3560: rlwinm r9,r9,2,0,29      - 344 */ { 13664, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3564: add r9,r8,r9             - 345 */ { 13668, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3568: lwz r9,0(r9)             - 346 */ { 13672, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  356c: mullw r9,r10,r9          - 347 */ { 13676, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3570: lwz r10,20(r31)          - 348 */ { 13680, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3574: subf r9,r9,r10           - 349 */ { 13684, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3578: stw r9,20(r31)           - 350 */ { 13688, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  357c: lwz r9,12(r31)           - 351 */ { 13692, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3580: addi r9,r9,1             - 352 */ { 13696, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3584: stw r9,12(r31)           - 353 */ { 13700, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB37 */
  /*  3588: lwz r10,12(r31)          - 354 */ { 13704, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  358c: lwz r9,424(r31)          - 355 */ { 13708, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3590: cmpw cr7,r10,r9          - 356 */ { 13712, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3594: ble+ cr7,3538            - 357 */ { 13716, 1, true,        334, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB38 */
  /*  3598: lwz r10,-32768(r30)      - 358 */ { 13720, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  359c: lwz r9,8(r31)            - 359 */ { 13724, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35a0: mulli r9,r9,204          - 360 */ { 13728, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35a4: add r9,r10,r9            - 361 */ { 13732, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35a8: lwz r9,0(r9)             - 362 */ { 13736, 1, false, _INST_MAX, true,  {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35ac: lwz r10,20(r31)          - 363 */ { 13740, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  35b0: divw r10,r10,r9          - 364 */ { 13744, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  35b4: lwz r8,-32760(r30)       - 365 */ { 13748, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  35b8: lwz r9,8(r31)            - 366 */ { 13752, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35bc: rlwinm r9,r9,2,0,29      - 367 */ { 13756, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35c0: add r9,r8,r9             - 368 */ { 13760, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35c4: stw r10,0(r9)            - 369 */ { 13764, 1, false, _INST_MAX, true,  {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  35c8: lwz r9,8(r31)            - 370 */ { 13768, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35cc: addi r9,r9,-1            - 371 */ { 13772, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35d0: stw r9,8(r31)            - 372 */ { 13776, 1, false, _INST_MAX, true,  { 224,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB39 */
  /*  35d4: lwz r9,8(r31)            - 373 */ { 13780, 1, false, _INST_MAX, true,  { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35d8: cmpwi cr7,r9,0           - 374 */ { 13784, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  35dc: bge+ cr7,350c            - 375 */ { 13788, 1, true,        323, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB40 */
  /*  35e0: li r9,0                  - 376 */ { 13792, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  35e4: mr r3,r9                 - 377 */ { 13796, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  35e8: addi r11,r31,448         - 378 */ { 13800, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   2,   0,   0,   0,   0,   0 } },
  /*  35ec: lwz r0,4(r11)            - 379 */ { 13804, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  35f0: mtspr 100,r0             - 380 */ { 13808, 1, false, _INST_MAX, false, {   0,   0,   0,   0,  64,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,  32 } },
  /*  35f4: lwz r30,-8(r11)          - 381 */ { 13812, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  35f8: lwz r31,-4(r11)          - 382 */ { 13816, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  35fc: mr r1,r11                - 383 */ { 13820, 1, false, _INST_MAX, false, {   0,   0,   2,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3600: bclr- 20,lt              - 384 */ { 13824, 1, true,  _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB41 */
  /*  3604: lis r1,0                 - 385 */ { 13828, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3608: ori r1,r1,0              - 386 */ { 13832, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  360c: bl 3000                  - 387 */ { 13836, 1, true,          0, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB42 */
  /*  3610: b 3610                   - 388 */ { 13840, 1, true,        388, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* Nops */
  /*  xxxx: ---                      - 389 */ { 13844, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 390 */ { 13848, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 391 */ { 13852, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 392 */ { 13856, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 393 */ { 13860, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 394 */ { 13864, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 395 */ { 13868, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 396 */ { 13872, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 397 */ { 13876, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 398 */ { 13880, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 399 */ { 13884, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 400 */ { 13888, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 401 */ { 13892, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 402 */ { 13896, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 403 */ { 13900, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 404 */ { 13904, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 405 */ { 13908, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 406 */ { 13912, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 407 */ { 13916, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 408 */ { 13920, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 409 */ { 13924, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 410 */ { 13928, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 411 */ { 13932, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 412 */ { 13936, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 413 */ { 13940, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 414 */ { 13944, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 415 */ { 13948, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 416 */ { 13952, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 417 */ { 13956, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 418 */ { 13960, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 419 */ { 13964, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 420 */ { 13968, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } }
};

const uint32_t _DATA_ADDR = 0;
const sint8_t  _DATA[_DATA_MAX] = {
  0
};

const uint32_t _BSS_ADDR = 14320;
      sint8_t  _BSS[_BSS_MAX] = {
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */ 
     0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0, /* */    0,    0,    0,    0
};      

/* Flash: */

Flash_t Flash;
clock Flash_clock;

urgent           chan Flash_doBurst;
urgent broadcast chan Flash_doneBurst[FLASH_BURST_MAX];

/* Static RAM (SRAM): */

SRAM_t SRAM;
clock SRAM_clock;

chan SRAM_doAccess;
chan SRAM_doneAccess;

/* Instruction Memory Unit (IMU): */

IMU_t IMU;
clock IMU_clock;

                 chan IMU_doneFill;
urgent           chan IMU_doAccess;
urgent broadcast chan IMU_doneAccess;

/* Instruction and Control Unit (InCU): */

InCU_t InCU;

/* Execution Units (EUs): */

EUs_t EUs;
clock EUs_clock;
broadcast chan EUs_doStep;

//////////////////////////////////////////
//////////////////////////// Functions: //
//////////////////////////////////////////

/* (global:) */

void _Init() {
  int i;
  _stack_top = 0;
  for (i = 0; i &lt; _STACK_MAX; ++i)
    _Stack[i] = -1;
  _mustTerminate = false;

  _M_StaticPred       = _M_EMPTY_PRED;
  _M_DynamicPred      = _M_EMPTY_PRED;
  _M_BTBOverwriting   = 0;
  _M_ICacheMiss       = 0;
  _M_ICacheHit        = 0;
  _M_IBuffPop         = 0;
  _M_IBuffFlush       = 0;
  _M_IBuffFlushedInst = 0;
  _M_ExecutedInst     = 0;
}

void _Stack_Push  (int index) { _Stack[_stack_top] = index; _stack_top++; }
int  _Stack_Pop   (         ) { int index; _stack_top--; index = _Stack[_stack_top]; _Stack[_stack_top] = -1; return index; }
bool _Stack_TopIs (int index) { return (_Stack[_stack_top -1] == index); }
int  _Stack_Top   (         ) { return  _Stack[_stack_top -1]; }

/* Flash: */

void Flash_Init() {
  Flash.burst_index = 0;
}

bool Flash_IsTerminated() {
  return _mustTerminate;
}

/* Static RAM (SRAM): */

void SRAM_Init() {
  SRAM.executing = false;
}

bool SRAM_IsAccessed() {
  return ((EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE) &amp;&amp;
          _INSTS[EUs.pipeline[EUS_PIPELINE_E].index].do_memory);
}

bool SRAM_IsTerminated() {
  return _mustTerminate;
}

/* Instruction Memory Unit (IMU): */

void IMU_Init(){
  int w, s;

  IMU.FillBuffer   = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.ICache.index = -1;
  IMU.ICache.rp_way =  0;
  for (w = 0; w &lt; IMU_WAYS_MAX; ++w)
    for (s = 0; s &lt; IMU_USED_SETS_MAX; ++s)
      IMU.ICache.tags[w][s] = -1;
}

bool IMU_IsTerminated() {
  return _mustTerminate;
}

void IMU_Set() {
  IMU.ICache.index = InCU.PC.index;
}

void IMU_FillBuffer_Update() {
  IMU.FillBuffer.filled[IMU.FillBuffer.dword] = true;
  IMU.FillBuffer.dword = (IMU.FillBuffer.dword +1) % IMU_FILLBUFFER_DWORDS_MAX;
}

int IMU_ICache_Lookup() {
  // return wether the current instruction is in the instruction cache (or line buffer) or not
  int                          addr  = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);
  int                          dword = (addr /   8) % IMU_FILLBUFFER_DWORDS_MAX;

  // Is in cache?
  int icache_tag;
  for (way = 0; way &lt; IMU_WAYS_MAX; ++way) {
    icache_tag = IMU.ICache.tags[way][set];

    if (icache_tag != -1
    &amp;&amp;  icache_tag == tag)
      return IMU_CACHE_HIT;
  }

  // Is in fill buffer?
  if (IMU.FillBuffer.set == set
  &amp;&amp;  IMU.FillBuffer.tag == tag) {
    if (IMU.FillBuffer.filled[dword]) return IMU_FILLBUFFER_HIT;
    else                              return IMU_FILLBUFFER_MISS;
  }

  return IMU_CACHE_MISS;
}

bool IMU_ICache_Hit      () { return ( IMU_ICache_Lookup() == IMU_CACHE_HIT       ); }
bool IMU_FillBuffer_Hit  () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_HIT  ); }
bool IMU_FillBuffer_Miss () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_MISS ); }
bool IMU_ICache_Miss     () { return ( IMU_ICache_Lookup() == IMU_CACHE_MISS      ); }

void IMU_ICache_Update() {
  // on a miss, insert the current instruction on the instruction cache
  int                          addr = _INSTS[IMU.FillBuffer.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);

  bool found = false;

  way = 0;
  while (!found &amp;&amp; way &lt; IMU_WAYS_MAX)
    if (IMU.ICache.tags[way][set] == -1)
      found = true;
    else ++way; // conditional increment (thus not a for loop)
  if (found) {
    // free slot found
    IMU.ICache.tags[way][set] = tag;

  } else {
    // no free slot found (pseudo round-robin replacement policy)
    way = IMU.ICache.rp_way;
    IMU.ICache.tags[way][set] = tag;
    IMU.ICache.rp_way = (IMU.ICache.rp_way +1) % IMU_WAYS_MAX;
  }
}

void IMU_FillBuffer_Set() {
  int                     addr = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_SETS_MAX -1] set  = (addr /  32) % IMU_SETS_MAX;  // TODO: add _USED
  int                     tag  =  addr / (32  * IMU_SETS_MAX);

  IMU.FillBuffer       = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.FillBuffer.index = IMU.ICache.index;
  IMU.FillBuffer.dword = (addr / 8) % IMU_FILLBUFFER_DWORDS_MAX;
  IMU.FillBuffer.set   = set;
  IMU.FillBuffer.tag   = tag;
}

/* Instruction and Control Unit (InCU): */

void InCU_Init() {
  int i;

  InCU.BTB.top = 0;
  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    InCU.BTB.buffer[i] = INCU_EMPTY_BTB_ENTRY;

  InCU.PC.index = -1;
  InCU.IBuff.count = 0;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i)
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;  
  InCU.IR = INCU_EMPTY_IR;
}

void InCU_PC_Set(int index) {
  int  btb_entry = INCU_BTB_MAX;
  bool doBreak;

  InCU.PC        = INCU_EMPTY_PC;
  InCU.PC.index  = index;
  InCU.PC.cycles = _INSTS[InCU.PC.index].cycles;

  if (DYNAMIC_PRED) {
    doBreak = false;
    for (btb_entry = 0; !doBreak &amp;&amp; btb_entry &lt; INCU_BTB_MAX; ++btb_entry)
      if (InCU.BTB.buffer[btb_entry].index == InCU.PC.index) {
        doBreak = true; /* No 'break' keyword in UPPAAL, 'doBreak' emulate a breaking behavior. */
        btb_entry--;    /* We must decrement 'btb_entry' to match the behavior of a real 'break' */
      }

    if (btb_entry != INCU_BTB_MAX) {
      InCU.PC.dynamic_prediction = true;

      if (InCU.BTB.buffer[btb_entry].prediction == INCU_WEAKLY_______TAKEN
      ||  InCU.BTB.buffer[btb_entry].prediction == INCU_STRONGLY_____TAKEN)
        InCU.PC.predict_taken = true;
    }
  }
}

void InCU_PC_Update() {
  int index;
  int btb_entry;
  bool doBreak;

  index = InCU.PC.index +1;
  if (DYNAMIC_PRED) {
    btb_entry = -1;
    if (InCU.PC.dynamic_prediction 
    &amp;&amp;  InCU.PC.predict_taken) {
      doBreak = false;
      for (btb_entry = 0; !doBreak &amp;&amp; btb_entry &lt; INCU_BTB_MAX; ++btb_entry)
        if (InCU.BTB.buffer[btb_entry].index == InCU.PC.index) {
          doBreak = true; /* No 'break' keyword in UPPAAL, 'doBreak' emulate a breaking behavior. */
          btb_entry--;    /* We must decrement 'btb_entry' to match the behavior of a real 'break' */
        }
    }

    /* Handle the bclr case: */
    index = (btb_entry ==        -1 ? InCU.PC.index +1 : _INSTS[InCU.PC.index].target );
    index = (index     != _INST_MAX ? index            : _Rets[IndRets[InCU.PC.index]] );
  }

  InCU_PC_Set(index);
}

bool InCU_IBuff_IsFull() {
  return (InCU.IBuff.count == INCU_IBUFF_MAX);
}

void InCU_IBuff_Push() {
  if (InCU.IR == INCU_EMPTY_IR)      InCU.IR = InCU.PC;
  else InCU.IBuff.buffer[InCU.IBuff.count++] = InCU.PC;
}

InCU_IR_t InCU_IBuff_Pop() {
  InCU_IR_t entry = INCU_EMPTY_IR;

  if (InCU.IBuff.count &gt; 0) {
    entry                = InCU.IBuff.buffer[0];
    InCU.IBuff.buffer[0] = InCU.IBuff.buffer[1];
    InCU.IBuff.buffer[1] = InCU.IBuff.buffer[2];
    InCU.IBuff.buffer[2] = InCU.IBuff.buffer[3];
    InCU.IBuff.buffer[3] = InCU.IBuff.buffer[4];
    InCU.IBuff.buffer[4] = InCU.IBuff.buffer[5];
    InCU.IBuff.buffer[5] = InCU.IBuff.buffer[6];
    InCU.IBuff.buffer[6] = InCU.IBuff.buffer[7];
    InCU.IBuff.buffer[7] = INCU_EMPTY_IBUFF_ENTRY;
    InCU.IBuff.count--;

    if (MONITORING) { _M_IBuffPop++; }
    return entry;
  }

  return entry;
}

bool InCU_IsTerminated() {
  return _mustTerminate;
}

void InCU_Flush(int pipeline_stage) {
  int i;

  if (MONITORING) { _M_IBuffFlush++; }
  InCU.IBuff.count = 0;
  InCU.PC = INCU_EMPTY_PC;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i) {
    if (MONITORING &amp;&amp; InCU.IBuff.buffer[i] != INCU_EMPTY_IBUFF_ENTRY) { _M_IBuffFlushedInst++; }
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;
  }
  if (MONITORING &amp;&amp; InCU.IR != INCU_EMPTY_IR) { _M_IBuffFlushedInst++; }
  InCU.IR = INCU_EMPTY_IR;

  if (pipeline_stage == EUS_PIPELINE_E
  &amp;&amp; EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE) {
    if (MONITORING) { _M_IBuffFlushedInst++; }
    EUs.pipeline[EUS_PIPELINE_D] = EUS_EMPTY_PIPELINE_STAGE;
  }
}

void InCU_Update() {
  if (InCU.PC.index != IMU.ICache.index) {
    if (MONITORING) { _M_IBuffFlushedInst++; }
    return;
  }

  InCU_IBuff_Push();
  InCU_PC_Update();
}

bool InCU_BTB_Update(int index, int target, bool taken) {
  int i;
  int btb_index = -1;
  bool incorrect_target = false;

  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    if (InCU.BTB.buffer[i].index == index)
      btb_index = i;
    
  if (btb_index != -1) {
    // Fix prediction
    if (taken) {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction +1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &gt; INCU_STRONGLY_____TAKEN) ? INCU_STRONGLY_____TAKEN : InCU.BTB.buffer[btb_index].prediction;
      if (_INSTS[index].target == _INST_MAX
      &amp;&amp;  target != _Rets[IndRets[index]]) {
        incorrect_target = true;
        _Rets[IndRets[index]] = target;
        InCU_Flush(EUS_PIPELINE_E);
        InCU_PC_Set(target);
      }
    } else {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction -1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &lt; INCU_STRONGLY_NOT_TAKEN) ? INCU_STRONGLY_NOT_TAKEN : InCU.BTB.buffer[btb_index].prediction;
    }

  } else {
    /* "On initial allocation of an entry to the BTB for a taken branch,
     *  the counter is initialized to the weakly-taken state."
     *  (cf. e200z4 manual, p. 4-7) */
    if (taken) { // Insert (FIFO)
      InCU_BTB_Entry_t new_entry = {index, /*target,*/ INCU_WEAKLY_______TAKEN};

      if (MONITORING
      &amp;&amp;  InCU.BTB.buffer[InCU.BTB.top] != INCU_EMPTY_BTB_ENTRY)
        _M_BTBOverwriting++;

      InCU.BTB.buffer[InCU.BTB.top] = new_entry;
      InCU.BTB.top = (InCU.BTB.top +1) % INCU_BTB_MAX;
      if (_INSTS[index].target == _INST_MAX)
        _Rets[IndRets[index]] = target;
    }
  }

  return incorrect_target;
}

/* Execution Units (EUs): */

void EUs_Init() {
  int i;

  for (i = 0; i &lt; EUS_PIPELINE_MAX; ++i)
    EUs.pipeline[i] = EUS_EMPTY_PIPELINE_STAGE;
}

bool EUs_ExecuteNext(int index) {
  bool do_stall = true;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE)
    do_stall = false;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles == 0
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_M] == EUS_EMPTY_PIPELINE_STAGE)
    do_stall = false;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles == 0
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp; !SRAM.executing)
    do_stall = false;

  return !do_stall;
}

bool EUs_IsTerminated() {
  return (_mustTerminate
       &amp;&amp; InCU.IR                      == INCU_EMPTY_IR
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_D] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_W] == EUS_EMPTY_PIPELINE_STAGE);
}

bool EUs_D_DoStall() { return                                                              EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_E_DoStall() { return                   EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0 || EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_M_DoStall() { return SRAM.executing || EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0 || EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_W_DoStall() { return SRAM.executing; }

void EUs_Update() {
  bool do_stall = false;
  int[0, _INST_MAX] target;
  
  // Execute W (if doesn't stall):
  if (MONITORING &amp;&amp; EUs.pipeline[EUS_PIPELINE_W] != EUS_EMPTY_PIPELINE_STAGE) { _M_ExecutedInst++; }
  EUs.pipeline[EUS_PIPELINE_W] = EUS_EMPTY_PIPELINE_STAGE;
  if (!EUs_W_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_W] = EUs.pipeline[EUS_PIPELINE_M];
    EUs.pipeline[EUS_PIPELINE_M] = EUS_EMPTY_PIPELINE_STAGE;
  }

  // Execute M (if doesn't stall):
  if (!EUs_M_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_M] = EUs.pipeline[EUS_PIPELINE_E];
    EUs.pipeline[EUS_PIPELINE_E] = EUS_EMPTY_PIPELINE_STAGE;
  }

  /* Don't move inst in D to E if there are
   * data dependencies between D and M:
   */
  if (EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; _INSTS[EUs.pipeline[EUS_PIPELINE_M].index].do_memory) {
    int i;
    _Inst_t inD = _INSTS[EUs.pipeline[EUS_PIPELINE_D].index];
    _Inst_t inM = _INSTS[EUs.pipeline[EUS_PIPELINE_M].index];

    for (i = 0; i &lt; _REGS_MAX; ++i)
      if (inM.write_regs[i] &amp; inD.read_regs[i])
        do_stall = true;
  }

  // Execute E (if doesn't stall):
  if (!EUs_E_DoStall() &amp;&amp; !do_stall) {
    EUs.pipeline[EUS_PIPELINE_E] = EUs.pipeline[EUS_PIPELINE_D];
    EUs.pipeline[EUS_PIPELINE_D] = EUS_EMPTY_PIPELINE_STAGE;
  }

  if (EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0)
    EUs.pipeline[EUS_PIPELINE_E].cycles--;


  // Execute D (if doesn't stall):
  if (!EUs_D_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_D] = InCU.IR;
    InCU.IR = InCU_IBuff_Pop();

    // inst. in D is a backward branch then statically predict taken
    if (BACKWARD_TAKEN
    &amp;&amp;  EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE
    &amp;&amp;  _INSTS[EUs.pipeline[EUS_PIPELINE_D].index].do_branch
    &amp;&amp; !EUs.pipeline[EUS_PIPELINE_D].dynamic_prediction) {

      target = _INSTS[EUs.pipeline[EUS_PIPELINE_D].index].target;
      target = (target == _INST_MAX ? _Stack_Top() : target); /* Check for bclr case. */
      if (target &lt; EUs.pipeline[EUS_PIPELINE_D].index) {
        EUs.pipeline[EUS_PIPELINE_D].predict_taken = true;
        InCU_Flush(EUS_PIPELINE_D);
        InCU_PC_Set(target);
      }
    }
  }
}

/* Binary: */

const int XER_CA = 1;
const int XER_OV = 2;
const int XER_SO = 3;

const int  CR_SO = 3;
const int  CR_EQ = 2;
const int  CR_GT = 1;
const int  CR_LT = 0;

bool     getBit  ( sint32_t  field ,             uint5_t i             ) { return (((field &gt;&gt; i) % 2) == 1); }
sint32_t getBits ( sint32_t  field , uint5_t j , uint5_t i             ) { return ((field &gt;&gt; (32 -i)) &amp; (2^(j +1) -1)); }
void     setBit  ( sint32_t &amp;field ,             uint5_t i , uint1_t b ) { field |= (b &lt;&lt; i); }
void     setBits ( sint32_t &amp;field , uint5_t j , uint5_t i , uint1_t b ) { int[0,32] x = i; while (x &lt;= j) setBit (field, x++, b); }

sint32_t NOT  ( sint32_t field ) { int i; for (i = 0; i &lt; 32; ++i) field ^= (1 &lt;&lt; i); return field; }
sint32_t CLZ  ( sint32_t field ) { int n; for (n = 31; n &gt;= 0 &amp;&amp; !getBit(field, n); --n); return 32 - (n +1); }
sint32_t EXTS ( sint32_t field, uint5_t sign_bit ) { setBits (field, 31, sign_bit, getBit(field, sign_bit)); return field; }
sint32_t ROTL ( sint32_t field, uint5_t n ) { sint32_t shl = (field &lt;&lt; n); sint32_t shr = (field &gt;&gt; (32 - n)); return (shl | shr); }
sint32_t MASK ( uint5_t  me, uint5_t  mb ) { sint32_t field; if (me &gt;= mb) { setBits (field, 31, 0, 0); setBits (field, me   , mb   , 1); }
                                                             else          { setBits (field, 31, 0, 1); setBits (field, mb -1, me +1, 0); } return field; }

uint4_t  getCRn  ( uint3_t crfD                             ) { return CR[IndCR[crfD]]; }
sint32_t getCTR  (                                          ) { return CTR;             }
uint4_t  getXER  (                                          ) { return XER;             }
uint1_t  getCRni ( uint3_t crfD , uint2_t i                 ) { return (CR[IndCR[crfD]] &gt;&gt; i) % 2; }
uint1_t  getXERi (                uint2_t i                 ) { return (XER             &gt;&gt; i) % 2; }

void     setCRn  ( uint3_t crfD ,             uint4_t  bbbb ) { CR[IndCR[crfD]] = bbbb; }
void     setCTR  (                            sint32_t word ) { CTR             = word; }
void     setXER  (                            uint4_t  bbbb ) { XER             = bbbb; }
void     setCRni ( uint3_t crfD , uint2_t i , uint1_t  b    ) { uint4_t bbbb = getCRn(crfD); bbbb = ( b ? (bbbb | (1 &lt;&lt; i)) : (bbbb &amp; NOT(1 &lt;&lt; i)) ); setCRn(crfD, bbbb); }
void     setXERi (                uint2_t i , uint1_t  b    ) { uint4_t bbbb = getXER(    ); bbbb = ( b ? (bbbb | (1 &lt;&lt; i)) : (bbbb &amp; NOT(1 &lt;&lt; i)) ); setXER(      bbbb); }

void to_MEM  ( sint32_t addr, uint5_t size, sint32_t blob ) {
  int[0,4] i;
  int[0, _BSS_MAX] bss_index;

  if (addr &gt;= _BSS_ADDR
  &amp;&amp;  addr &lt;  _BSS_ADDR + _BSS_MAX) { /* if in .bss section */
    bss_index = addr - _BSS_ADDR;
    for (i = 0; i &lt; size; ++i) {
      _BSS[bss_index + i] = EXTS((blob &gt;&gt; (size - i -1) * 8) &amp; 255, 7);
    }
  }

//else {
//  /* Unsupported address for a memory write.
//     Fail on the following execption: */
//  _BSS[0] = 255;
//}
}

sint32_t from_MEM  ( sint32_t addr, uint5_t size ) {
  int[0,4] i;
  int[0, _DATA_MAX] data_index;
  int[0, _BSS_MAX] bss_index;
  sint32_t blob = 0;

  if (addr &gt;= _DATA_ADDR
  &amp;&amp;  addr &lt;  _DATA_ADDR + _DATA_MAX) { /* if in .data section */
    data_index = addr - _DATA_ADDR;
    for (i = 0; i &lt; size; ++i)
      blob |= (_DATA[data_index + i] &lt;&lt; ((size - i -1) * 8));
  }

  else
  if (addr &gt;= _BSS_ADDR
  &amp;&amp;  addr &lt;  _BSS_ADDR + _BSS_MAX) { /* if in .bss section */
    bss_index = addr - _BSS_ADDR;
    for (i = 0; i &lt; size; ++i)
      blob |= (_BSS[bss_index + i] &lt;&lt; ((size - i -1) * 8));
  }

//else {
//  /* Unsupported address for a memory read.
//     Fail on the following "out of range" exception: */
//  blob = _BSS[-1];
//}

  return blob;
}

bool  z () { return ((CTR -1) == 0);    }
bool nz () { return !z();               }

bool eq ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_EQ); }
bool gt ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_GT); }
bool lt ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_LT); }
bool ne ( uint3_t crfD ) { return !eq(crfD);                   }
bool le ( uint3_t crfD ) { return !gt(crfD);                   }
bool ge ( uint3_t crfD ) { return !lt(crfD);                   }

const int OP_ADD   =  0;
const int OP_AND   =  1;
const int OP_BR    =  2;
const int OP_CMP   =  3;
const int OP_CLZ   =  4;
const int OP_DIV   =  5;
const int OP_EQV   =  6;
const int OP_EXT   =  7;
const int OP_LOAD  =  8;
const int OP_MUL   =  9;
const int OP_NAND  = 10;
const int OP_NEG   = 11;
const int OP_NOR   = 12;
const int OP_OR    = 13;
const int OP_ROTL  = 14;
const int OP_SHL   = 15;
const int OP_SHR   = 16;
const int OP_STORE = 17;
const int OP_SUB   = 18;
const int OP_XOR   = 19;

const int ARG_NONE = 0;
const int ARG_REG  = 1;
const int ARG_SIMM = 2;
const int ARG_UIMM = 3;

const int QUAL_NONE             =  0;
const int QUAL_ALGEBRAIC        =  1;
const int QUAL_ANDMASK          =  2;
const int QUAL_COMPLEMENT       =  3;
const int QUAL_EXTEND           =  4;
const int QUAL_EXTEND_MINUS_ONE =  5;
const int QUAL_EXTEND_ZERO      =  6;
const int QUAL_INDEX            =  7;
const int QUAL_LOGICAL          =  8;
const int QUAL_MASKINSERT       =  9;
const int QUAL_MSB              = 10;
const int QUAL_REVERSE          = 11;
const int QUAL_SHIFT            = 12;
const int QUAL_TOCTR            = 13;
const int QUAL_TOLR             = 14;
const int QUAL_UNSIGNED         = 15;
const int QUAL_UPDATE           = 16;

const int SIZE_NONE     = 0;
const int SIZE_BYTE     = 1; 
const int SIZE_HALFWORD = 2;
const int SIZE_WORD     = 4;

// Arithmetic instructions:

void _ARITHM( int op, int arg, int qual, bool carries , uint5_t rD, uint5_t rA, uint5_t rB, sint16_t SIMM, uint1_t OE, uint1_t Rc ) {
  sint32_t rA_sval = GPRS[rA], rB_sval = GPRS[rB], rD_sval;
//uint32_t rA_uval = GPRS[rA], rB_uval = GPRS[rB]; // TODO: fix

  uint1_t CA = getXERi(XER_CA);
  if ( op == OP_ADD ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )       ; }
                                                 if ( qual == QUAL_EXTEND           ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )  + CA ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt; 16 )       ; }
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )       ; } }

                        if ( arg == ARG_SIMM ) { rA_sval = (carries || (rA != 0) ? rA_sval : 0);
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( SIMM     &lt;&lt;  0 )      ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] =  rA_sval + ( SIMM     &lt;&lt; 16 )      ; } }
                        if ( arg == ARG_NONE ) { if ( qual == QUAL_EXTEND_MINUS_ONE ) { GPRS[rD] =  rA_sval - ( 1        &lt;&lt;  0 ) + CA ; }
                                                 if ( qual == QUAL_EXTEND_ZERO      ) { GPRS[rD] =  rA_sval                      + CA ; } }
                        if ( carries         ) { setXERi (XER_CA, false)                                                              ; } } /* Always false as UPPAAL disallow overflowing. */

  if ( op == OP_SUB ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )       ; }
                                                 if ( qual == QUAL_EXTEND           ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )  + CA ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt; 16 )       ; }
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )       ; } }
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( SIMM     &lt;&lt;  0 )      ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] = -rA_sval + ( SIMM     &lt;&lt; 16 )      ; } }
                        if ( arg == ARG_NONE ) { if ( qual == QUAL_EXTEND_MINUS_ONE ) { GPRS[rD] = -rA_sval - ( 1        &lt;&lt;  0 ) + CA ; }
                                                 if ( qual == QUAL_EXTEND_ZERO      ) { GPRS[rD] = -rA_sval                      + CA ; } }
                        if ( carries         ) { setXERi (XER_CA, false)                                                              ; } } /* Always false as UPPAAL disallow overflowing. */

  if ( op == OP_DIV ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval /   rB_sval               ; }  
                                                 if ( qual == QUAL_UNSIGNED         ) { GPRS[rD] =  rA_sval /   rB_sval               ; } } } // TODO: set back to rA_uval

  if ( op == OP_MUL ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval *   rB_sval               ; } }   // TODO: 64-bit multiplication; store the 32 LSB in rD
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval *   SIMM                  ; } }   // TODO: 64-bit multiplication; store the 32 LSB in rD
                                                 if ( qual == QUAL_MSB              ) { GPRS[rD] =  rA_sval *   rB_sval               ; }   } // TODO: 64-bit multiplication; store the 32 MSB in rD

  rD_sval = GPRS[rD];
  if ( OE ) { setXERi (     XER_OV, false                        );   /* Always false as UPPAAL disallow overflowing. */
              setXERi (     XER_SO, getBit (XER, XER_OV)         ); }
  if ( Rc ) { setCRni (cr0,  CR_SO, getBit (XER, XER_SO)         );
              setCRni (cr0,  CR_EQ, (rD_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rD_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rD_sval &lt;  0 ? true : false)); }
}

void _add      ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _add_     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _addo     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _addo_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _addc     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , false , false ); }
void _addc_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , false , true  ); }
void _addco    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , true  , false ); }
void _addco_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , true  , true  ); }
void _adde     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , false , false ); }
void _adde_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , false , true  ); }
void _addeo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , true  , false ); }
void _addeo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , true  , true  ); }
void _addi     ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , false , rD ,  rA , 0  , SIMM , false , false ); }
void _addic    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , true  , rD ,  rA , 0  , SIMM , false , false ); }
void _addic_   ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , true  , rD ,  rA , 0  , SIMM , false , true  ); }
void _addis    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_SHIFT            , false , rD ,  rA , 0  , SIMM , false , false ); }
void _addme    ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , false , false ); }
void _addme_   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , false , true  ); }
void _addmeo   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , true  , false ); }
void _addmeo_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , true  , true  ); }
void _addze    ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , false , false ); }
void _addze_   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , false , true  ); }
void _addzeo   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , true  , false ); }
void _addzeo_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , true  , true  ); }

void _subf     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , false , false ); }
void _subf_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , false , true  ); }
void _subfo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , true  , false ); }
void _subfo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , true  , true  ); }
void _subfc    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , false , false ); }
void _subfc_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , false , true  ); }
void _subfco   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , true  , false ); }
void _subfco_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , true  , true  ); }
void _subfe    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , false , false ); }
void _subfe_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , false , true  ); }
void _subfeo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , true  , false ); }
void _subfeo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , true  , true  ); }
void _subfic   ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_SUB , ARG_SIMM , QUAL_NONE             , true  , rD , rA , 0  , SIMM , false , false ); }
void _subfme   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , false , false ); }
void _subfme_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , false , true  ); }
void _subfmeo  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , true  , false ); }
void _subfmeo_ ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , true  , true  ); }
void _subfze   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , false , false ); }
void _subfze_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , false , true  ); }
void _subfzeo  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , true  , false ); }
void _subfzeo_ ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , true  , true  ); }

void _divw     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _divw_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _divwo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _divwo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _divwu    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , false , false ); }
void _divwu_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , false , true  ); }
void _divwuo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , true  , false ); }
void _divwuo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , true  , true  ); }

void _mullw    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _mullw_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _mullwo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _mullwo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _mulli    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_MUL , ARG_SIMM , QUAL_NONE             , false , rD ,  rA , 0  , SIMM , false , false ); }
void _mulhw    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , false ); }
void _mulhw_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , true  ); }
void _mulhwu   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , false ); }
void _mulhwu_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , true  ); }

void _li       ( uint5_t rD ,               sint16_t SIMM ) { _addi    ( rD,  0,  SIMM ); }
void _lis      ( uint5_t rD ,               sint16_t SIMM ) { _addis   ( rD,  0,  SIMM ); }
void _la       ( uint5_t rD , sint16_t d  , uint5_t  rA   ) { _addi    ( rD, rA,  d    ); }
void _sub      ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subf    ( rD, rB,  rA   ); }
void _sub_     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subf_   ( rD, rB,  rA   ); }
void _subo     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfo   ( rD, rB,  rA   ); }
void _subo_    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfo_  ( rD, rB,  rA   ); }
void _subc     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfc   ( rD, rB,  rA   ); }
void _subc_    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfc_  ( rD, rB,  rA   ); }
void _subco    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfco  ( rD, rB,  rA   ); }
void _subco_   ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfco_ ( rD, rB,  rA   ); }
void _subi     ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addi    ( rD, rA, -SIMM ); }
void _subis    ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addis   ( rD, rA, -SIMM ); }
void _subic    ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addic   ( rD, rA, -SIMM ); }
void _subic_   ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addic_  ( rD, rA, -SIMM ); }

// Compare instructions:

void _COMPARE( int op, int arg, int qual, uint3_t crfD, uint5_t rA, uint5_t rB, sint32_t IMM ) {
  sint32_t rA_sval = GPRS[rA], rB_sval = GPRS[rB];
//uint32_t rA_uval = GPRS[rA], rB_uval = GPRS[rB];
  sint16_t SIMM = (arg == ARG_SIMM ? IMM : 0);
  uint16_t UIMM = (arg == ARG_UIMM ? IMM : 0);

  sint32_t a;
  sint32_t b;
  uint4_t  c;
  if ( op == OP_CMP ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE    ) { a = rA_sval; b =     ( rB_sval      ); }
                                                 if ( qual == QUAL_LOGICAL ) { a = rA_sval; b =     ( rB_sval      ); } }   // TODO: set back to rA_uval
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE    ) { a = rA_sval; b = EXTS( SIMM    , 15 ); } }
                        if ( arg == ARG_UIMM ) { if ( qual == QUAL_LOGICAL ) { a = rA_sval; b =     ( UIMM         ); } } } // TODO: set back to rA_uval

       if ( a &lt; b ) { c = (1 &lt;&lt; CR_LT); } // TODO: does it perform an "unsigned evaluation" if a and b are unsigned?
  else if ( a &gt; b ) { c = (1 &lt;&lt; CR_GT); }
  else              { c = (1 &lt;&lt; CR_EQ); }

  c |= getXERi(XER_SO);
  setCRn (crfD, c);
}

void _cmp    ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _COMPARE( OP_CMP , ARG_REG  , QUAL_NONE    , crfD , rA , rB , 0    ); }
void _cmpl   ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _COMPARE( OP_CMP , ARG_REG  , QUAL_LOGICAL , crfD , rA , rB , 0    ); }
void _cmpi   ( uint3_t crfD , uint5_t rA , sint16_t SIMM ) { _COMPARE( OP_CMP , ARG_SIMM , QUAL_NONE    , crfD , rA , 0  , SIMM ); }
void _cmpli  ( uint3_t crfD , uint5_t rA , uint16_t UIMM ) { _COMPARE( OP_CMP , ARG_UIMM , QUAL_LOGICAL , crfD , rA , 0  , UIMM ); }

void _cmpw   ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _cmp   ( crfD, rA, rB   ); }
void _cmpwi  ( uint3_t crfD , uint5_t rA , sint16_t SIMM ) { _cmpi  ( crfD, rA, SIMM ); }
void _cmplw  ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _cmpl  ( crfD, rA, rB   ); }
void _cmplwi ( uint3_t crfD , uint5_t rA , uint16_t UIMM ) { _cmpli ( crfD, rA, UIMM ); }

// Logical instructions:

void _LOGICAL( int op, int arg, int qual, int size, uint5_t rA, uint5_t rS, uint5_t rB, uint16_t UIMM, uint1_t OE, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint5_t n        = 31;
  uint5_t sign_bit = (size == SIZE_BYTE ? 7 : 15);
  uint1_t S        = getBit (rS_uval, sign_bit);
  if ( op == OP_AND  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval &amp;    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_COMPLEMENT ) { GPRS[rA] =    ( rS_uval &amp; NOT( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval &amp;    ( UIMM    &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval &amp;    ( UIMM    &lt;&lt; 16 ) ); } } }
  if ( op == OP_CLZ  ) { if ( arg == ARG_NONE ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = CLZ( rS_uval                        ); } } }
  if ( op == OP_EQV  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_EXT  ) { if ( arg == ARG_NONE ) { if ( size == SIZE_BYTE       ) { GPRS[rA] =    ( rS_uval &amp;    (   255   &lt;&lt;  0 ) ); }
                                                  if ( size == SIZE_HALFWORD   ) { GPRS[rA] =    ( rS_uval &amp;    ( 65535   &lt;&lt;  0 ) ); }
                                                  setBits (GPRS[rA], 31, sign_bit, S)                                                ;   } }

  if ( op == OP_NAND ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval &amp;    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_NEG  ) { if ( arg == ARG_NONE ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval                        ); } } }
  if ( op == OP_NOR  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval |    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_OR   ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval |    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_COMPLEMENT ) { GPRS[rA] =    ( rS_uval | NOT( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval |    ( UIMM    &lt;&lt;  0 ) ); } }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval |    ( rB_uval &lt;&lt; 16 ) ); }   }
  if ( op == OP_XOR  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt; 16 ) ); } } }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( OE ) { setXERi (     XER_OV, false                        );   /* Always false as UPPAAL disallow overflowing. */
              setXERi (     XER_SO, getBit (XER, XER_OV)         ); }
  if ( Rc ) { setCRni (cr0,  CR_SO, getBit (XER, XER_SO)         );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _and     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _and_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _andc    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _andc_   ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _andi_   ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_AND  , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , true  ); }
void _andis_  ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_AND  , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , true  ); }

void _cntlzw  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_CLZ  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , false ); }
void _cntlzw_ ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_CLZ  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , true  ); }
void _eqv     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_EQV  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _eqv_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_EQV  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _extsb   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_BYTE     , rA , rS , 0  , 0    , false , false ); }
void _extsb_  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_BYTE     , rA , rS , 0  , 0    , false , true  ); }
void _extsh   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_HALFWORD , rA , rS , 0  , 0    , false , false ); }
void _extsh_  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_HALFWORD , rA , rS , 0  , 0    , false , true  ); }

void _nand    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NAND , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _nand_   ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NAND , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _neg     ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , false ); }
void _neg_    ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , true  ); }
void _nego    ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , true  , false ); }
void _nego_   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , true  , true  ); }
void _nor     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _nor_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }

void _or      ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _or_     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _orc     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _orc_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _ori     ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_OR   , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _oris    ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_OR   , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _xor     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_XOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _xor_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_XOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _xori    ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_XOR  , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _xoris   ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_XOR  , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }

void _not     ( uint5_t rA , uint5_t rS                 ) { _nor  ( rA, rS, rS ); }
void _not_    ( uint5_t rA , uint5_t rS                 ) { _nor_ ( rA, rS, rS ); }
void _mr      ( uint5_t rA , uint5_t rS                 ) { _or   ( rA, rS, rS ); }
void _mr_     ( uint5_t rA , uint5_t rS                 ) { _or_  ( rA, rS, rS ); }
void _nop     (                                         ) { _ori  (  0,  0,  0 ); }

// Rotate instructions:

void _ROTATE( int op, int arg, int qual, uint5_t rA, uint5_t rS, uint5_t rB, uint5_t SH, uint5_t MB, uint5_t ME, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rA_uval = GPRS[rA], rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint5_t  n = ( arg == ARG_REG ? getBits (rB_uval, 4, 0) : SH );
  sint32_t r = ROTL (rS_uval, n);
  sint32_t m = MASK (ME, MB);
  if ( op == OP_ROTL ) { if ( qual == QUAL_ANDMASK    ) { GPRS[rA] = (r &amp; m)                         ; }
                         if ( qual == QUAL_MASKINSERT ) { GPRS[rA] = (r &amp; m) | ( rA_uval &amp; NOT( m ) ); } }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( Rc ) { setCRni (cr0,  CR_SO, getXERi(XER_SO)               );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _rlwnm     ( uint5_t rA , uint5_t rS , uint5_t rB , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_REG  , QUAL_ANDMASK    , rA , rS , rB , 0  , 31 - ME , 31 - MB , false ); }
void _rlwnm_    ( uint5_t rA , uint5_t rS , uint5_t rB , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_REG  , QUAL_ANDMASK    , rA , rS , rB , 0  , 31 - ME , 31 - MB , true  ); }
void _rlwimi    ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_MASKINSERT , rA , rS , 0  , SH , 31 - ME , 31 - MB , false ); }
void _rlwimi_   ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_MASKINSERT , rA , rS , 0  , SH , 31 - ME , 31 - MB , true  ); }
void _rlwinm    ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_ANDMASK    , rA , rS , 0  , SH , 31 - ME , 31 - MB , false ); }
void _rlwinm_   ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_ANDMASK    , rA , rS , 0  , SH , 31 - ME , 31 - MB , true  ); }

void _inslwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi  ( rA , rS , 32 - (b + 0) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _inslwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi_ ( rA , rS , 32 - (b + 0) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _insrwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi  ( rA , rS , 32 - (b + n) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _insrwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi_ ( rA , rS , 32 - (b + n) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _extlwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm  ( rA , rS ,  0 + (b + 0) ,  0 + 0 , (0 +  n) - 1); } // (n &gt; 0)
void _extlwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm_ ( rA , rS ,  0 + (b + 0) ,  0 + 0 , (0 +  n) - 1); } // (n &gt; 0)
void _extrwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm  ( rA , rS ,  0 + (b + n) , 32 - n , (0 + 31) - 0); } // (n &gt; 0)
void _extrwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm_ ( rA , rS ,  0 + (b + n) , 32 - n , (0 + 31) - 0); } // (n &gt; 0)
void _rotlwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotlwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotrwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS , 32 - (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotrwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS , 32 - (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _slwi      ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _slwi_     ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _srwi      ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS , 32 - (0 + n) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _srwi_     ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS , 32 - (0 + n) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrlwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + 0) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrlwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + 0) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrrwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + 0) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _clrrwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + 0) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _clrlslwi  ( uint5_t rA , uint5_t rS , uint5_t b  , uint5_t n ) { _rlwinm  ( rA , rS ,  0 + (0 + n) , b  - n , (0 + 31) - n); } // (n &lt;= b &lt;= 31)
void _clrlslwi_ ( uint5_t rA , uint5_t rS , uint5_t b  , uint5_t n ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) , b  - n , (0 + 31) - n); } // (n &lt;= b &lt;= 31)
void _rotlw     ( uint5_t rA , uint5_t rS , uint5_t rB             ) { _rlwnm   ( rA , rS , rB           ,  0 + 0 , (0 + 31) - 0); }
void _rotlw_    ( uint5_t rA , uint5_t rS , uint5_t rB             ) { _rlwnm_  ( rA , rS , rB           ,  0 + 0 , (0 + 31) - 0); }

// Shift instructions:

void _SHIFT( int op, int arg, int qual, uint5_t rA, uint5_t rS, uint5_t rB, uint5_t SH, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint1_t  S;
  sint32_t r, _32xS;
  uint5_t  n = ( arg == ARG_REG ? getBits (GPRS[rB], 4, 0) : SH );
  sint32_t m = 0;
  if ( op == OP_SHL ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_LOGICAL   ) { r = ROTL(rS_uval,      n); if (getBit (rB_uval, 5) == 0) m = MASK( 31     , n ); } } }
  if ( op == OP_SHR ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_LOGICAL   ) { r = ROTL(rS_uval, 32 - n); if (getBit (rB_uval, 5) == 0) m = MASK( 31 - n , 0 ); } }
                        if ( arg == ARG_REG  ) { if ( qual == QUAL_ALGEBRAIC ) { r = ROTL(rS_uval, 32 - n); if (getBit (rB_uval, 5) == 0) m = MASK( 31 - n , 0 ); } }
                        if ( arg == ARG_UIMM ) { if ( qual == QUAL_ALGEBRAIC ) { r = ROTL(rS_uval, 32 - n);                               m = MASK( 31 - n , 0 ); } } }

  S = getBit (GPRS[rS], 31);
  setBits (_32xS, 31, 0, S); /* _32xS is S's value concatenated 32 times. */
  GPRS[rA] = r &amp; m;
  if ( qual == QUAL_ALGEBRAIC )
  { GPRS[rA] |= _32xS &amp; NOT( m );
    setXERi(XER_CA, (S &amp; ((r &amp; NOT( m )) != 0))); }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( Rc ) { setCRni (cr0,  CR_SO, getXERi(XER_SO)              );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _slw    ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHL , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , false ); }
void _slw_   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHL , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , true  ); }
void _sraw   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_ALGEBRAIC , rA , rS , rB , 0  , false ); }
void _sraw_  ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_ALGEBRAIC , rA , rS , rB , 0  , true  ); }
void _srawi  ( uint5_t rA , uint5_t rS , uint5_t SH ) { _SHIFT( OP_SHR , ARG_UIMM , QUAL_ALGEBRAIC , rA , rS , 0  , SH , false ); }
void _srawi_ ( uint5_t rA , uint5_t rS , uint5_t SH ) { _SHIFT( OP_SHR , ARG_UIMM , QUAL_ALGEBRAIC , rA , rS , 0  , SH , true  ); }
void _srw    ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , false ); }
void _srw_   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , true  ); }

// Memory instructions:

void _MEMORY( int op, int arg, int qual, bool updates, bool indexed, int size, uint5_t rD, uint5_t rS , uint5_t rA, sint16_t d, uint5_t rB ) {
  sint32_t rS_uval = GPRS[rS], rA_uval = GPRS[rA], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  sint32_t a, b, EA;
  a  = 0;           if (updates || (rA != 0)) a        = rA_uval;
  b  = EXTS(d, 15); if (indexed             ) b        = rB_uval;
  EA = a + b;       if (updates             ) GPRS[rA] = EA;

  if ( op == OP_LOAD  ) { if ( qual == QUAL_NONE       ) { GPRS[rD] =       from_MEM( EA, size )                 ; }
                          if ( qual == QUAL_ALGEBRAIC  ) { GPRS[rD] = EXTS( from_MEM( EA, size ), (size * 8) -1 ); }
                          if ( qual == QUAL_REVERSE    ) {
                            if ( size == SIZE_HALFWORD ) { GPRS[rD]  = (from_MEM( EA +0, 1 ) &lt;&lt;  0); GPRS[rD] |= (from_MEM( EA +1, 1 ) &lt;&lt;  8); }
                            if ( size == SIZE_WORD     ) { GPRS[rD]  = (from_MEM( EA +0, 1 ) &lt;&lt;  0); GPRS[rD] |= (from_MEM( EA +1, 1 ) &lt;&lt;  8);
                                                           GPRS[rD] |= (from_MEM( EA +2, 1 ) &lt;&lt; 16); GPRS[rD] |= (from_MEM( EA +3, 1 ) &lt;&lt; 24); } } }

  if ( op == OP_STORE ) { if ( qual == QUAL_NONE       ) { to_MEM(EA, size, (rS_uval &gt;&gt;  0)); }
                          if ( qual == QUAL_REVERSE    ) {
                            if ( size == SIZE_HALFWORD ) { /* MEM(EA +0, 1) = (rS_uval &gt;&gt;  0); MEM(EA +1, 1) = (rS_uval &gt;&gt;  8); */ }
                            if ( size == SIZE_WORD     ) { /* MEM(EA +0, 1) = (rS_uval &gt;&gt;  0); MEM(EA +1, 1) = (rS_uval &gt;&gt;  8); */
                                                           /* MEM(EA +2, 1) = (rS_uval &gt;&gt; 16); MEM(EA +3, 1) = (rS_uval &gt;&gt; 24); */ } } }
}

void _lbz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_BYTE     , rD , 0  , rA , d  , 0  ); }
void _lbzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_BYTE     , rD , 0  , rA , d  , 0  ); }
void _lbzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_BYTE     , rD , 0  , rA , 0  , rB ); }
void _lbzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_BYTE     , rD , 0  , rA , 0  , rB ); }
void _lha    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_ALGEBRAIC , false , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhau   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_ALGEBRAIC , true  , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhaux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_ALGEBRAIC , true  , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhax   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_ALGEBRAIC , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhbrx  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lwz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_WORD     , rD , 0  , rA , d  , 0  ); }
void _lwzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_WORD     , rD , 0  , rA , d  , 0  ); }
void _lwzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }
void _lwzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }
void _lwbrx  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }

void _stb    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_BYTE     , 0  , rS , rA , d  , 0  ); }
void _stbu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_BYTE     , 0  , rS , rA , d  , 0  ); }
void _stbux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_BYTE     , 0  , rS , rA , 0  , rB ); }
void _stbx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_BYTE     , 0  , rS , rA , 0  , rB ); }
void _sth    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_HALFWORD , 0  , rS , rA , d  , 0  ); }
void _sthu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_HALFWORD , 0  , rS , rA , d  , 0  ); }
void _sthux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _sthx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _sthbrx ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _stw    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_WORD     , 0  , rS , rA , d  , 0  ); }
void _stwu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_WORD     , 0  , rS , rA , d  , 0  ); }
void _stwux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }
void _stwx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }
void _stwbrx ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }

// Branching instructions:

const int BO_not_ctr_not_cond =  0;
const int BO_____ctr_not_cond =  2;
const int BO_________not_cond =  4;
const int BO_not_ctr_____cond =  8;
const int BO_____ctr_____cond = 10;
const int BO_____________cond = 12;
const int BO_not_ctr_________ = 16;
const int BO_____ctr_________ = 18;
const int BO_________________ = 20; // Branch always

void _BRANCH( int op, int qual, bool conditional, uint5_t BO, uint5_t BI, sint32_t target_addr, uint1_t AA, uint1_t LK ) {
  int[0, _INST_MAX] next_index, target_index;
  bool incorrect_target;

  bool ctr_ok, cond_ok;
  uint3_t crfD     = BI / 4;
  uint2_t crfD_bit = BI % 4; 
  if ( conditional )
    { if (!getBit(BO, 2)) { setCTR(getCTR() -1); }
    ctr_ok  = getBit(BO, 2) || ((getCTR() != 0) ^ getBit(BO, 1));
    cond_ok = getBit(BO, 4) || (getCRni (crfD, crfD_bit) == getBit(BO, 3)); }

  if ( !conditional ) { EUs.pipeline[EUS_PIPELINE_E].taken = (                      true        ); }
  if (  conditional ) { EUs.pipeline[EUS_PIPELINE_E].taken = ((ctr_ok &amp;&amp; cond_ok) ? true : false); }

  /* Updates the BTB: */
  next_index   = EUs.pipeline[EUS_PIPELINE_E].index +1;
  target_index = (qual != QUAL_TOLR ? _INSTS[EUs.pipeline[EUS_PIPELINE_E].index].target : _Stack_Pop ());
  if (DYNAMIC_PRED) {
    incorrect_target = InCU_BTB_Update(EUs.pipeline[EUS_PIPELINE_E].index, target_index, EUs.pipeline[EUS_PIPELINE_E].taken);
    if (MONITORING &amp;&amp; incorrect_target)
      _M_DynamicPred.incorrect_target++;
  }

  if ( LK ) { _Stack_Push (next_index); }

  /* Check for incorrect predictions (predict not taken but taken): */
  if (!EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.incorrectly_predicted_not_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_not_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_not_taken++; }
    }

    InCU_Flush(EUS_PIPELINE_E);
    InCU_PC_Set(target_index);
  }

  /* Check for incorrect predictions (predict taken but not taken): */
  if (EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.incorrectly_predicted_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_taken++; }
    }

    InCU_Flush(EUS_PIPELINE_E);
    InCU_PC_Set(next_index);
  }

  /* Check for correct predictions (predict not taken and not taken): */
  if (!EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.correctly_predicted_not_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_not_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_not_taken++; }
    }
  }

  /* Check for correct predictions (predict taken and taken): */
  if (EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.correctly_predicted_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_taken++; }
    }
  }
}

void _b        (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , false , false ); }
void _ba       (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , true  , false ); }
void _bl       (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , false , true  ); }
void _bla      (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , true  , true  ); }
void _bc       (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , false , false ); }
void _bca      (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , true  , false ); }
void _bcl      (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , false , true  ); }
void _bcla     (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , true  , true  ); }
void _bcctr    (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOCTR , true  , BO , BI , 0           , false , false ); }
void _bcctrl   (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOCTR , true  , BO , BI , 0           , false , true  ); }
void _bclr     (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOLR  , true  , BO , BI , 0           , false , false ); }
void _bclrl    (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOLR  , true  , BO , BI , 0           , false , true  ); }

void _bt       ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____________cond , BI               , target_addr ); }
void _bf       ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_________not_cond , BI               , target_addr ); }
void _bdnz     (                uint5_t BO ,              sint32_t target_addr ) { _bc     ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnzt    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzf    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdz      (                uint5_t BO ,              sint32_t target_addr ) { _bc     ( BO_____ctr_________ , 0                , target_addr ); }
void _bdzt     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzf     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____ctr_not_cond , BI               , target_addr ); }
void _blt      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _ble      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beq      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bge      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgt      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnl      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bne      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bng      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bso      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bns      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bun      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnu      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _bta      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____________cond , BI               , target_addr ); }
void _bfa      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_________not_cond , BI               , target_addr ); }
void _bdnza    (                uint5_t BO ,              sint32_t target_addr ) { _bca    ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnzta   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfa   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdza     (                uint5_t BO ,              sint32_t target_addr ) { _bca    ( BO_____ctr_________ , 0                , target_addr ); }
void _bdzta    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfa    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____ctr_not_cond , BI               , target_addr ); }
void _blta     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beqa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgta     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnla     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bnga     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsoa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _buna     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnua     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _btl      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____________cond , BI               , target_addr ); }
void _bfl      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_________not_cond , BI               , target_addr ); }
void _bdnzl    (                uint5_t BO ,              sint32_t target_addr ) { _bcl    ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnztl   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfl   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdzl     (                uint5_t BO ,              sint32_t target_addr ) { _bcl    ( BO_____ctr_________ , 0                , target_addr ); }
void _bdztl    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfl    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____ctr_not_cond , BI               , target_addr ); }
void _bltl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beql     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgtl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnll     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bngl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsol     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bunl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnul     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _btla     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____________cond , BI               , target_addr ); }
void _bfla     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_________not_cond , BI               , target_addr ); }
void _bdnzla   (                uint5_t BO ,              sint32_t target_addr ) { _bcla   ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnztla  ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfla  ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdzla    (                uint5_t BO ,              sint32_t target_addr ) { _bcla   ( BO_____ctr_________ , 0                , target_addr ); }
void _bdztla   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfla   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____ctr_not_cond , BI               , target_addr ); }
void _bltla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beqla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgtla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnlla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bngla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsola    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bunla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnula    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _blr      ( uint3_t crfD                                                  ) { _bclr   ( BO_________________ , 0                              ); }
void _btlr     ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____________cond , BI                             ); }
void _bflr     ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_________not_cond , BI                             ); }
void _bdnzlr   (                uint5_t BO                                     ) { _bclr   ( BO_not_ctr_________ , 0                              ); }
void _bdnztlr  ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_not_ctr_____cond , BI                             ); }
void _bdnzflr  ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_not_ctr_not_cond , BI                             ); }
void _bdzlr    (                uint5_t BO                                     ) { _bclr   ( BO_____ctr_________ , 0                              ); }
void _bdztlr   ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____ctr_____cond , BI                             ); }
void _bdzflr   ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____ctr_not_cond , BI                             ); }
void _bltlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnllr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bnglr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsolr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnslr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnulr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _bctr     ( uint3_t crfD                                                  ) { _bcctr  ( BO_________________ , 0                              ); }
void _btctr    ( uint3_t crfD ,              uint5_t BI                        ) { _bcctr  ( BO_____________cond , BI                             ); }
void _bfctr    ( uint3_t crfD ,              uint5_t BI                        ) { _bcctr  ( BO_________not_cond , BI                             ); }			        
void _bltctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnlctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bngctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsoctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnsctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnuctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _blrl     ( uint3_t crfD                                                  ) { _bclrl  ( BO_________________ , 0                              ); }
void _btlrl    ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____________cond , BI                             ); }
void _bflrl    ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_________not_cond , BI                             ); }
void _bdnzlrl  (                uint5_t BO                                     ) { _bclrl  ( BO_not_ctr_________ , 0                              ); }
void _bdnztlrl ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_not_ctr_____cond , BI                             ); }
void _bdnzflrl ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_not_ctr_not_cond , BI                             ); }
void _bdzlrl   (                uint5_t BO                                     ) { _bclrl  ( BO_____ctr_________ , 0                              ); }
void _bdztlrl  ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____ctr_____cond , BI                             ); }
void _bdzflrl  ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____ctr_not_cond , BI                             ); }
void _bltlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnllrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bnglrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsolrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnslrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnulrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _bctrl    ( uint3_t crfD                                                  ) { _bcctrl ( BO_________________ , 0                              ); }
void _btctrl   ( uint3_t crfD ,              uint5_t BI                        ) { _bcctrl ( BO_____________cond , BI                             ); }
void _bfctrl   ( uint3_t crfD ,              uint5_t BI                        ) { _bcctrl ( BO_________not_cond , BI                             ); }	
void _bltctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnlctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bngctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsoctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnsctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnuctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_SO               ); }

// Processor control instructions:

void _mfxer ( uint5_t rD               ) { GPRS[rD]  = getXER();          }
void _mfctr ( uint5_t rD               ) { GPRS[rD]  = getCTR();          }
void _mfcr  ( uint5_t rD               ) { GPRS[rD]  = (getCRn(0) &lt;&lt;  0);
                                           GPRS[rD] |= (getCRn(1) &lt;&lt;  4); 
                                           GPRS[rD] |= (getCRn(2) &lt;&lt;  8); 
                                           GPRS[rD] |= (getCRn(3) &lt;&lt; 12); 
                                           GPRS[rD] |= (getCRn(4) &lt;&lt; 16); 
                                           GPRS[rD] |= (getCRn(5) &lt;&lt; 20); 
                                           GPRS[rD] |= (getCRn(6) &lt;&lt; 24); 
                                           GPRS[rD] |= (getCRn(7) &lt;&lt; 28);     }
void _mfspr ( uint5_t rD , uint5_t spr ) { if (spr == 1) { _mfxer (rD); }
                                           if (spr == 9) { _mfctr (rD); } }

void _mtcrf ( uint8_t CRM , uint5_t rS ) { setCRn(0, (getBit(CRM, 7) ? getCRn(0) : getBits(rS, (7 * 4) + 3, (7 * 4) + 0)));
                                           setCRn(1, (getBit(CRM, 6) ? getCRn(1) : getBits(rS, (6 * 4) + 3, (6 * 4) + 0)));
                                           setCRn(2, (getBit(CRM, 5) ? getCRn(2) : getBits(rS, (5 * 4) + 3, (5 * 4) + 0)));
                                           setCRn(3, (getBit(CRM, 4) ? getCRn(3) : getBits(rS, (4 * 4) + 3, (4 * 4) + 0)));
                                           setCRn(4, (getBit(CRM, 3) ? getCRn(4) : getBits(rS, (3 * 4) + 3, (3 * 4) + 0)));
                                           setCRn(5, (getBit(CRM, 2) ? getCRn(5) : getBits(rS, (2 * 4) + 3, (2 * 4) + 0)));
                                           setCRn(6, (getBit(CRM, 1) ? getCRn(6) : getBits(rS, (1 * 4) + 3, (1 * 4) + 0)));
                                           setCRn(7, (getBit(CRM, 0) ? getCRn(7) : getBits(rS, (0 * 4) + 3, (0 * 4) + 0))); }
void _mtxer (               uint5_t rS ) { setXER(GPRS[rS]);              }
void _mtctr (               uint5_t rS ) { setCTR(GPRS[rS]);              }
void _mtspr ( uint5_t spr , uint5_t rS ) { if (spr == 1) { _mtxer (rS); }
                                           if (spr == 9) { _mtctr (rS); } }

//////////////////////////////////////////
////////////////// Generated semantics: //
//////////////////////////////////////////

void execute_3000() { _stwu(r1,-48,r1); }
void execute_3004() { _mfspr(r0,8); }
void execute_3008() { _stw(r0,52,r1); }
void execute_300c() { _stw(r30,40,r1); }
void execute_3010() { _stw(r31,44,r1); }
void execute_3014() { _mr(r31,r1); }
void execute_3018() { _bcl(20,31,12312); }
void execute_301c() { _mfspr(r30,8); }
void execute_3020() { _addis(r30,r30,1); }
void execute_3024() { _addi(r30,r30,-30932); }
void execute_3028() { _li(r9,5); }
void execute_302c() { _stw(r9,20,r31); }
void execute_3030() { _li(r9,0); }
void execute_3034() { _stw(r9,8,r31); }
void execute_3038() { _b(12612); }
void execute_303c() { _li(r9,0); }
void execute_3040() { _stw(r9,16,r31); }
void execute_3044() { _li(r9,0); }
void execute_3048() { _stw(r9,12,r31); }
void execute_304c() { _b(12560); }
void execute_3050() { _lwz(r9,8,r31); }
void execute_3054() { _addi(r10,r9,1); }
void execute_3058() { _lwz(r9,12,r31); }
void execute_305c() { _addi(r9,r9,1); }
void execute_3060() { _add(r10,r10,r9); }
void execute_3064() { _lwz(r8,-32768,r30); }
void execute_3068() { _lwz(r9,8,r31); }
void execute_306c() { _mulli(r7,r9,50); }
void execute_3070() { _lwz(r9,12,r31); }
void execute_3074() { _add(r9,r7,r9); }
void execute_3078() { _rlwinm(r9,r9,2,0,29); }
void execute_307c() { _add(r9,r8,r9); }
void execute_3080() { _stw(r10,0,r9); }
void execute_3084() { _lwz(r10,8,r31); }
void execute_3088() { _lwz(r9,12,r31); }
void execute_308c() { _cmpw(cr7,r10,r9); }
void execute_3090() { _bne(cr7,12500); }
void execute_3094() { _lwz(r10,-32768,r30); }
void execute_3098() { _lwz(r9,8,r31); }
void execute_309c() { _mulli(r8,r9,50); }
void execute_30a0() { _lwz(r9,12,r31); }
void execute_30a4() { _add(r9,r8,r9); }
void execute_30a8() { _rlwinm(r9,r9,2,0,29); }
void execute_30ac() { _add(r9,r10,r9); }
void execute_30b0() { _lwz(r9,0,r9); }
void execute_30b4() { _rlwinm(r10,r9,1,0,30); }
void execute_30b8() { _lwz(r8,-32768,r30); }
void execute_30bc() { _lwz(r9,8,r31); }
void execute_30c0() { _mulli(r7,r9,50); }
void execute_30c4() { _lwz(r9,12,r31); }
void execute_30c8() { _add(r9,r7,r9); }
void execute_30cc() { _rlwinm(r9,r9,2,0,29); }
void execute_30d0() { _add(r9,r8,r9); }
void execute_30d4() { _stw(r10,0,r9); }
void execute_30d8() { _lwz(r10,-32768,r30); }
void execute_30dc() { _lwz(r9,8,r31); }
void execute_30e0() { _mulli(r8,r9,50); }
void execute_30e4() { _lwz(r9,12,r31); }
void execute_30e8() { _add(r9,r8,r9); }
void execute_30ec() { _rlwinm(r9,r9,2,0,29); }
void execute_30f0() { _add(r9,r10,r9); }
void execute_30f4() { _lwz(r9,0,r9); }
void execute_30f8() { _lwz(r10,16,r31); }
void execute_30fc() { _add(r9,r10,r9); }
void execute_3100() { _stw(r9,16,r31); }
void execute_3104() { _lwz(r9,12,r31); }
void execute_3108() { _addi(r9,r9,1); }
void execute_310c() { _stw(r9,12,r31); }
void execute_3110() { _lwz(r10,12,r31); }
void execute_3114() { _lwz(r9,20,r31); }
void execute_3118() { _cmpw(cr7,r10,r9); }
void execute_311c() { _ble(cr7,12364); }
void execute_3120() { _lwz(r10,-32764,r30); }
void execute_3124() { _lwz(r9,8,r31); }
void execute_3128() { _rlwinm(r9,r9,2,0,29); }
void execute_312c() { _add(r9,r10,r9); }
void execute_3130() { _lwz(r10,16,r31); }
void execute_3134() { _stw(r10,0,r9); }
void execute_3138() { _lwz(r9,8,r31); }
void execute_313c() { _addi(r9,r9,1); }
void execute_3140() { _stw(r9,8,r31); }
void execute_3144() { _lwz(r10,8,r31); }
void execute_3148() { _lwz(r9,20,r31); }
void execute_314c() { _cmpw(cr7,r10,r9); }
void execute_3150() { _ble(cr7,12344); }
void execute_3154() { _lwz(r3,20,r31); }
void execute_3158() { _bl(12676); }
void execute_315c() { _stw(r3,24,r31); }
void execute_3160() { _lwz(r9,24,r31); }
void execute_3164() { _mr(r3,r9); }
void execute_3168() { _addi(r11,r31,48); }
void execute_316c() { _lwz(r0,4,r11); }
void execute_3170() { _mtspr(8,r0); }
void execute_3174() { _lwz(r30,-8,r11); }
void execute_3178() { _lwz(r31,-4,r11); }
void execute_317c() { _mr(r1,r11); }
void execute_3180() { _bclr(20,0); }
void execute_3184() { _stwu(r1,-448,r1); }
void execute_3188() { _mfspr(r0,8); }
void execute_318c() { _stw(r0,452,r1); }
void execute_3190() { _stw(r30,440,r1); }
void execute_3194() { _stw(r31,444,r1); }
void execute_3198() { _mr(r31,r1); }
void execute_319c() { _bcl(20,31,12700); }
void execute_31a0() { _mfspr(r30,8); }
void execute_31a4() { _addis(r30,r30,1); }
void execute_31a8() { _addi(r30,r30,-31320); }
void execute_31ac() { _stw(r3,424,r31); }
void execute_31b0() { _li(r9,0); }
void execute_31b4() { _stw(r9,8,r31); }
void execute_31b8() { _b(13264); }
void execute_31bc() { _lwz(r9,8,r31); }
void execute_31c0() { _addi(r9,r9,1); }
void execute_31c4() { _stw(r9,12,r31); }
void execute_31c8() { _b(12988); }
void execute_31cc() { _lwz(r10,-32768,r30); }
void execute_31d0() { _lwz(r9,12,r31); }
void execute_31d4() { _mulli(r8,r9,50); }
void execute_31d8() { _lwz(r9,8,r31); }
void execute_31dc() { _add(r9,r8,r9); }
void execute_31e0() { _rlwinm(r9,r9,2,0,29); }
void execute_31e4() { _add(r9,r10,r9); }
void execute_31e8() { _lwz(r9,0,r9); }
void execute_31ec() { _stw(r9,20,r31); }
void execute_31f0() { _lwz(r9,8,r31); }
void execute_31f4() { _cmpwi(cr7,r9,0); }
void execute_31f8() { _beq(cr7,12912); }
void execute_31fc() { _li(r9,0); }
void execute_3200() { _stw(r9,16,r31); }
void execute_3204() { _b(12900); }
void execute_3208() { _lwz(r10,-32768,r30); }
void execute_320c() { _lwz(r9,12,r31); }
void execute_3210() { _mulli(r8,r9,50); }
void execute_3214() { _lwz(r9,16,r31); }
void execute_3218() { _add(r9,r8,r9); }
void execute_321c() { _rlwinm(r9,r9,2,0,29); }
void execute_3220() { _add(r9,r10,r9); }
void execute_3224() { _lwz(r10,0,r9); }
void execute_3228() { _lwz(r8,-32768,r30); }
void execute_322c() { _lwz(r9,16,r31); }
void execute_3230() { _mulli(r7,r9,50); }
void execute_3234() { _lwz(r9,8,r31); }
void execute_3238() { _add(r9,r7,r9); }
void execute_323c() { _rlwinm(r9,r9,2,0,29); }
void execute_3240() { _add(r9,r8,r9); }
void execute_3244() { _lwz(r9,0,r9); }
void execute_3248() { _mullw(r9,r10,r9); }
void execute_324c() { _lwz(r10,20,r31); }
void execute_3250() { _subf(r9,r9,r10); }
void execute_3254() { _stw(r9,20,r31); }
void execute_3258() { _lwz(r9,16,r31); }
void execute_325c() { _addi(r9,r9,1); }
void execute_3260() { _stw(r9,16,r31); }
void execute_3264() { _lwz(r10,16,r31); }
void execute_3268() { _lwz(r9,8,r31); }
void execute_326c() { _cmpw(cr7,r10,r9); }
void execute_3270() { _blt(cr7,12804); }
void execute_3274() { _lwz(r10,-32768,r30); }
void execute_3278() { _lwz(r9,8,r31); }
void execute_327c() { _mulli(r9,r9,204); }
void execute_3280() { _add(r9,r10,r9); }
void execute_3284() { _lwz(r9,0,r9); }
void execute_3288() { _lwz(r10,20,r31); }
void execute_328c() { _divw(r10,r10,r9); }
void execute_3290() { _lwz(r8,-32768,r30); }
void execute_3294() { _lwz(r9,12,r31); }
void execute_3298() { _mulli(r7,r9,50); }
void execute_329c() { _lwz(r9,8,r31); }
void execute_32a0() { _add(r9,r7,r9); }
void execute_32a4() { _rlwinm(r9,r9,2,0,29); }
void execute_32a8() { _add(r9,r8,r9); }
void execute_32ac() { _stw(r10,0,r9); }
void execute_32b0() { _lwz(r9,12,r31); }
void execute_32b4() { _addi(r9,r9,1); }
void execute_32b8() { _stw(r9,12,r31); }
void execute_32bc() { _lwz(r10,12,r31); }
void execute_32c0() { _lwz(r9,424,r31); }
void execute_32c4() { _cmpw(cr7,r10,r9); }
void execute_32c8() { _ble(cr7,12744); }
void execute_32cc() { _lwz(r9,8,r31); }
void execute_32d0() { _addi(r9,r9,1); }
void execute_32d4() { _stw(r9,12,r31); }
void execute_32d8() { _b(13236); }
void execute_32dc() { _lwz(r9,8,r31); }
void execute_32e0() { _addi(r9,r9,1); }
void execute_32e4() { _lwz(r10,-32768,r30); }
void execute_32e8() { _mulli(r8,r9,50); }
void execute_32ec() { _lwz(r9,12,r31); }
void execute_32f0() { _add(r9,r8,r9); }
void execute_32f4() { _rlwinm(r9,r9,2,0,29); }
void execute_32f8() { _add(r9,r10,r9); }
void execute_32fc() { _lwz(r9,0,r9); }
void execute_3300() { _stw(r9,20,r31); }
void execute_3304() { _li(r9,0); }
void execute_3308() { _stw(r9,16,r31); }
void execute_330c() { _b(13168); }
void execute_3310() { _lwz(r9,8,r31); }
void execute_3314() { _addi(r9,r9,1); }
void execute_3318() { _lwz(r10,-32768,r30); }
void execute_331c() { _mulli(r8,r9,50); }
void execute_3320() { _lwz(r9,16,r31); }
void execute_3324() { _add(r9,r8,r9); }
void execute_3328() { _rlwinm(r9,r9,2,0,29); }
void execute_332c() { _add(r9,r10,r9); }
void execute_3330() { _lwz(r10,0,r9); }
void execute_3334() { _lwz(r8,-32768,r30); }
void execute_3338() { _lwz(r9,16,r31); }
void execute_333c() { _mulli(r7,r9,50); }
void execute_3340() { _lwz(r9,12,r31); }
void execute_3344() { _add(r9,r7,r9); }
void execute_3348() { _rlwinm(r9,r9,2,0,29); }
void execute_334c() { _add(r9,r8,r9); }
void execute_3350() { _lwz(r9,0,r9); }
void execute_3354() { _mullw(r9,r10,r9); }
void execute_3358() { _lwz(r10,20,r31); }
void execute_335c() { _subf(r9,r9,r10); }
void execute_3360() { _stw(r9,20,r31); }
void execute_3364() { _lwz(r9,16,r31); }
void execute_3368() { _addi(r9,r9,1); }
void execute_336c() { _stw(r9,16,r31); }
void execute_3370() { _lwz(r10,16,r31); }
void execute_3374() { _lwz(r9,8,r31); }
void execute_3378() { _cmpw(cr7,r10,r9); }
void execute_337c() { _ble(cr7,13068); }
void execute_3380() { _lwz(r9,8,r31); }
void execute_3384() { _addi(r9,r9,1); }
void execute_3388() { _lwz(r10,-32768,r30); }
void execute_338c() { _mulli(r8,r9,50); }
void execute_3390() { _lwz(r9,12,r31); }
void execute_3394() { _add(r9,r8,r9); }
void execute_3398() { _rlwinm(r9,r9,2,0,29); }
void execute_339c() { _add(r9,r10,r9); }
void execute_33a0() { _lwz(r10,20,r31); }
void execute_33a4() { _stw(r10,0,r9); }
void execute_33a8() { _lwz(r9,12,r31); }
void execute_33ac() { _addi(r9,r9,1); }
void execute_33b0() { _stw(r9,12,r31); }
void execute_33b4() { _lwz(r10,12,r31); }
void execute_33b8() { _lwz(r9,424,r31); }
void execute_33bc() { _cmpw(cr7,r10,r9); }
void execute_33c0() { _ble(cr7,13016); }
void execute_33c4() { _lwz(r9,8,r31); }
void execute_33c8() { _addi(r9,r9,1); }
void execute_33cc() { _stw(r9,8,r31); }
void execute_33d0() { _lwz(r10,8,r31); }
void execute_33d4() { _lwz(r9,424,r31); }
void execute_33d8() { _cmpw(cr7,r10,r9); }
void execute_33dc() { _blt(cr7,12728); }
void execute_33e0() { _lwz(r9,-32764,r30); }
void execute_33e4() { _lwz(r9,0,r9); }
void execute_33e8() { _stw(r9,24,r31); }
void execute_33ec() { _li(r9,1); }
void execute_33f0() { _stw(r9,8,r31); }
void execute_33f4() { _b(13480); }
void execute_33f8() { _lwz(r10,-32764,r30); }
void execute_33fc() { _lwz(r9,8,r31); }
void execute_3400() { _rlwinm(r9,r9,2,0,29); }
void execute_3404() { _add(r9,r10,r9); }
void execute_3408() { _lwz(r9,0,r9); }
void execute_340c() { _stw(r9,20,r31); }
void execute_3410() { _li(r9,0); }
void execute_3414() { _stw(r9,12,r31); }
void execute_3418() { _b(13424); }
void execute_341c() { _lwz(r10,-32768,r30); }
void execute_3420() { _lwz(r9,8,r31); }
void execute_3424() { _mulli(r8,r9,50); }
void execute_3428() { _lwz(r9,12,r31); }
void execute_342c() { _add(r9,r8,r9); }
void execute_3430() { _rlwinm(r9,r9,2,0,29); }
void execute_3434() { _add(r9,r10,r9); }
void execute_3438() { _lwz(r10,0,r9); }
void execute_343c() { _lwz(r9,12,r31); }
void execute_3440() { _rlwinm(r9,r9,2,0,29); }
void execute_3444() { _addi(r8,r31,8); }
void execute_3448() { _add(r9,r8,r9); }
void execute_344c() { _addi(r9,r9,16); }
void execute_3450() { _lwz(r9,0,r9); }
void execute_3454() { _mullw(r9,r10,r9); }
void execute_3458() { _lwz(r10,20,r31); }
void execute_345c() { _subf(r9,r9,r10); }
void execute_3460() { _stw(r9,20,r31); }
void execute_3464() { _lwz(r9,12,r31); }
void execute_3468() { _addi(r9,r9,1); }
void execute_346c() { _stw(r9,12,r31); }
void execute_3470() { _lwz(r10,12,r31); }
void execute_3474() { _lwz(r9,8,r31); }
void execute_3478() { _cmpw(cr7,r10,r9); }
void execute_347c() { _blt(cr7,13336); }
void execute_3480() { _lwz(r9,8,r31); }
void execute_3484() { _rlwinm(r9,r9,2,0,29); }
void execute_3488() { _addi(r10,r31,8); }
void execute_348c() { _add(r9,r10,r9); }
void execute_3490() { _addi(r9,r9,16); }
void execute_3494() { _lwz(r10,20,r31); }
void execute_3498() { _stw(r10,0,r9); }
void execute_349c() { _lwz(r9,8,r31); }
void execute_34a0() { _addi(r9,r9,1); }
void execute_34a4() { _stw(r9,8,r31); }
void execute_34a8() { _lwz(r10,8,r31); }
void execute_34ac() { _lwz(r9,424,r31); }
void execute_34b0() { _cmpw(cr7,r10,r9); }
void execute_34b4() { _ble(cr7,13300); }
void execute_34b8() { _lwz(r9,424,r31); }
void execute_34bc() { _rlwinm(r9,r9,2,0,29); }
void execute_34c0() { _addi(r10,r31,8); }
void execute_34c4() { _add(r9,r10,r9); }
void execute_34c8() { _addi(r9,r9,16); }
void execute_34cc() { _lwz(r10,0,r9); }
void execute_34d0() { _lwz(r8,-32768,r30); }
void execute_34d4() { _lwz(r9,424,r31); }
void execute_34d8() { _mulli(r9,r9,204); }
void execute_34dc() { _add(r9,r8,r9); }
void execute_34e0() { _lwz(r9,0,r9); }
void execute_34e4() { _divw(r10,r10,r9); }
void execute_34e8() { _lwz(r8,-32760,r30); }
void execute_34ec() { _lwz(r9,424,r31); }
void execute_34f0() { _rlwinm(r9,r9,2,0,29); }
void execute_34f4() { _add(r9,r8,r9); }
void execute_34f8() { _stw(r10,0,r9); }
void execute_34fc() { _lwz(r9,424,r31); }
void execute_3500() { _addi(r9,r9,-1); }
void execute_3504() { _stw(r9,8,r31); }
void execute_3508() { _b(13780); }
void execute_350c() { _lwz(r9,8,r31); }
void execute_3510() { _rlwinm(r9,r9,2,0,29); }
void execute_3514() { _addi(r10,r31,8); }
void execute_3518() { _add(r9,r10,r9); }
void execute_351c() { _addi(r9,r9,16); }
void execute_3520() { _lwz(r9,0,r9); }
void execute_3524() { _stw(r9,20,r31); }
void execute_3528() { _lwz(r9,8,r31); }
void execute_352c() { _addi(r9,r9,1); }
void execute_3530() { _stw(r9,12,r31); }
void execute_3534() { _b(13704); }
void execute_3538() { _lwz(r10,-32768,r30); }
void execute_353c() { _lwz(r9,8,r31); }
void execute_3540() { _mulli(r8,r9,50); }
void execute_3544() { _lwz(r9,12,r31); }
void execute_3548() { _add(r9,r8,r9); }
void execute_354c() { _rlwinm(r9,r9,2,0,29); }
void execute_3550() { _add(r9,r10,r9); }
void execute_3554() { _lwz(r10,0,r9); }
void execute_3558() { _lwz(r8,-32760,r30); }
void execute_355c() { _lwz(r9,12,r31); }
void execute_3560() { _rlwinm(r9,r9,2,0,29); }
void execute_3564() { _add(r9,r8,r9); }
void execute_3568() { _lwz(r9,0,r9); }
void execute_356c() { _mullw(r9,r10,r9); }
void execute_3570() { _lwz(r10,20,r31); }
void execute_3574() { _subf(r9,r9,r10); }
void execute_3578() { _stw(r9,20,r31); }
void execute_357c() { _lwz(r9,12,r31); }
void execute_3580() { _addi(r9,r9,1); }
void execute_3584() { _stw(r9,12,r31); }
void execute_3588() { _lwz(r10,12,r31); }
void execute_358c() { _lwz(r9,424,r31); }
void execute_3590() { _cmpw(cr7,r10,r9); }
void execute_3594() { _ble(cr7,13620); }
void execute_3598() { _lwz(r10,-32768,r30); }
void execute_359c() { _lwz(r9,8,r31); }
void execute_35a0() { _mulli(r9,r9,204); }
void execute_35a4() { _add(r9,r10,r9); }
void execute_35a8() { _lwz(r9,0,r9); }
void execute_35ac() { _lwz(r10,20,r31); }
void execute_35b0() { _divw(r10,r10,r9); }
void execute_35b4() { _lwz(r8,-32760,r30); }
void execute_35b8() { _lwz(r9,8,r31); }
void execute_35bc() { _rlwinm(r9,r9,2,0,29); }
void execute_35c0() { _add(r9,r8,r9); }
void execute_35c4() { _stw(r10,0,r9); }
void execute_35c8() { _lwz(r9,8,r31); }
void execute_35cc() { _addi(r9,r9,-1); }
void execute_35d0() { _stw(r9,8,r31); }
void execute_35d4() { _lwz(r9,8,r31); }
void execute_35d8() { _cmpwi(cr7,r9,0); }
void execute_35dc() { _bge(cr7,13576); }
void execute_35e0() { _li(r9,0); }
void execute_35e4() { _mr(r3,r9); }
void execute_35e8() { _addi(r11,r31,448); }
void execute_35ec() { _lwz(r0,4,r11); }
void execute_35f0() { _mtspr(8,r0); }
void execute_35f4() { _lwz(r30,-8,r11); }
void execute_35f8() { _lwz(r31,-4,r11); }
void execute_35fc() { _mr(r1,r11); }
void execute_3600() { _bclr(20,0); }
void execute_3604() { _lis(r1,0); }
void execute_3608() { _ori(r1,r1,0); }
void execute_360c() { _bl(12288); }
void execute_3610() { _b(13840); }
</declaration>
    <template>
        <name>Binary</name>
        <location id="idinit" x="0" y="0">
            <urgent/>
        </location>
        <location id="idexit" x="0" y="0"/>
        <location id="id3000" x="0" y="0">
            <name>BB0</name>
        </location>
        <location id="id3004" x="0" y="0"/>
        <location id="id3008" x="0" y="0"/>
        <location id="id300c" x="0" y="0"/>
        <location id="id3010" x="0" y="0"/>
        <location id="id3014" x="0" y="0"/>
        <location id="id3018" x="0" y="0"/>
        <location id="id301c" x="0" y="0">
            <name>BB1</name>
        </location>
        <location id="id3020" x="0" y="0"/>
        <location id="id3024" x="0" y="0"/>
        <location id="id3028" x="0" y="0"/>
        <location id="id302c" x="0" y="0"/>
        <location id="id3030" x="0" y="0"/>
        <location id="id3034" x="0" y="0"/>
        <location id="id3038" x="0" y="0"/>
        <location id="id303c" x="0" y="0">
            <name>BB2</name>
        </location>
        <location id="id3040" x="0" y="0"/>
        <location id="id3044" x="0" y="0"/>
        <location id="id3048" x="0" y="0"/>
        <location id="id304c" x="0" y="0"/>
        <location id="id3050" x="0" y="0">
            <name>BB3</name>
        </location>
        <location id="id3054" x="0" y="0"/>
        <location id="id3058" x="0" y="0"/>
        <location id="id305c" x="0" y="0"/>
        <location id="id3060" x="0" y="0"/>
        <location id="id3064" x="0" y="0"/>
        <location id="id3068" x="0" y="0"/>
        <location id="id306c" x="0" y="0"/>
        <location id="id3070" x="0" y="0"/>
        <location id="id3074" x="0" y="0"/>
        <location id="id3078" x="0" y="0"/>
        <location id="id307c" x="0" y="0"/>
        <location id="id3080" x="0" y="0"/>
        <location id="id3084" x="0" y="0"/>
        <location id="id3088" x="0" y="0"/>
        <location id="id308c" x="0" y="0"/>
        <location id="id3090" x="0" y="0"/>
        <location id="id3094" x="0" y="0">
            <name>BB4</name>
        </location>
        <location id="id3098" x="0" y="0"/>
        <location id="id309c" x="0" y="0"/>
        <location id="id30a0" x="0" y="0"/>
        <location id="id30a4" x="0" y="0"/>
        <location id="id30a8" x="0" y="0"/>
        <location id="id30ac" x="0" y="0"/>
        <location id="id30b0" x="0" y="0"/>
        <location id="id30b4" x="0" y="0"/>
        <location id="id30b8" x="0" y="0"/>
        <location id="id30bc" x="0" y="0"/>
        <location id="id30c0" x="0" y="0"/>
        <location id="id30c4" x="0" y="0"/>
        <location id="id30c8" x="0" y="0"/>
        <location id="id30cc" x="0" y="0"/>
        <location id="id30d0" x="0" y="0"/>
        <location id="id30d4" x="0" y="0"/>
        <location id="id30d8" x="0" y="0">
            <name>BB5</name>
        </location>
        <location id="id30dc" x="0" y="0"/>
        <location id="id30e0" x="0" y="0"/>
        <location id="id30e4" x="0" y="0"/>
        <location id="id30e8" x="0" y="0"/>
        <location id="id30ec" x="0" y="0"/>
        <location id="id30f0" x="0" y="0"/>
        <location id="id30f4" x="0" y="0"/>
        <location id="id30f8" x="0" y="0"/>
        <location id="id30fc" x="0" y="0"/>
        <location id="id3100" x="0" y="0"/>
        <location id="id3104" x="0" y="0"/>
        <location id="id3108" x="0" y="0"/>
        <location id="id310c" x="0" y="0"/>
        <location id="id3110" x="0" y="0">
            <name>BB6</name>
        </location>
        <location id="id3114" x="0" y="0"/>
        <location id="id3118" x="0" y="0"/>
        <location id="id311c" x="0" y="0"/>
        <location id="id3120" x="0" y="0">
            <name>BB7</name>
        </location>
        <location id="id3124" x="0" y="0"/>
        <location id="id3128" x="0" y="0"/>
        <location id="id312c" x="0" y="0"/>
        <location id="id3130" x="0" y="0"/>
        <location id="id3134" x="0" y="0"/>
        <location id="id3138" x="0" y="0"/>
        <location id="id313c" x="0" y="0"/>
        <location id="id3140" x="0" y="0"/>
        <location id="id3144" x="0" y="0">
            <name>BB8</name>
        </location>
        <location id="id3148" x="0" y="0"/>
        <location id="id314c" x="0" y="0"/>
        <location id="id3150" x="0" y="0"/>
        <location id="id3154" x="0" y="0">
            <name>BB9</name>
        </location>
        <location id="id3158" x="0" y="0"/>
        <location id="id315c" x="0" y="0">
            <name>BB10</name>
        </location>
        <location id="id3160" x="0" y="0"/>
        <location id="id3164" x="0" y="0"/>
        <location id="id3168" x="0" y="0"/>
        <location id="id316c" x="0" y="0"/>
        <location id="id3170" x="0" y="0"/>
        <location id="id3174" x="0" y="0"/>
        <location id="id3178" x="0" y="0"/>
        <location id="id317c" x="0" y="0"/>
        <location id="id3180" x="0" y="0"/>
        <location id="id3184" x="0" y="0">
            <name>BB11</name>
        </location>
        <location id="id3188" x="0" y="0"/>
        <location id="id318c" x="0" y="0"/>
        <location id="id3190" x="0" y="0"/>
        <location id="id3194" x="0" y="0"/>
        <location id="id3198" x="0" y="0"/>
        <location id="id319c" x="0" y="0"/>
        <location id="id31a0" x="0" y="0">
            <name>BB12</name>
        </location>
        <location id="id31a4" x="0" y="0"/>
        <location id="id31a8" x="0" y="0"/>
        <location id="id31ac" x="0" y="0"/>
        <location id="id31b0" x="0" y="0"/>
        <location id="id31b4" x="0" y="0"/>
        <location id="id31b8" x="0" y="0"/>
        <location id="id31bc" x="0" y="0">
            <name>BB13</name>
        </location>
        <location id="id31c0" x="0" y="0"/>
        <location id="id31c4" x="0" y="0"/>
        <location id="id31c8" x="0" y="0"/>
        <location id="id31cc" x="0" y="0">
            <name>BB14</name>
        </location>
        <location id="id31d0" x="0" y="0"/>
        <location id="id31d4" x="0" y="0"/>
        <location id="id31d8" x="0" y="0"/>
        <location id="id31dc" x="0" y="0"/>
        <location id="id31e0" x="0" y="0"/>
        <location id="id31e4" x="0" y="0"/>
        <location id="id31e8" x="0" y="0"/>
        <location id="id31ec" x="0" y="0"/>
        <location id="id31f0" x="0" y="0"/>
        <location id="id31f4" x="0" y="0"/>
        <location id="id31f8" x="0" y="0"/>
        <location id="id31fc" x="0" y="0">
            <name>BB15</name>
        </location>
        <location id="id3200" x="0" y="0"/>
        <location id="id3204" x="0" y="0"/>
        <location id="id3208" x="0" y="0">
            <name>BB16</name>
        </location>
        <location id="id320c" x="0" y="0"/>
        <location id="id3210" x="0" y="0"/>
        <location id="id3214" x="0" y="0"/>
        <location id="id3218" x="0" y="0"/>
        <location id="id321c" x="0" y="0"/>
        <location id="id3220" x="0" y="0"/>
        <location id="id3224" x="0" y="0"/>
        <location id="id3228" x="0" y="0"/>
        <location id="id322c" x="0" y="0"/>
        <location id="id3230" x="0" y="0"/>
        <location id="id3234" x="0" y="0"/>
        <location id="id3238" x="0" y="0"/>
        <location id="id323c" x="0" y="0"/>
        <location id="id3240" x="0" y="0"/>
        <location id="id3244" x="0" y="0"/>
        <location id="id3248" x="0" y="0"/>
        <location id="id324c" x="0" y="0"/>
        <location id="id3250" x="0" y="0"/>
        <location id="id3254" x="0" y="0"/>
        <location id="id3258" x="0" y="0"/>
        <location id="id325c" x="0" y="0"/>
        <location id="id3260" x="0" y="0"/>
        <location id="id3264" x="0" y="0">
            <name>BB17</name>
        </location>
        <location id="id3268" x="0" y="0"/>
        <location id="id326c" x="0" y="0"/>
        <location id="id3270" x="0" y="0"/>
        <location id="id3274" x="0" y="0">
            <name>BB18</name>
        </location>
        <location id="id3278" x="0" y="0"/>
        <location id="id327c" x="0" y="0"/>
        <location id="id3280" x="0" y="0"/>
        <location id="id3284" x="0" y="0"/>
        <location id="id3288" x="0" y="0"/>
        <location id="id328c" x="0" y="0"/>
        <location id="id3290" x="0" y="0"/>
        <location id="id3294" x="0" y="0"/>
        <location id="id3298" x="0" y="0"/>
        <location id="id329c" x="0" y="0"/>
        <location id="id32a0" x="0" y="0"/>
        <location id="id32a4" x="0" y="0"/>
        <location id="id32a8" x="0" y="0"/>
        <location id="id32ac" x="0" y="0"/>
        <location id="id32b0" x="0" y="0"/>
        <location id="id32b4" x="0" y="0"/>
        <location id="id32b8" x="0" y="0"/>
        <location id="id32bc" x="0" y="0">
            <name>BB19</name>
        </location>
        <location id="id32c0" x="0" y="0"/>
        <location id="id32c4" x="0" y="0"/>
        <location id="id32c8" x="0" y="0"/>
        <location id="id32cc" x="0" y="0">
            <name>BB20</name>
        </location>
        <location id="id32d0" x="0" y="0"/>
        <location id="id32d4" x="0" y="0"/>
        <location id="id32d8" x="0" y="0"/>
        <location id="id32dc" x="0" y="0">
            <name>BB21</name>
        </location>
        <location id="id32e0" x="0" y="0"/>
        <location id="id32e4" x="0" y="0"/>
        <location id="id32e8" x="0" y="0"/>
        <location id="id32ec" x="0" y="0"/>
        <location id="id32f0" x="0" y="0"/>
        <location id="id32f4" x="0" y="0"/>
        <location id="id32f8" x="0" y="0"/>
        <location id="id32fc" x="0" y="0"/>
        <location id="id3300" x="0" y="0"/>
        <location id="id3304" x="0" y="0"/>
        <location id="id3308" x="0" y="0"/>
        <location id="id330c" x="0" y="0"/>
        <location id="id3310" x="0" y="0">
            <name>BB22</name>
        </location>
        <location id="id3314" x="0" y="0"/>
        <location id="id3318" x="0" y="0"/>
        <location id="id331c" x="0" y="0"/>
        <location id="id3320" x="0" y="0"/>
        <location id="id3324" x="0" y="0"/>
        <location id="id3328" x="0" y="0"/>
        <location id="id332c" x="0" y="0"/>
        <location id="id3330" x="0" y="0"/>
        <location id="id3334" x="0" y="0"/>
        <location id="id3338" x="0" y="0"/>
        <location id="id333c" x="0" y="0"/>
        <location id="id3340" x="0" y="0"/>
        <location id="id3344" x="0" y="0"/>
        <location id="id3348" x="0" y="0"/>
        <location id="id334c" x="0" y="0"/>
        <location id="id3350" x="0" y="0"/>
        <location id="id3354" x="0" y="0"/>
        <location id="id3358" x="0" y="0"/>
        <location id="id335c" x="0" y="0"/>
        <location id="id3360" x="0" y="0"/>
        <location id="id3364" x="0" y="0"/>
        <location id="id3368" x="0" y="0"/>
        <location id="id336c" x="0" y="0"/>
        <location id="id3370" x="0" y="0">
            <name>BB23</name>
        </location>
        <location id="id3374" x="0" y="0"/>
        <location id="id3378" x="0" y="0"/>
        <location id="id337c" x="0" y="0"/>
        <location id="id3380" x="0" y="0">
            <name>BB24</name>
        </location>
        <location id="id3384" x="0" y="0"/>
        <location id="id3388" x="0" y="0"/>
        <location id="id338c" x="0" y="0"/>
        <location id="id3390" x="0" y="0"/>
        <location id="id3394" x="0" y="0"/>
        <location id="id3398" x="0" y="0"/>
        <location id="id339c" x="0" y="0"/>
        <location id="id33a0" x="0" y="0"/>
        <location id="id33a4" x="0" y="0"/>
        <location id="id33a8" x="0" y="0"/>
        <location id="id33ac" x="0" y="0"/>
        <location id="id33b0" x="0" y="0"/>
        <location id="id33b4" x="0" y="0">
            <name>BB25</name>
        </location>
        <location id="id33b8" x="0" y="0"/>
        <location id="id33bc" x="0" y="0"/>
        <location id="id33c0" x="0" y="0"/>
        <location id="id33c4" x="0" y="0">
            <name>BB26</name>
        </location>
        <location id="id33c8" x="0" y="0"/>
        <location id="id33cc" x="0" y="0"/>
        <location id="id33d0" x="0" y="0">
            <name>BB27</name>
        </location>
        <location id="id33d4" x="0" y="0"/>
        <location id="id33d8" x="0" y="0"/>
        <location id="id33dc" x="0" y="0"/>
        <location id="id33e0" x="0" y="0">
            <name>BB28</name>
        </location>
        <location id="id33e4" x="0" y="0"/>
        <location id="id33e8" x="0" y="0"/>
        <location id="id33ec" x="0" y="0"/>
        <location id="id33f0" x="0" y="0"/>
        <location id="id33f4" x="0" y="0"/>
        <location id="id33f8" x="0" y="0">
            <name>BB29</name>
        </location>
        <location id="id33fc" x="0" y="0"/>
        <location id="id3400" x="0" y="0"/>
        <location id="id3404" x="0" y="0"/>
        <location id="id3408" x="0" y="0"/>
        <location id="id340c" x="0" y="0"/>
        <location id="id3410" x="0" y="0"/>
        <location id="id3414" x="0" y="0"/>
        <location id="id3418" x="0" y="0"/>
        <location id="id341c" x="0" y="0">
            <name>BB30</name>
        </location>
        <location id="id3420" x="0" y="0"/>
        <location id="id3424" x="0" y="0"/>
        <location id="id3428" x="0" y="0"/>
        <location id="id342c" x="0" y="0"/>
        <location id="id3430" x="0" y="0"/>
        <location id="id3434" x="0" y="0"/>
        <location id="id3438" x="0" y="0"/>
        <location id="id343c" x="0" y="0"/>
        <location id="id3440" x="0" y="0"/>
        <location id="id3444" x="0" y="0"/>
        <location id="id3448" x="0" y="0"/>
        <location id="id344c" x="0" y="0"/>
        <location id="id3450" x="0" y="0"/>
        <location id="id3454" x="0" y="0"/>
        <location id="id3458" x="0" y="0"/>
        <location id="id345c" x="0" y="0"/>
        <location id="id3460" x="0" y="0"/>
        <location id="id3464" x="0" y="0"/>
        <location id="id3468" x="0" y="0"/>
        <location id="id346c" x="0" y="0"/>
        <location id="id3470" x="0" y="0">
            <name>BB31</name>
        </location>
        <location id="id3474" x="0" y="0"/>
        <location id="id3478" x="0" y="0"/>
        <location id="id347c" x="0" y="0"/>
        <location id="id3480" x="0" y="0">
            <name>BB32</name>
        </location>
        <location id="id3484" x="0" y="0"/>
        <location id="id3488" x="0" y="0"/>
        <location id="id348c" x="0" y="0"/>
        <location id="id3490" x="0" y="0"/>
        <location id="id3494" x="0" y="0"/>
        <location id="id3498" x="0" y="0"/>
        <location id="id349c" x="0" y="0"/>
        <location id="id34a0" x="0" y="0"/>
        <location id="id34a4" x="0" y="0"/>
        <location id="id34a8" x="0" y="0">
            <name>BB33</name>
        </location>
        <location id="id34ac" x="0" y="0"/>
        <location id="id34b0" x="0" y="0"/>
        <location id="id34b4" x="0" y="0"/>
        <location id="id34b8" x="0" y="0">
            <name>BB34</name>
        </location>
        <location id="id34bc" x="0" y="0"/>
        <location id="id34c0" x="0" y="0"/>
        <location id="id34c4" x="0" y="0"/>
        <location id="id34c8" x="0" y="0"/>
        <location id="id34cc" x="0" y="0"/>
        <location id="id34d0" x="0" y="0"/>
        <location id="id34d4" x="0" y="0"/>
        <location id="id34d8" x="0" y="0"/>
        <location id="id34dc" x="0" y="0"/>
        <location id="id34e0" x="0" y="0"/>
        <location id="id34e4" x="0" y="0"/>
        <location id="id34e8" x="0" y="0"/>
        <location id="id34ec" x="0" y="0"/>
        <location id="id34f0" x="0" y="0"/>
        <location id="id34f4" x="0" y="0"/>
        <location id="id34f8" x="0" y="0"/>
        <location id="id34fc" x="0" y="0"/>
        <location id="id3500" x="0" y="0"/>
        <location id="id3504" x="0" y="0"/>
        <location id="id3508" x="0" y="0"/>
        <location id="id350c" x="0" y="0">
            <name>BB35</name>
        </location>
        <location id="id3510" x="0" y="0"/>
        <location id="id3514" x="0" y="0"/>
        <location id="id3518" x="0" y="0"/>
        <location id="id351c" x="0" y="0"/>
        <location id="id3520" x="0" y="0"/>
        <location id="id3524" x="0" y="0"/>
        <location id="id3528" x="0" y="0"/>
        <location id="id352c" x="0" y="0"/>
        <location id="id3530" x="0" y="0"/>
        <location id="id3534" x="0" y="0"/>
        <location id="id3538" x="0" y="0">
            <name>BB36</name>
        </location>
        <location id="id353c" x="0" y="0"/>
        <location id="id3540" x="0" y="0"/>
        <location id="id3544" x="0" y="0"/>
        <location id="id3548" x="0" y="0"/>
        <location id="id354c" x="0" y="0"/>
        <location id="id3550" x="0" y="0"/>
        <location id="id3554" x="0" y="0"/>
        <location id="id3558" x="0" y="0"/>
        <location id="id355c" x="0" y="0"/>
        <location id="id3560" x="0" y="0"/>
        <location id="id3564" x="0" y="0"/>
        <location id="id3568" x="0" y="0"/>
        <location id="id356c" x="0" y="0"/>
        <location id="id3570" x="0" y="0"/>
        <location id="id3574" x="0" y="0"/>
        <location id="id3578" x="0" y="0"/>
        <location id="id357c" x="0" y="0"/>
        <location id="id3580" x="0" y="0"/>
        <location id="id3584" x="0" y="0"/>
        <location id="id3588" x="0" y="0">
            <name>BB37</name>
        </location>
        <location id="id358c" x="0" y="0"/>
        <location id="id3590" x="0" y="0"/>
        <location id="id3594" x="0" y="0"/>
        <location id="id3598" x="0" y="0">
            <name>BB38</name>
        </location>
        <location id="id359c" x="0" y="0"/>
        <location id="id35a0" x="0" y="0"/>
        <location id="id35a4" x="0" y="0"/>
        <location id="id35a8" x="0" y="0"/>
        <location id="id35ac" x="0" y="0"/>
        <location id="id35b0" x="0" y="0"/>
        <location id="id35b4" x="0" y="0"/>
        <location id="id35b8" x="0" y="0"/>
        <location id="id35bc" x="0" y="0"/>
        <location id="id35c0" x="0" y="0"/>
        <location id="id35c4" x="0" y="0"/>
        <location id="id35c8" x="0" y="0"/>
        <location id="id35cc" x="0" y="0"/>
        <location id="id35d0" x="0" y="0"/>
        <location id="id35d4" x="0" y="0">
            <name>BB39</name>
        </location>
        <location id="id35d8" x="0" y="0"/>
        <location id="id35dc" x="0" y="0"/>
        <location id="id35e0" x="0" y="0">
            <name>BB40</name>
        </location>
        <location id="id35e4" x="0" y="0"/>
        <location id="id35e8" x="0" y="0"/>
        <location id="id35ec" x="0" y="0"/>
        <location id="id35f0" x="0" y="0"/>
        <location id="id35f4" x="0" y="0"/>
        <location id="id35f8" x="0" y="0"/>
        <location id="id35fc" x="0" y="0"/>
        <location id="id3600" x="0" y="0"/>
        <location id="id3604" x="0" y="0">
            <name>BB41</name>
        </location>
        <location id="id3608" x="0" y="0"/>
        <location id="id360c" x="0" y="0"/>
        <location id="id3610" x="0" y="0">
            <name>BB42</name>
        </location>
        <init ref="idinit"/>
        <transition>
            <source ref="idinit"/>
            <target ref="id3604"/>
            <label kind="synchronisation">_doInitialize?</label>
            <label kind="assignment">InCU_PC_Set(385),
_clock = 0</label>
        </transition>
        <transition>
            <source ref="id3610"/>
            <target ref="idexit"/>
            <label kind="guard">EUs_ExecuteNext(388)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3610(),
_mustTerminate = true</label>
        </transition>
        <transition>
            <source ref="id3604"/>
            <target ref="id3608"/>
            <label kind="guard">EUs_ExecuteNext(385)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3604()</label>
        </transition>
        <transition>
            <source ref="id3608"/>
            <target ref="id360c"/>
            <label kind="guard">EUs_ExecuteNext(386)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3608()</label>
        </transition>
        <transition>
            <source ref="id360c"/>
            <target ref="id3000"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(387)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_360c()</label>
        </transition>
        <transition>
            <source ref="id35e0"/>
            <target ref="id35e4"/>
            <label kind="guard">EUs_ExecuteNext(376)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35e0()</label>
        </transition>
        <transition>
            <source ref="id35e4"/>
            <target ref="id35e8"/>
            <label kind="guard">EUs_ExecuteNext(377)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35e4()</label>
        </transition>
        <transition>
            <source ref="id35e8"/>
            <target ref="id35ec"/>
            <label kind="guard">EUs_ExecuteNext(378)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35e8()</label>
        </transition>
        <transition>
            <source ref="id35ec"/>
            <target ref="id35f0"/>
            <label kind="guard">EUs_ExecuteNext(379)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35ec()</label>
        </transition>
        <transition>
            <source ref="id35f0"/>
            <target ref="id35f4"/>
            <label kind="guard">EUs_ExecuteNext(380)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35f0()</label>
        </transition>
        <transition>
            <source ref="id35f4"/>
            <target ref="id35f8"/>
            <label kind="guard">EUs_ExecuteNext(381)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35f4()</label>
        </transition>
        <transition>
            <source ref="id35f8"/>
            <target ref="id35fc"/>
            <label kind="guard">EUs_ExecuteNext(382)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35f8()</label>
        </transition>
        <transition>
            <source ref="id35fc"/>
            <target ref="id3600"/>
            <label kind="guard">EUs_ExecuteNext(383)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35fc()</label>
        </transition>
        <transition>
            <source ref="id3600"/>
            <target ref="id315c"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(384) &amp;&amp;
_Stack_TopIs(87)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3600()</label>
        </transition>
        <transition>
            <source ref="id35d4"/>
            <target ref="id35d8"/>
            <label kind="guard">EUs_ExecuteNext(373)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35d4()</label>
        </transition>
        <transition>
            <source ref="id35d8"/>
            <target ref="id35dc"/>
            <label kind="guard">EUs_ExecuteNext(374)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35d8()</label>
        </transition>
        <transition>
            <source ref="id35dc"/>
            <target ref="id350c"/>
            <label kind="guard">ge(cr7) &amp;&amp;
EUs_ExecuteNext(375)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35dc()</label>
        </transition>
        <transition>
            <source ref="id35dc"/>
            <target ref="id35e0"/>
            <label kind="guard">!ge(cr7) &amp;&amp;
EUs_ExecuteNext(375)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35dc()</label>
        </transition>
        <transition>
            <source ref="id3598"/>
            <target ref="id359c"/>
            <label kind="guard">EUs_ExecuteNext(358)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3598()</label>
        </transition>
        <transition>
            <source ref="id359c"/>
            <target ref="id35a0"/>
            <label kind="guard">EUs_ExecuteNext(359)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_359c()</label>
        </transition>
        <transition>
            <source ref="id35a0"/>
            <target ref="id35a4"/>
            <label kind="guard">EUs_ExecuteNext(360)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35a0()</label>
        </transition>
        <transition>
            <source ref="id35a4"/>
            <target ref="id35a8"/>
            <label kind="guard">EUs_ExecuteNext(361)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35a4()</label>
        </transition>
        <transition>
            <source ref="id35a8"/>
            <target ref="id35ac"/>
            <label kind="guard">EUs_ExecuteNext(362)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35a8()</label>
        </transition>
        <transition>
            <source ref="id35ac"/>
            <target ref="id35b0"/>
            <label kind="guard">EUs_ExecuteNext(363)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35ac()</label>
        </transition>
        <transition>
            <source ref="id35b0"/>
            <target ref="id35b4"/>
            <label kind="guard">EUs_ExecuteNext(364)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35b0()</label>
        </transition>
        <transition>
            <source ref="id35b4"/>
            <target ref="id35b8"/>
            <label kind="guard">EUs_ExecuteNext(365)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35b4()</label>
        </transition>
        <transition>
            <source ref="id35b8"/>
            <target ref="id35bc"/>
            <label kind="guard">EUs_ExecuteNext(366)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35b8()</label>
        </transition>
        <transition>
            <source ref="id35bc"/>
            <target ref="id35c0"/>
            <label kind="guard">EUs_ExecuteNext(367)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35bc()</label>
        </transition>
        <transition>
            <source ref="id35c0"/>
            <target ref="id35c4"/>
            <label kind="guard">EUs_ExecuteNext(368)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35c0()</label>
        </transition>
        <transition>
            <source ref="id35c4"/>
            <target ref="id35c8"/>
            <label kind="guard">EUs_ExecuteNext(369)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35c4()</label>
        </transition>
        <transition>
            <source ref="id35c8"/>
            <target ref="id35cc"/>
            <label kind="guard">EUs_ExecuteNext(370)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35c8()</label>
        </transition>
        <transition>
            <source ref="id35cc"/>
            <target ref="id35d0"/>
            <label kind="guard">EUs_ExecuteNext(371)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35cc()</label>
        </transition>
        <transition>
            <source ref="id35d0"/>
            <target ref="id35d4"/>
            <label kind="guard">EUs_ExecuteNext(372)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_35d0()</label>
        </transition>
        <transition>
            <source ref="id3588"/>
            <target ref="id358c"/>
            <label kind="guard">EUs_ExecuteNext(354)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3588()</label>
        </transition>
        <transition>
            <source ref="id358c"/>
            <target ref="id3590"/>
            <label kind="guard">EUs_ExecuteNext(355)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_358c()</label>
        </transition>
        <transition>
            <source ref="id3590"/>
            <target ref="id3594"/>
            <label kind="guard">EUs_ExecuteNext(356)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3590()</label>
        </transition>
        <transition>
            <source ref="id3594"/>
            <target ref="id3538"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(357)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3594()</label>
        </transition>
        <transition>
            <source ref="id3594"/>
            <target ref="id3598"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(357)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3594()</label>
        </transition>
        <transition>
            <source ref="id3538"/>
            <target ref="id353c"/>
            <label kind="guard">EUs_ExecuteNext(334)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3538()</label>
        </transition>
        <transition>
            <source ref="id353c"/>
            <target ref="id3540"/>
            <label kind="guard">EUs_ExecuteNext(335)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_353c()</label>
        </transition>
        <transition>
            <source ref="id3540"/>
            <target ref="id3544"/>
            <label kind="guard">EUs_ExecuteNext(336)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3540()</label>
        </transition>
        <transition>
            <source ref="id3544"/>
            <target ref="id3548"/>
            <label kind="guard">EUs_ExecuteNext(337)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3544()</label>
        </transition>
        <transition>
            <source ref="id3548"/>
            <target ref="id354c"/>
            <label kind="guard">EUs_ExecuteNext(338)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3548()</label>
        </transition>
        <transition>
            <source ref="id354c"/>
            <target ref="id3550"/>
            <label kind="guard">EUs_ExecuteNext(339)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_354c()</label>
        </transition>
        <transition>
            <source ref="id3550"/>
            <target ref="id3554"/>
            <label kind="guard">EUs_ExecuteNext(340)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3550()</label>
        </transition>
        <transition>
            <source ref="id3554"/>
            <target ref="id3558"/>
            <label kind="guard">EUs_ExecuteNext(341)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3554()</label>
        </transition>
        <transition>
            <source ref="id3558"/>
            <target ref="id355c"/>
            <label kind="guard">EUs_ExecuteNext(342)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3558()</label>
        </transition>
        <transition>
            <source ref="id355c"/>
            <target ref="id3560"/>
            <label kind="guard">EUs_ExecuteNext(343)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_355c()</label>
        </transition>
        <transition>
            <source ref="id3560"/>
            <target ref="id3564"/>
            <label kind="guard">EUs_ExecuteNext(344)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3560()</label>
        </transition>
        <transition>
            <source ref="id3564"/>
            <target ref="id3568"/>
            <label kind="guard">EUs_ExecuteNext(345)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3564()</label>
        </transition>
        <transition>
            <source ref="id3568"/>
            <target ref="id356c"/>
            <label kind="guard">EUs_ExecuteNext(346)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3568()</label>
        </transition>
        <transition>
            <source ref="id356c"/>
            <target ref="id3570"/>
            <label kind="guard">EUs_ExecuteNext(347)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_356c()</label>
        </transition>
        <transition>
            <source ref="id3570"/>
            <target ref="id3574"/>
            <label kind="guard">EUs_ExecuteNext(348)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3570()</label>
        </transition>
        <transition>
            <source ref="id3574"/>
            <target ref="id3578"/>
            <label kind="guard">EUs_ExecuteNext(349)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3574()</label>
        </transition>
        <transition>
            <source ref="id3578"/>
            <target ref="id357c"/>
            <label kind="guard">EUs_ExecuteNext(350)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3578()</label>
        </transition>
        <transition>
            <source ref="id357c"/>
            <target ref="id3580"/>
            <label kind="guard">EUs_ExecuteNext(351)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_357c()</label>
        </transition>
        <transition>
            <source ref="id3580"/>
            <target ref="id3584"/>
            <label kind="guard">EUs_ExecuteNext(352)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3580()</label>
        </transition>
        <transition>
            <source ref="id3584"/>
            <target ref="id3588"/>
            <label kind="guard">EUs_ExecuteNext(353)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3584()</label>
        </transition>
        <transition>
            <source ref="id350c"/>
            <target ref="id3510"/>
            <label kind="guard">EUs_ExecuteNext(323)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_350c()</label>
        </transition>
        <transition>
            <source ref="id3510"/>
            <target ref="id3514"/>
            <label kind="guard">EUs_ExecuteNext(324)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3510()</label>
        </transition>
        <transition>
            <source ref="id3514"/>
            <target ref="id3518"/>
            <label kind="guard">EUs_ExecuteNext(325)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3514()</label>
        </transition>
        <transition>
            <source ref="id3518"/>
            <target ref="id351c"/>
            <label kind="guard">EUs_ExecuteNext(326)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3518()</label>
        </transition>
        <transition>
            <source ref="id351c"/>
            <target ref="id3520"/>
            <label kind="guard">EUs_ExecuteNext(327)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_351c()</label>
        </transition>
        <transition>
            <source ref="id3520"/>
            <target ref="id3524"/>
            <label kind="guard">EUs_ExecuteNext(328)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3520()</label>
        </transition>
        <transition>
            <source ref="id3524"/>
            <target ref="id3528"/>
            <label kind="guard">EUs_ExecuteNext(329)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3524()</label>
        </transition>
        <transition>
            <source ref="id3528"/>
            <target ref="id352c"/>
            <label kind="guard">EUs_ExecuteNext(330)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3528()</label>
        </transition>
        <transition>
            <source ref="id352c"/>
            <target ref="id3530"/>
            <label kind="guard">EUs_ExecuteNext(331)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_352c()</label>
        </transition>
        <transition>
            <source ref="id3530"/>
            <target ref="id3534"/>
            <label kind="guard">EUs_ExecuteNext(332)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3530()</label>
        </transition>
        <transition>
            <source ref="id3534"/>
            <target ref="id3588"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(333)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3534()</label>
        </transition>
        <transition>
            <source ref="id34b8"/>
            <target ref="id34bc"/>
            <label kind="guard">EUs_ExecuteNext(302)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34b8()</label>
        </transition>
        <transition>
            <source ref="id34bc"/>
            <target ref="id34c0"/>
            <label kind="guard">EUs_ExecuteNext(303)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34bc()</label>
        </transition>
        <transition>
            <source ref="id34c0"/>
            <target ref="id34c4"/>
            <label kind="guard">EUs_ExecuteNext(304)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34c0()</label>
        </transition>
        <transition>
            <source ref="id34c4"/>
            <target ref="id34c8"/>
            <label kind="guard">EUs_ExecuteNext(305)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34c4()</label>
        </transition>
        <transition>
            <source ref="id34c8"/>
            <target ref="id34cc"/>
            <label kind="guard">EUs_ExecuteNext(306)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34c8()</label>
        </transition>
        <transition>
            <source ref="id34cc"/>
            <target ref="id34d0"/>
            <label kind="guard">EUs_ExecuteNext(307)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34cc()</label>
        </transition>
        <transition>
            <source ref="id34d0"/>
            <target ref="id34d4"/>
            <label kind="guard">EUs_ExecuteNext(308)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34d0()</label>
        </transition>
        <transition>
            <source ref="id34d4"/>
            <target ref="id34d8"/>
            <label kind="guard">EUs_ExecuteNext(309)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34d4()</label>
        </transition>
        <transition>
            <source ref="id34d8"/>
            <target ref="id34dc"/>
            <label kind="guard">EUs_ExecuteNext(310)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34d8()</label>
        </transition>
        <transition>
            <source ref="id34dc"/>
            <target ref="id34e0"/>
            <label kind="guard">EUs_ExecuteNext(311)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34dc()</label>
        </transition>
        <transition>
            <source ref="id34e0"/>
            <target ref="id34e4"/>
            <label kind="guard">EUs_ExecuteNext(312)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34e0()</label>
        </transition>
        <transition>
            <source ref="id34e4"/>
            <target ref="id34e8"/>
            <label kind="guard">EUs_ExecuteNext(313)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34e4()</label>
        </transition>
        <transition>
            <source ref="id34e8"/>
            <target ref="id34ec"/>
            <label kind="guard">EUs_ExecuteNext(314)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34e8()</label>
        </transition>
        <transition>
            <source ref="id34ec"/>
            <target ref="id34f0"/>
            <label kind="guard">EUs_ExecuteNext(315)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34ec()</label>
        </transition>
        <transition>
            <source ref="id34f0"/>
            <target ref="id34f4"/>
            <label kind="guard">EUs_ExecuteNext(316)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34f0()</label>
        </transition>
        <transition>
            <source ref="id34f4"/>
            <target ref="id34f8"/>
            <label kind="guard">EUs_ExecuteNext(317)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34f4()</label>
        </transition>
        <transition>
            <source ref="id34f8"/>
            <target ref="id34fc"/>
            <label kind="guard">EUs_ExecuteNext(318)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34f8()</label>
        </transition>
        <transition>
            <source ref="id34fc"/>
            <target ref="id3500"/>
            <label kind="guard">EUs_ExecuteNext(319)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34fc()</label>
        </transition>
        <transition>
            <source ref="id3500"/>
            <target ref="id3504"/>
            <label kind="guard">EUs_ExecuteNext(320)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3500()</label>
        </transition>
        <transition>
            <source ref="id3504"/>
            <target ref="id3508"/>
            <label kind="guard">EUs_ExecuteNext(321)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3504()</label>
        </transition>
        <transition>
            <source ref="id3508"/>
            <target ref="id35d4"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(322)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3508()</label>
        </transition>
        <transition>
            <source ref="id34a8"/>
            <target ref="id34ac"/>
            <label kind="guard">EUs_ExecuteNext(298)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34a8()</label>
        </transition>
        <transition>
            <source ref="id34ac"/>
            <target ref="id34b0"/>
            <label kind="guard">EUs_ExecuteNext(299)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34ac()</label>
        </transition>
        <transition>
            <source ref="id34b0"/>
            <target ref="id34b4"/>
            <label kind="guard">EUs_ExecuteNext(300)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34b0()</label>
        </transition>
        <transition>
            <source ref="id34b4"/>
            <target ref="id33f8"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(301)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34b4()</label>
        </transition>
        <transition>
            <source ref="id34b4"/>
            <target ref="id34b8"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(301)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34b4()</label>
        </transition>
        <transition>
            <source ref="id3480"/>
            <target ref="id3484"/>
            <label kind="guard">EUs_ExecuteNext(288)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3480()</label>
        </transition>
        <transition>
            <source ref="id3484"/>
            <target ref="id3488"/>
            <label kind="guard">EUs_ExecuteNext(289)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3484()</label>
        </transition>
        <transition>
            <source ref="id3488"/>
            <target ref="id348c"/>
            <label kind="guard">EUs_ExecuteNext(290)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3488()</label>
        </transition>
        <transition>
            <source ref="id348c"/>
            <target ref="id3490"/>
            <label kind="guard">EUs_ExecuteNext(291)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_348c()</label>
        </transition>
        <transition>
            <source ref="id3490"/>
            <target ref="id3494"/>
            <label kind="guard">EUs_ExecuteNext(292)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3490()</label>
        </transition>
        <transition>
            <source ref="id3494"/>
            <target ref="id3498"/>
            <label kind="guard">EUs_ExecuteNext(293)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3494()</label>
        </transition>
        <transition>
            <source ref="id3498"/>
            <target ref="id349c"/>
            <label kind="guard">EUs_ExecuteNext(294)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3498()</label>
        </transition>
        <transition>
            <source ref="id349c"/>
            <target ref="id34a0"/>
            <label kind="guard">EUs_ExecuteNext(295)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_349c()</label>
        </transition>
        <transition>
            <source ref="id34a0"/>
            <target ref="id34a4"/>
            <label kind="guard">EUs_ExecuteNext(296)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34a0()</label>
        </transition>
        <transition>
            <source ref="id34a4"/>
            <target ref="id34a8"/>
            <label kind="guard">EUs_ExecuteNext(297)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_34a4()</label>
        </transition>
        <transition>
            <source ref="id3470"/>
            <target ref="id3474"/>
            <label kind="guard">EUs_ExecuteNext(284)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3470()</label>
        </transition>
        <transition>
            <source ref="id3474"/>
            <target ref="id3478"/>
            <label kind="guard">EUs_ExecuteNext(285)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3474()</label>
        </transition>
        <transition>
            <source ref="id3478"/>
            <target ref="id347c"/>
            <label kind="guard">EUs_ExecuteNext(286)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3478()</label>
        </transition>
        <transition>
            <source ref="id347c"/>
            <target ref="id341c"/>
            <label kind="guard">lt(cr7) &amp;&amp;
EUs_ExecuteNext(287)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_347c()</label>
        </transition>
        <transition>
            <source ref="id347c"/>
            <target ref="id3480"/>
            <label kind="guard">!lt(cr7) &amp;&amp;
EUs_ExecuteNext(287)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_347c()</label>
        </transition>
        <transition>
            <source ref="id341c"/>
            <target ref="id3420"/>
            <label kind="guard">EUs_ExecuteNext(263)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_341c()</label>
        </transition>
        <transition>
            <source ref="id3420"/>
            <target ref="id3424"/>
            <label kind="guard">EUs_ExecuteNext(264)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3420()</label>
        </transition>
        <transition>
            <source ref="id3424"/>
            <target ref="id3428"/>
            <label kind="guard">EUs_ExecuteNext(265)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3424()</label>
        </transition>
        <transition>
            <source ref="id3428"/>
            <target ref="id342c"/>
            <label kind="guard">EUs_ExecuteNext(266)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3428()</label>
        </transition>
        <transition>
            <source ref="id342c"/>
            <target ref="id3430"/>
            <label kind="guard">EUs_ExecuteNext(267)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_342c()</label>
        </transition>
        <transition>
            <source ref="id3430"/>
            <target ref="id3434"/>
            <label kind="guard">EUs_ExecuteNext(268)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3430()</label>
        </transition>
        <transition>
            <source ref="id3434"/>
            <target ref="id3438"/>
            <label kind="guard">EUs_ExecuteNext(269)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3434()</label>
        </transition>
        <transition>
            <source ref="id3438"/>
            <target ref="id343c"/>
            <label kind="guard">EUs_ExecuteNext(270)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3438()</label>
        </transition>
        <transition>
            <source ref="id343c"/>
            <target ref="id3440"/>
            <label kind="guard">EUs_ExecuteNext(271)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_343c()</label>
        </transition>
        <transition>
            <source ref="id3440"/>
            <target ref="id3444"/>
            <label kind="guard">EUs_ExecuteNext(272)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3440()</label>
        </transition>
        <transition>
            <source ref="id3444"/>
            <target ref="id3448"/>
            <label kind="guard">EUs_ExecuteNext(273)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3444()</label>
        </transition>
        <transition>
            <source ref="id3448"/>
            <target ref="id344c"/>
            <label kind="guard">EUs_ExecuteNext(274)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3448()</label>
        </transition>
        <transition>
            <source ref="id344c"/>
            <target ref="id3450"/>
            <label kind="guard">EUs_ExecuteNext(275)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_344c()</label>
        </transition>
        <transition>
            <source ref="id3450"/>
            <target ref="id3454"/>
            <label kind="guard">EUs_ExecuteNext(276)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3450()</label>
        </transition>
        <transition>
            <source ref="id3454"/>
            <target ref="id3458"/>
            <label kind="guard">EUs_ExecuteNext(277)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3454()</label>
        </transition>
        <transition>
            <source ref="id3458"/>
            <target ref="id345c"/>
            <label kind="guard">EUs_ExecuteNext(278)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3458()</label>
        </transition>
        <transition>
            <source ref="id345c"/>
            <target ref="id3460"/>
            <label kind="guard">EUs_ExecuteNext(279)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_345c()</label>
        </transition>
        <transition>
            <source ref="id3460"/>
            <target ref="id3464"/>
            <label kind="guard">EUs_ExecuteNext(280)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3460()</label>
        </transition>
        <transition>
            <source ref="id3464"/>
            <target ref="id3468"/>
            <label kind="guard">EUs_ExecuteNext(281)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3464()</label>
        </transition>
        <transition>
            <source ref="id3468"/>
            <target ref="id346c"/>
            <label kind="guard">EUs_ExecuteNext(282)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3468()</label>
        </transition>
        <transition>
            <source ref="id346c"/>
            <target ref="id3470"/>
            <label kind="guard">EUs_ExecuteNext(283)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_346c()</label>
        </transition>
        <transition>
            <source ref="id33f8"/>
            <target ref="id33fc"/>
            <label kind="guard">EUs_ExecuteNext(254)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33f8()</label>
        </transition>
        <transition>
            <source ref="id33fc"/>
            <target ref="id3400"/>
            <label kind="guard">EUs_ExecuteNext(255)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33fc()</label>
        </transition>
        <transition>
            <source ref="id3400"/>
            <target ref="id3404"/>
            <label kind="guard">EUs_ExecuteNext(256)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3400()</label>
        </transition>
        <transition>
            <source ref="id3404"/>
            <target ref="id3408"/>
            <label kind="guard">EUs_ExecuteNext(257)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3404()</label>
        </transition>
        <transition>
            <source ref="id3408"/>
            <target ref="id340c"/>
            <label kind="guard">EUs_ExecuteNext(258)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3408()</label>
        </transition>
        <transition>
            <source ref="id340c"/>
            <target ref="id3410"/>
            <label kind="guard">EUs_ExecuteNext(259)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_340c()</label>
        </transition>
        <transition>
            <source ref="id3410"/>
            <target ref="id3414"/>
            <label kind="guard">EUs_ExecuteNext(260)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3410()</label>
        </transition>
        <transition>
            <source ref="id3414"/>
            <target ref="id3418"/>
            <label kind="guard">EUs_ExecuteNext(261)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3414()</label>
        </transition>
        <transition>
            <source ref="id3418"/>
            <target ref="id3470"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(262)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3418()</label>
        </transition>
        <transition>
            <source ref="id33e0"/>
            <target ref="id33e4"/>
            <label kind="guard">EUs_ExecuteNext(248)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33e0()</label>
        </transition>
        <transition>
            <source ref="id33e4"/>
            <target ref="id33e8"/>
            <label kind="guard">EUs_ExecuteNext(249)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33e4()</label>
        </transition>
        <transition>
            <source ref="id33e8"/>
            <target ref="id33ec"/>
            <label kind="guard">EUs_ExecuteNext(250)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33e8()</label>
        </transition>
        <transition>
            <source ref="id33ec"/>
            <target ref="id33f0"/>
            <label kind="guard">EUs_ExecuteNext(251)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33ec()</label>
        </transition>
        <transition>
            <source ref="id33f0"/>
            <target ref="id33f4"/>
            <label kind="guard">EUs_ExecuteNext(252)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33f0()</label>
        </transition>
        <transition>
            <source ref="id33f4"/>
            <target ref="id34a8"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(253)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33f4()</label>
        </transition>
        <transition>
            <source ref="id33d0"/>
            <target ref="id33d4"/>
            <label kind="guard">EUs_ExecuteNext(244)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33d0()</label>
        </transition>
        <transition>
            <source ref="id33d4"/>
            <target ref="id33d8"/>
            <label kind="guard">EUs_ExecuteNext(245)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33d4()</label>
        </transition>
        <transition>
            <source ref="id33d8"/>
            <target ref="id33dc"/>
            <label kind="guard">EUs_ExecuteNext(246)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33d8()</label>
        </transition>
        <transition>
            <source ref="id33dc"/>
            <target ref="id31bc"/>
            <label kind="guard">lt(cr7) &amp;&amp;
EUs_ExecuteNext(247)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33dc()</label>
        </transition>
        <transition>
            <source ref="id33dc"/>
            <target ref="id33e0"/>
            <label kind="guard">!lt(cr7) &amp;&amp;
EUs_ExecuteNext(247)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33dc()</label>
        </transition>
        <transition>
            <source ref="id33c4"/>
            <target ref="id33c8"/>
            <label kind="guard">EUs_ExecuteNext(241)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33c4()</label>
        </transition>
        <transition>
            <source ref="id33c8"/>
            <target ref="id33cc"/>
            <label kind="guard">EUs_ExecuteNext(242)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33c8()</label>
        </transition>
        <transition>
            <source ref="id33cc"/>
            <target ref="id33d0"/>
            <label kind="guard">EUs_ExecuteNext(243)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33cc()</label>
        </transition>
        <transition>
            <source ref="id33b4"/>
            <target ref="id33b8"/>
            <label kind="guard">EUs_ExecuteNext(237)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33b4()</label>
        </transition>
        <transition>
            <source ref="id33b8"/>
            <target ref="id33bc"/>
            <label kind="guard">EUs_ExecuteNext(238)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33b8()</label>
        </transition>
        <transition>
            <source ref="id33bc"/>
            <target ref="id33c0"/>
            <label kind="guard">EUs_ExecuteNext(239)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33bc()</label>
        </transition>
        <transition>
            <source ref="id33c0"/>
            <target ref="id32dc"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(240)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33c0()</label>
        </transition>
        <transition>
            <source ref="id33c0"/>
            <target ref="id33c4"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(240)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33c0()</label>
        </transition>
        <transition>
            <source ref="id3380"/>
            <target ref="id3384"/>
            <label kind="guard">EUs_ExecuteNext(224)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3380()</label>
        </transition>
        <transition>
            <source ref="id3384"/>
            <target ref="id3388"/>
            <label kind="guard">EUs_ExecuteNext(225)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3384()</label>
        </transition>
        <transition>
            <source ref="id3388"/>
            <target ref="id338c"/>
            <label kind="guard">EUs_ExecuteNext(226)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3388()</label>
        </transition>
        <transition>
            <source ref="id338c"/>
            <target ref="id3390"/>
            <label kind="guard">EUs_ExecuteNext(227)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_338c()</label>
        </transition>
        <transition>
            <source ref="id3390"/>
            <target ref="id3394"/>
            <label kind="guard">EUs_ExecuteNext(228)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3390()</label>
        </transition>
        <transition>
            <source ref="id3394"/>
            <target ref="id3398"/>
            <label kind="guard">EUs_ExecuteNext(229)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3394()</label>
        </transition>
        <transition>
            <source ref="id3398"/>
            <target ref="id339c"/>
            <label kind="guard">EUs_ExecuteNext(230)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3398()</label>
        </transition>
        <transition>
            <source ref="id339c"/>
            <target ref="id33a0"/>
            <label kind="guard">EUs_ExecuteNext(231)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_339c()</label>
        </transition>
        <transition>
            <source ref="id33a0"/>
            <target ref="id33a4"/>
            <label kind="guard">EUs_ExecuteNext(232)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33a0()</label>
        </transition>
        <transition>
            <source ref="id33a4"/>
            <target ref="id33a8"/>
            <label kind="guard">EUs_ExecuteNext(233)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33a4()</label>
        </transition>
        <transition>
            <source ref="id33a8"/>
            <target ref="id33ac"/>
            <label kind="guard">EUs_ExecuteNext(234)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33a8()</label>
        </transition>
        <transition>
            <source ref="id33ac"/>
            <target ref="id33b0"/>
            <label kind="guard">EUs_ExecuteNext(235)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33ac()</label>
        </transition>
        <transition>
            <source ref="id33b0"/>
            <target ref="id33b4"/>
            <label kind="guard">EUs_ExecuteNext(236)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_33b0()</label>
        </transition>
        <transition>
            <source ref="id3370"/>
            <target ref="id3374"/>
            <label kind="guard">EUs_ExecuteNext(220)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3370()</label>
        </transition>
        <transition>
            <source ref="id3374"/>
            <target ref="id3378"/>
            <label kind="guard">EUs_ExecuteNext(221)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3374()</label>
        </transition>
        <transition>
            <source ref="id3378"/>
            <target ref="id337c"/>
            <label kind="guard">EUs_ExecuteNext(222)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3378()</label>
        </transition>
        <transition>
            <source ref="id337c"/>
            <target ref="id3310"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(223)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_337c()</label>
        </transition>
        <transition>
            <source ref="id337c"/>
            <target ref="id3380"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(223)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_337c()</label>
        </transition>
        <transition>
            <source ref="id3310"/>
            <target ref="id3314"/>
            <label kind="guard">EUs_ExecuteNext(196)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3310()</label>
        </transition>
        <transition>
            <source ref="id3314"/>
            <target ref="id3318"/>
            <label kind="guard">EUs_ExecuteNext(197)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3314()</label>
        </transition>
        <transition>
            <source ref="id3318"/>
            <target ref="id331c"/>
            <label kind="guard">EUs_ExecuteNext(198)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3318()</label>
        </transition>
        <transition>
            <source ref="id331c"/>
            <target ref="id3320"/>
            <label kind="guard">EUs_ExecuteNext(199)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_331c()</label>
        </transition>
        <transition>
            <source ref="id3320"/>
            <target ref="id3324"/>
            <label kind="guard">EUs_ExecuteNext(200)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3320()</label>
        </transition>
        <transition>
            <source ref="id3324"/>
            <target ref="id3328"/>
            <label kind="guard">EUs_ExecuteNext(201)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3324()</label>
        </transition>
        <transition>
            <source ref="id3328"/>
            <target ref="id332c"/>
            <label kind="guard">EUs_ExecuteNext(202)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3328()</label>
        </transition>
        <transition>
            <source ref="id332c"/>
            <target ref="id3330"/>
            <label kind="guard">EUs_ExecuteNext(203)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_332c()</label>
        </transition>
        <transition>
            <source ref="id3330"/>
            <target ref="id3334"/>
            <label kind="guard">EUs_ExecuteNext(204)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3330()</label>
        </transition>
        <transition>
            <source ref="id3334"/>
            <target ref="id3338"/>
            <label kind="guard">EUs_ExecuteNext(205)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3334()</label>
        </transition>
        <transition>
            <source ref="id3338"/>
            <target ref="id333c"/>
            <label kind="guard">EUs_ExecuteNext(206)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3338()</label>
        </transition>
        <transition>
            <source ref="id333c"/>
            <target ref="id3340"/>
            <label kind="guard">EUs_ExecuteNext(207)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_333c()</label>
        </transition>
        <transition>
            <source ref="id3340"/>
            <target ref="id3344"/>
            <label kind="guard">EUs_ExecuteNext(208)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3340()</label>
        </transition>
        <transition>
            <source ref="id3344"/>
            <target ref="id3348"/>
            <label kind="guard">EUs_ExecuteNext(209)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3344()</label>
        </transition>
        <transition>
            <source ref="id3348"/>
            <target ref="id334c"/>
            <label kind="guard">EUs_ExecuteNext(210)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3348()</label>
        </transition>
        <transition>
            <source ref="id334c"/>
            <target ref="id3350"/>
            <label kind="guard">EUs_ExecuteNext(211)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_334c()</label>
        </transition>
        <transition>
            <source ref="id3350"/>
            <target ref="id3354"/>
            <label kind="guard">EUs_ExecuteNext(212)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3350()</label>
        </transition>
        <transition>
            <source ref="id3354"/>
            <target ref="id3358"/>
            <label kind="guard">EUs_ExecuteNext(213)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3354()</label>
        </transition>
        <transition>
            <source ref="id3358"/>
            <target ref="id335c"/>
            <label kind="guard">EUs_ExecuteNext(214)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3358()</label>
        </transition>
        <transition>
            <source ref="id335c"/>
            <target ref="id3360"/>
            <label kind="guard">EUs_ExecuteNext(215)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_335c()</label>
        </transition>
        <transition>
            <source ref="id3360"/>
            <target ref="id3364"/>
            <label kind="guard">EUs_ExecuteNext(216)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3360()</label>
        </transition>
        <transition>
            <source ref="id3364"/>
            <target ref="id3368"/>
            <label kind="guard">EUs_ExecuteNext(217)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3364()</label>
        </transition>
        <transition>
            <source ref="id3368"/>
            <target ref="id336c"/>
            <label kind="guard">EUs_ExecuteNext(218)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3368()</label>
        </transition>
        <transition>
            <source ref="id336c"/>
            <target ref="id3370"/>
            <label kind="guard">EUs_ExecuteNext(219)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_336c()</label>
        </transition>
        <transition>
            <source ref="id32dc"/>
            <target ref="id32e0"/>
            <label kind="guard">EUs_ExecuteNext(183)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32dc()</label>
        </transition>
        <transition>
            <source ref="id32e0"/>
            <target ref="id32e4"/>
            <label kind="guard">EUs_ExecuteNext(184)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32e0()</label>
        </transition>
        <transition>
            <source ref="id32e4"/>
            <target ref="id32e8"/>
            <label kind="guard">EUs_ExecuteNext(185)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32e4()</label>
        </transition>
        <transition>
            <source ref="id32e8"/>
            <target ref="id32ec"/>
            <label kind="guard">EUs_ExecuteNext(186)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32e8()</label>
        </transition>
        <transition>
            <source ref="id32ec"/>
            <target ref="id32f0"/>
            <label kind="guard">EUs_ExecuteNext(187)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32ec()</label>
        </transition>
        <transition>
            <source ref="id32f0"/>
            <target ref="id32f4"/>
            <label kind="guard">EUs_ExecuteNext(188)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32f0()</label>
        </transition>
        <transition>
            <source ref="id32f4"/>
            <target ref="id32f8"/>
            <label kind="guard">EUs_ExecuteNext(189)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32f4()</label>
        </transition>
        <transition>
            <source ref="id32f8"/>
            <target ref="id32fc"/>
            <label kind="guard">EUs_ExecuteNext(190)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32f8()</label>
        </transition>
        <transition>
            <source ref="id32fc"/>
            <target ref="id3300"/>
            <label kind="guard">EUs_ExecuteNext(191)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32fc()</label>
        </transition>
        <transition>
            <source ref="id3300"/>
            <target ref="id3304"/>
            <label kind="guard">EUs_ExecuteNext(192)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3300()</label>
        </transition>
        <transition>
            <source ref="id3304"/>
            <target ref="id3308"/>
            <label kind="guard">EUs_ExecuteNext(193)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3304()</label>
        </transition>
        <transition>
            <source ref="id3308"/>
            <target ref="id330c"/>
            <label kind="guard">EUs_ExecuteNext(194)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3308()</label>
        </transition>
        <transition>
            <source ref="id330c"/>
            <target ref="id3370"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(195)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_330c()</label>
        </transition>
        <transition>
            <source ref="id32cc"/>
            <target ref="id32d0"/>
            <label kind="guard">EUs_ExecuteNext(179)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32cc()</label>
        </transition>
        <transition>
            <source ref="id32d0"/>
            <target ref="id32d4"/>
            <label kind="guard">EUs_ExecuteNext(180)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32d0()</label>
        </transition>
        <transition>
            <source ref="id32d4"/>
            <target ref="id32d8"/>
            <label kind="guard">EUs_ExecuteNext(181)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32d4()</label>
        </transition>
        <transition>
            <source ref="id32d8"/>
            <target ref="id33b4"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(182)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32d8()</label>
        </transition>
        <transition>
            <source ref="id32bc"/>
            <target ref="id32c0"/>
            <label kind="guard">EUs_ExecuteNext(175)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32bc()</label>
        </transition>
        <transition>
            <source ref="id32c0"/>
            <target ref="id32c4"/>
            <label kind="guard">EUs_ExecuteNext(176)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32c0()</label>
        </transition>
        <transition>
            <source ref="id32c4"/>
            <target ref="id32c8"/>
            <label kind="guard">EUs_ExecuteNext(177)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32c4()</label>
        </transition>
        <transition>
            <source ref="id32c8"/>
            <target ref="id31cc"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(178)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32c8()</label>
        </transition>
        <transition>
            <source ref="id32c8"/>
            <target ref="id32cc"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(178)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32c8()</label>
        </transition>
        <transition>
            <source ref="id3274"/>
            <target ref="id3278"/>
            <label kind="guard">EUs_ExecuteNext(157)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3274()</label>
        </transition>
        <transition>
            <source ref="id3278"/>
            <target ref="id327c"/>
            <label kind="guard">EUs_ExecuteNext(158)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3278()</label>
        </transition>
        <transition>
            <source ref="id327c"/>
            <target ref="id3280"/>
            <label kind="guard">EUs_ExecuteNext(159)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_327c()</label>
        </transition>
        <transition>
            <source ref="id3280"/>
            <target ref="id3284"/>
            <label kind="guard">EUs_ExecuteNext(160)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3280()</label>
        </transition>
        <transition>
            <source ref="id3284"/>
            <target ref="id3288"/>
            <label kind="guard">EUs_ExecuteNext(161)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3284()</label>
        </transition>
        <transition>
            <source ref="id3288"/>
            <target ref="id328c"/>
            <label kind="guard">EUs_ExecuteNext(162)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3288()</label>
        </transition>
        <transition>
            <source ref="id328c"/>
            <target ref="id3290"/>
            <label kind="guard">EUs_ExecuteNext(163)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_328c()</label>
        </transition>
        <transition>
            <source ref="id3290"/>
            <target ref="id3294"/>
            <label kind="guard">EUs_ExecuteNext(164)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3290()</label>
        </transition>
        <transition>
            <source ref="id3294"/>
            <target ref="id3298"/>
            <label kind="guard">EUs_ExecuteNext(165)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3294()</label>
        </transition>
        <transition>
            <source ref="id3298"/>
            <target ref="id329c"/>
            <label kind="guard">EUs_ExecuteNext(166)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3298()</label>
        </transition>
        <transition>
            <source ref="id329c"/>
            <target ref="id32a0"/>
            <label kind="guard">EUs_ExecuteNext(167)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_329c()</label>
        </transition>
        <transition>
            <source ref="id32a0"/>
            <target ref="id32a4"/>
            <label kind="guard">EUs_ExecuteNext(168)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32a0()</label>
        </transition>
        <transition>
            <source ref="id32a4"/>
            <target ref="id32a8"/>
            <label kind="guard">EUs_ExecuteNext(169)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32a4()</label>
        </transition>
        <transition>
            <source ref="id32a8"/>
            <target ref="id32ac"/>
            <label kind="guard">EUs_ExecuteNext(170)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32a8()</label>
        </transition>
        <transition>
            <source ref="id32ac"/>
            <target ref="id32b0"/>
            <label kind="guard">EUs_ExecuteNext(171)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32ac()</label>
        </transition>
        <transition>
            <source ref="id32b0"/>
            <target ref="id32b4"/>
            <label kind="guard">EUs_ExecuteNext(172)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32b0()</label>
        </transition>
        <transition>
            <source ref="id32b4"/>
            <target ref="id32b8"/>
            <label kind="guard">EUs_ExecuteNext(173)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32b4()</label>
        </transition>
        <transition>
            <source ref="id32b8"/>
            <target ref="id32bc"/>
            <label kind="guard">EUs_ExecuteNext(174)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_32b8()</label>
        </transition>
        <transition>
            <source ref="id3264"/>
            <target ref="id3268"/>
            <label kind="guard">EUs_ExecuteNext(153)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3264()</label>
        </transition>
        <transition>
            <source ref="id3268"/>
            <target ref="id326c"/>
            <label kind="guard">EUs_ExecuteNext(154)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3268()</label>
        </transition>
        <transition>
            <source ref="id326c"/>
            <target ref="id3270"/>
            <label kind="guard">EUs_ExecuteNext(155)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_326c()</label>
        </transition>
        <transition>
            <source ref="id3270"/>
            <target ref="id3208"/>
            <label kind="guard">lt(cr7) &amp;&amp;
EUs_ExecuteNext(156)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3270()</label>
        </transition>
        <transition>
            <source ref="id3270"/>
            <target ref="id3274"/>
            <label kind="guard">!lt(cr7) &amp;&amp;
EUs_ExecuteNext(156)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3270()</label>
        </transition>
        <transition>
            <source ref="id3208"/>
            <target ref="id320c"/>
            <label kind="guard">EUs_ExecuteNext(130)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3208()</label>
        </transition>
        <transition>
            <source ref="id320c"/>
            <target ref="id3210"/>
            <label kind="guard">EUs_ExecuteNext(131)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_320c()</label>
        </transition>
        <transition>
            <source ref="id3210"/>
            <target ref="id3214"/>
            <label kind="guard">EUs_ExecuteNext(132)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3210()</label>
        </transition>
        <transition>
            <source ref="id3214"/>
            <target ref="id3218"/>
            <label kind="guard">EUs_ExecuteNext(133)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3214()</label>
        </transition>
        <transition>
            <source ref="id3218"/>
            <target ref="id321c"/>
            <label kind="guard">EUs_ExecuteNext(134)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3218()</label>
        </transition>
        <transition>
            <source ref="id321c"/>
            <target ref="id3220"/>
            <label kind="guard">EUs_ExecuteNext(135)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_321c()</label>
        </transition>
        <transition>
            <source ref="id3220"/>
            <target ref="id3224"/>
            <label kind="guard">EUs_ExecuteNext(136)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3220()</label>
        </transition>
        <transition>
            <source ref="id3224"/>
            <target ref="id3228"/>
            <label kind="guard">EUs_ExecuteNext(137)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3224()</label>
        </transition>
        <transition>
            <source ref="id3228"/>
            <target ref="id322c"/>
            <label kind="guard">EUs_ExecuteNext(138)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3228()</label>
        </transition>
        <transition>
            <source ref="id322c"/>
            <target ref="id3230"/>
            <label kind="guard">EUs_ExecuteNext(139)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_322c()</label>
        </transition>
        <transition>
            <source ref="id3230"/>
            <target ref="id3234"/>
            <label kind="guard">EUs_ExecuteNext(140)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3230()</label>
        </transition>
        <transition>
            <source ref="id3234"/>
            <target ref="id3238"/>
            <label kind="guard">EUs_ExecuteNext(141)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3234()</label>
        </transition>
        <transition>
            <source ref="id3238"/>
            <target ref="id323c"/>
            <label kind="guard">EUs_ExecuteNext(142)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3238()</label>
        </transition>
        <transition>
            <source ref="id323c"/>
            <target ref="id3240"/>
            <label kind="guard">EUs_ExecuteNext(143)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_323c()</label>
        </transition>
        <transition>
            <source ref="id3240"/>
            <target ref="id3244"/>
            <label kind="guard">EUs_ExecuteNext(144)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3240()</label>
        </transition>
        <transition>
            <source ref="id3244"/>
            <target ref="id3248"/>
            <label kind="guard">EUs_ExecuteNext(145)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3244()</label>
        </transition>
        <transition>
            <source ref="id3248"/>
            <target ref="id324c"/>
            <label kind="guard">EUs_ExecuteNext(146)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3248()</label>
        </transition>
        <transition>
            <source ref="id324c"/>
            <target ref="id3250"/>
            <label kind="guard">EUs_ExecuteNext(147)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_324c()</label>
        </transition>
        <transition>
            <source ref="id3250"/>
            <target ref="id3254"/>
            <label kind="guard">EUs_ExecuteNext(148)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3250()</label>
        </transition>
        <transition>
            <source ref="id3254"/>
            <target ref="id3258"/>
            <label kind="guard">EUs_ExecuteNext(149)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3254()</label>
        </transition>
        <transition>
            <source ref="id3258"/>
            <target ref="id325c"/>
            <label kind="guard">EUs_ExecuteNext(150)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3258()</label>
        </transition>
        <transition>
            <source ref="id325c"/>
            <target ref="id3260"/>
            <label kind="guard">EUs_ExecuteNext(151)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_325c()</label>
        </transition>
        <transition>
            <source ref="id3260"/>
            <target ref="id3264"/>
            <label kind="guard">EUs_ExecuteNext(152)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3260()</label>
        </transition>
        <transition>
            <source ref="id31fc"/>
            <target ref="id3200"/>
            <label kind="guard">EUs_ExecuteNext(127)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31fc()</label>
        </transition>
        <transition>
            <source ref="id3200"/>
            <target ref="id3204"/>
            <label kind="guard">EUs_ExecuteNext(128)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3200()</label>
        </transition>
        <transition>
            <source ref="id3204"/>
            <target ref="id3264"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(129)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3204()</label>
        </transition>
        <transition>
            <source ref="id31cc"/>
            <target ref="id31d0"/>
            <label kind="guard">EUs_ExecuteNext(115)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31cc()</label>
        </transition>
        <transition>
            <source ref="id31d0"/>
            <target ref="id31d4"/>
            <label kind="guard">EUs_ExecuteNext(116)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31d0()</label>
        </transition>
        <transition>
            <source ref="id31d4"/>
            <target ref="id31d8"/>
            <label kind="guard">EUs_ExecuteNext(117)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31d4()</label>
        </transition>
        <transition>
            <source ref="id31d8"/>
            <target ref="id31dc"/>
            <label kind="guard">EUs_ExecuteNext(118)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31d8()</label>
        </transition>
        <transition>
            <source ref="id31dc"/>
            <target ref="id31e0"/>
            <label kind="guard">EUs_ExecuteNext(119)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31dc()</label>
        </transition>
        <transition>
            <source ref="id31e0"/>
            <target ref="id31e4"/>
            <label kind="guard">EUs_ExecuteNext(120)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31e0()</label>
        </transition>
        <transition>
            <source ref="id31e4"/>
            <target ref="id31e8"/>
            <label kind="guard">EUs_ExecuteNext(121)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31e4()</label>
        </transition>
        <transition>
            <source ref="id31e8"/>
            <target ref="id31ec"/>
            <label kind="guard">EUs_ExecuteNext(122)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31e8()</label>
        </transition>
        <transition>
            <source ref="id31ec"/>
            <target ref="id31f0"/>
            <label kind="guard">EUs_ExecuteNext(123)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31ec()</label>
        </transition>
        <transition>
            <source ref="id31f0"/>
            <target ref="id31f4"/>
            <label kind="guard">EUs_ExecuteNext(124)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31f0()</label>
        </transition>
        <transition>
            <source ref="id31f4"/>
            <target ref="id31f8"/>
            <label kind="guard">EUs_ExecuteNext(125)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31f4()</label>
        </transition>
        <transition>
            <source ref="id31f8"/>
            <target ref="id3274"/>
            <label kind="guard">eq(cr7) &amp;&amp;
EUs_ExecuteNext(126)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31f8()</label>
        </transition>
        <transition>
            <source ref="id31f8"/>
            <target ref="id31fc"/>
            <label kind="guard">!eq(cr7) &amp;&amp;
EUs_ExecuteNext(126)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31f8()</label>
        </transition>
        <transition>
            <source ref="id31bc"/>
            <target ref="id31c0"/>
            <label kind="guard">EUs_ExecuteNext(111)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31bc()</label>
        </transition>
        <transition>
            <source ref="id31c0"/>
            <target ref="id31c4"/>
            <label kind="guard">EUs_ExecuteNext(112)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31c0()</label>
        </transition>
        <transition>
            <source ref="id31c4"/>
            <target ref="id31c8"/>
            <label kind="guard">EUs_ExecuteNext(113)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31c4()</label>
        </transition>
        <transition>
            <source ref="id31c8"/>
            <target ref="id32bc"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(114)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31c8()</label>
        </transition>
        <transition>
            <source ref="id31a0"/>
            <target ref="id31a4"/>
            <label kind="guard">EUs_ExecuteNext(104)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31a0()</label>
        </transition>
        <transition>
            <source ref="id31a4"/>
            <target ref="id31a8"/>
            <label kind="guard">EUs_ExecuteNext(105)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31a4()</label>
        </transition>
        <transition>
            <source ref="id31a8"/>
            <target ref="id31ac"/>
            <label kind="guard">EUs_ExecuteNext(106)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31a8()</label>
        </transition>
        <transition>
            <source ref="id31ac"/>
            <target ref="id31b0"/>
            <label kind="guard">EUs_ExecuteNext(107)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31ac()</label>
        </transition>
        <transition>
            <source ref="id31b0"/>
            <target ref="id31b4"/>
            <label kind="guard">EUs_ExecuteNext(108)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31b0()</label>
        </transition>
        <transition>
            <source ref="id31b4"/>
            <target ref="id31b8"/>
            <label kind="guard">EUs_ExecuteNext(109)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31b4()</label>
        </transition>
        <transition>
            <source ref="id31b8"/>
            <target ref="id33d0"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(110)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_31b8()</label>
        </transition>
        <transition>
            <source ref="id3184"/>
            <target ref="id3188"/>
            <label kind="guard">EUs_ExecuteNext(97)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3184()</label>
        </transition>
        <transition>
            <source ref="id3188"/>
            <target ref="id318c"/>
            <label kind="guard">EUs_ExecuteNext(98)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3188()</label>
        </transition>
        <transition>
            <source ref="id318c"/>
            <target ref="id3190"/>
            <label kind="guard">EUs_ExecuteNext(99)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_318c()</label>
        </transition>
        <transition>
            <source ref="id3190"/>
            <target ref="id3194"/>
            <label kind="guard">EUs_ExecuteNext(100)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3190()</label>
        </transition>
        <transition>
            <source ref="id3194"/>
            <target ref="id3198"/>
            <label kind="guard">EUs_ExecuteNext(101)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3194()</label>
        </transition>
        <transition>
            <source ref="id3198"/>
            <target ref="id319c"/>
            <label kind="guard">EUs_ExecuteNext(102)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3198()</label>
        </transition>
        <transition>
            <source ref="id319c"/>
            <target ref="id31a0"/>
            <label kind="guard">!true &amp;&amp;
EUs_ExecuteNext(103)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_319c()</label>
        </transition>
        <transition>
            <source ref="id315c"/>
            <target ref="id3160"/>
            <label kind="guard">EUs_ExecuteNext(87)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_315c()</label>
        </transition>
        <transition>
            <source ref="id3160"/>
            <target ref="id3164"/>
            <label kind="guard">EUs_ExecuteNext(88)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3160()</label>
        </transition>
        <transition>
            <source ref="id3164"/>
            <target ref="id3168"/>
            <label kind="guard">EUs_ExecuteNext(89)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3164()</label>
        </transition>
        <transition>
            <source ref="id3168"/>
            <target ref="id316c"/>
            <label kind="guard">EUs_ExecuteNext(90)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3168()</label>
        </transition>
        <transition>
            <source ref="id316c"/>
            <target ref="id3170"/>
            <label kind="guard">EUs_ExecuteNext(91)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_316c()</label>
        </transition>
        <transition>
            <source ref="id3170"/>
            <target ref="id3174"/>
            <label kind="guard">EUs_ExecuteNext(92)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3170()</label>
        </transition>
        <transition>
            <source ref="id3174"/>
            <target ref="id3178"/>
            <label kind="guard">EUs_ExecuteNext(93)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3174()</label>
        </transition>
        <transition>
            <source ref="id3178"/>
            <target ref="id317c"/>
            <label kind="guard">EUs_ExecuteNext(94)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3178()</label>
        </transition>
        <transition>
            <source ref="id317c"/>
            <target ref="id3180"/>
            <label kind="guard">EUs_ExecuteNext(95)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_317c()</label>
        </transition>
        <transition>
            <source ref="id3180"/>
            <target ref="id3610"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(96) &amp;&amp;
_Stack_TopIs(388)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3180()</label>
        </transition>
        <transition>
            <source ref="id3154"/>
            <target ref="id3158"/>
            <label kind="guard">EUs_ExecuteNext(85)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3154()</label>
        </transition>
        <transition>
            <source ref="id3158"/>
            <target ref="id3184"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(86)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3158()</label>
        </transition>
        <transition>
            <source ref="id3144"/>
            <target ref="id3148"/>
            <label kind="guard">EUs_ExecuteNext(81)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3144()</label>
        </transition>
        <transition>
            <source ref="id3148"/>
            <target ref="id314c"/>
            <label kind="guard">EUs_ExecuteNext(82)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3148()</label>
        </transition>
        <transition>
            <source ref="id314c"/>
            <target ref="id3150"/>
            <label kind="guard">EUs_ExecuteNext(83)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_314c()</label>
        </transition>
        <transition>
            <source ref="id3150"/>
            <target ref="id303c"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(84)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3150()</label>
        </transition>
        <transition>
            <source ref="id3150"/>
            <target ref="id3154"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(84)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3150()</label>
        </transition>
        <transition>
            <source ref="id3120"/>
            <target ref="id3124"/>
            <label kind="guard">EUs_ExecuteNext(72)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3120()</label>
        </transition>
        <transition>
            <source ref="id3124"/>
            <target ref="id3128"/>
            <label kind="guard">EUs_ExecuteNext(73)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3124()</label>
        </transition>
        <transition>
            <source ref="id3128"/>
            <target ref="id312c"/>
            <label kind="guard">EUs_ExecuteNext(74)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3128()</label>
        </transition>
        <transition>
            <source ref="id312c"/>
            <target ref="id3130"/>
            <label kind="guard">EUs_ExecuteNext(75)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_312c()</label>
        </transition>
        <transition>
            <source ref="id3130"/>
            <target ref="id3134"/>
            <label kind="guard">EUs_ExecuteNext(76)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3130()</label>
        </transition>
        <transition>
            <source ref="id3134"/>
            <target ref="id3138"/>
            <label kind="guard">EUs_ExecuteNext(77)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3134()</label>
        </transition>
        <transition>
            <source ref="id3138"/>
            <target ref="id313c"/>
            <label kind="guard">EUs_ExecuteNext(78)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3138()</label>
        </transition>
        <transition>
            <source ref="id313c"/>
            <target ref="id3140"/>
            <label kind="guard">EUs_ExecuteNext(79)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_313c()</label>
        </transition>
        <transition>
            <source ref="id3140"/>
            <target ref="id3144"/>
            <label kind="guard">EUs_ExecuteNext(80)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3140()</label>
        </transition>
        <transition>
            <source ref="id3110"/>
            <target ref="id3114"/>
            <label kind="guard">EUs_ExecuteNext(68)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3110()</label>
        </transition>
        <transition>
            <source ref="id3114"/>
            <target ref="id3118"/>
            <label kind="guard">EUs_ExecuteNext(69)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3114()</label>
        </transition>
        <transition>
            <source ref="id3118"/>
            <target ref="id311c"/>
            <label kind="guard">EUs_ExecuteNext(70)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3118()</label>
        </transition>
        <transition>
            <source ref="id311c"/>
            <target ref="id3050"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(71)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_311c()</label>
        </transition>
        <transition>
            <source ref="id311c"/>
            <target ref="id3120"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(71)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_311c()</label>
        </transition>
        <transition>
            <source ref="id30d8"/>
            <target ref="id30dc"/>
            <label kind="guard">EUs_ExecuteNext(54)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d8()</label>
        </transition>
        <transition>
            <source ref="id30dc"/>
            <target ref="id30e0"/>
            <label kind="guard">EUs_ExecuteNext(55)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30dc()</label>
        </transition>
        <transition>
            <source ref="id30e0"/>
            <target ref="id30e4"/>
            <label kind="guard">EUs_ExecuteNext(56)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e0()</label>
        </transition>
        <transition>
            <source ref="id30e4"/>
            <target ref="id30e8"/>
            <label kind="guard">EUs_ExecuteNext(57)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e4()</label>
        </transition>
        <transition>
            <source ref="id30e8"/>
            <target ref="id30ec"/>
            <label kind="guard">EUs_ExecuteNext(58)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e8()</label>
        </transition>
        <transition>
            <source ref="id30ec"/>
            <target ref="id30f0"/>
            <label kind="guard">EUs_ExecuteNext(59)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30ec()</label>
        </transition>
        <transition>
            <source ref="id30f0"/>
            <target ref="id30f4"/>
            <label kind="guard">EUs_ExecuteNext(60)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f0()</label>
        </transition>
        <transition>
            <source ref="id30f4"/>
            <target ref="id30f8"/>
            <label kind="guard">EUs_ExecuteNext(61)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f4()</label>
        </transition>
        <transition>
            <source ref="id30f8"/>
            <target ref="id30fc"/>
            <label kind="guard">EUs_ExecuteNext(62)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f8()</label>
        </transition>
        <transition>
            <source ref="id30fc"/>
            <target ref="id3100"/>
            <label kind="guard">EUs_ExecuteNext(63)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30fc()</label>
        </transition>
        <transition>
            <source ref="id3100"/>
            <target ref="id3104"/>
            <label kind="guard">EUs_ExecuteNext(64)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3100()</label>
        </transition>
        <transition>
            <source ref="id3104"/>
            <target ref="id3108"/>
            <label kind="guard">EUs_ExecuteNext(65)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3104()</label>
        </transition>
        <transition>
            <source ref="id3108"/>
            <target ref="id310c"/>
            <label kind="guard">EUs_ExecuteNext(66)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3108()</label>
        </transition>
        <transition>
            <source ref="id310c"/>
            <target ref="id3110"/>
            <label kind="guard">EUs_ExecuteNext(67)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_310c()</label>
        </transition>
        <transition>
            <source ref="id3094"/>
            <target ref="id3098"/>
            <label kind="guard">EUs_ExecuteNext(37)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3094()</label>
        </transition>
        <transition>
            <source ref="id3098"/>
            <target ref="id309c"/>
            <label kind="guard">EUs_ExecuteNext(38)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3098()</label>
        </transition>
        <transition>
            <source ref="id309c"/>
            <target ref="id30a0"/>
            <label kind="guard">EUs_ExecuteNext(39)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_309c()</label>
        </transition>
        <transition>
            <source ref="id30a0"/>
            <target ref="id30a4"/>
            <label kind="guard">EUs_ExecuteNext(40)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a0()</label>
        </transition>
        <transition>
            <source ref="id30a4"/>
            <target ref="id30a8"/>
            <label kind="guard">EUs_ExecuteNext(41)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a4()</label>
        </transition>
        <transition>
            <source ref="id30a8"/>
            <target ref="id30ac"/>
            <label kind="guard">EUs_ExecuteNext(42)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a8()</label>
        </transition>
        <transition>
            <source ref="id30ac"/>
            <target ref="id30b0"/>
            <label kind="guard">EUs_ExecuteNext(43)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30ac()</label>
        </transition>
        <transition>
            <source ref="id30b0"/>
            <target ref="id30b4"/>
            <label kind="guard">EUs_ExecuteNext(44)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b0()</label>
        </transition>
        <transition>
            <source ref="id30b4"/>
            <target ref="id30b8"/>
            <label kind="guard">EUs_ExecuteNext(45)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b4()</label>
        </transition>
        <transition>
            <source ref="id30b8"/>
            <target ref="id30bc"/>
            <label kind="guard">EUs_ExecuteNext(46)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b8()</label>
        </transition>
        <transition>
            <source ref="id30bc"/>
            <target ref="id30c0"/>
            <label kind="guard">EUs_ExecuteNext(47)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30bc()</label>
        </transition>
        <transition>
            <source ref="id30c0"/>
            <target ref="id30c4"/>
            <label kind="guard">EUs_ExecuteNext(48)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c0()</label>
        </transition>
        <transition>
            <source ref="id30c4"/>
            <target ref="id30c8"/>
            <label kind="guard">EUs_ExecuteNext(49)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c4()</label>
        </transition>
        <transition>
            <source ref="id30c8"/>
            <target ref="id30cc"/>
            <label kind="guard">EUs_ExecuteNext(50)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c8()</label>
        </transition>
        <transition>
            <source ref="id30cc"/>
            <target ref="id30d0"/>
            <label kind="guard">EUs_ExecuteNext(51)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30cc()</label>
        </transition>
        <transition>
            <source ref="id30d0"/>
            <target ref="id30d4"/>
            <label kind="guard">EUs_ExecuteNext(52)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d0()</label>
        </transition>
        <transition>
            <source ref="id30d4"/>
            <target ref="id30d8"/>
            <label kind="guard">EUs_ExecuteNext(53)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d4()</label>
        </transition>
        <transition>
            <source ref="id3050"/>
            <target ref="id3054"/>
            <label kind="guard">EUs_ExecuteNext(20)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3050()</label>
        </transition>
        <transition>
            <source ref="id3054"/>
            <target ref="id3058"/>
            <label kind="guard">EUs_ExecuteNext(21)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3054()</label>
        </transition>
        <transition>
            <source ref="id3058"/>
            <target ref="id305c"/>
            <label kind="guard">EUs_ExecuteNext(22)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3058()</label>
        </transition>
        <transition>
            <source ref="id305c"/>
            <target ref="id3060"/>
            <label kind="guard">EUs_ExecuteNext(23)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_305c()</label>
        </transition>
        <transition>
            <source ref="id3060"/>
            <target ref="id3064"/>
            <label kind="guard">EUs_ExecuteNext(24)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3060()</label>
        </transition>
        <transition>
            <source ref="id3064"/>
            <target ref="id3068"/>
            <label kind="guard">EUs_ExecuteNext(25)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3064()</label>
        </transition>
        <transition>
            <source ref="id3068"/>
            <target ref="id306c"/>
            <label kind="guard">EUs_ExecuteNext(26)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3068()</label>
        </transition>
        <transition>
            <source ref="id306c"/>
            <target ref="id3070"/>
            <label kind="guard">EUs_ExecuteNext(27)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_306c()</label>
        </transition>
        <transition>
            <source ref="id3070"/>
            <target ref="id3074"/>
            <label kind="guard">EUs_ExecuteNext(28)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3070()</label>
        </transition>
        <transition>
            <source ref="id3074"/>
            <target ref="id3078"/>
            <label kind="guard">EUs_ExecuteNext(29)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3074()</label>
        </transition>
        <transition>
            <source ref="id3078"/>
            <target ref="id307c"/>
            <label kind="guard">EUs_ExecuteNext(30)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3078()</label>
        </transition>
        <transition>
            <source ref="id307c"/>
            <target ref="id3080"/>
            <label kind="guard">EUs_ExecuteNext(31)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_307c()</label>
        </transition>
        <transition>
            <source ref="id3080"/>
            <target ref="id3084"/>
            <label kind="guard">EUs_ExecuteNext(32)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3080()</label>
        </transition>
        <transition>
            <source ref="id3084"/>
            <target ref="id3088"/>
            <label kind="guard">EUs_ExecuteNext(33)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3084()</label>
        </transition>
        <transition>
            <source ref="id3088"/>
            <target ref="id308c"/>
            <label kind="guard">EUs_ExecuteNext(34)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3088()</label>
        </transition>
        <transition>
            <source ref="id308c"/>
            <target ref="id3090"/>
            <label kind="guard">EUs_ExecuteNext(35)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_308c()</label>
        </transition>
        <transition>
            <source ref="id3090"/>
            <target ref="id30d8"/>
            <label kind="guard">ne(cr7) &amp;&amp;
EUs_ExecuteNext(36)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3090()</label>
        </transition>
        <transition>
            <source ref="id3090"/>
            <target ref="id3094"/>
            <label kind="guard">!ne(cr7) &amp;&amp;
EUs_ExecuteNext(36)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3090()</label>
        </transition>
        <transition>
            <source ref="id303c"/>
            <target ref="id3040"/>
            <label kind="guard">EUs_ExecuteNext(15)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_303c()</label>
        </transition>
        <transition>
            <source ref="id3040"/>
            <target ref="id3044"/>
            <label kind="guard">EUs_ExecuteNext(16)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3040()</label>
        </transition>
        <transition>
            <source ref="id3044"/>
            <target ref="id3048"/>
            <label kind="guard">EUs_ExecuteNext(17)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3044()</label>
        </transition>
        <transition>
            <source ref="id3048"/>
            <target ref="id304c"/>
            <label kind="guard">EUs_ExecuteNext(18)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3048()</label>
        </transition>
        <transition>
            <source ref="id304c"/>
            <target ref="id3110"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(19)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_304c()</label>
        </transition>
        <transition>
            <source ref="id301c"/>
            <target ref="id3020"/>
            <label kind="guard">EUs_ExecuteNext(7)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_301c()</label>
        </transition>
        <transition>
            <source ref="id3020"/>
            <target ref="id3024"/>
            <label kind="guard">EUs_ExecuteNext(8)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3020()</label>
        </transition>
        <transition>
            <source ref="id3024"/>
            <target ref="id3028"/>
            <label kind="guard">EUs_ExecuteNext(9)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3024()</label>
        </transition>
        <transition>
            <source ref="id3028"/>
            <target ref="id302c"/>
            <label kind="guard">EUs_ExecuteNext(10)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3028()</label>
        </transition>
        <transition>
            <source ref="id302c"/>
            <target ref="id3030"/>
            <label kind="guard">EUs_ExecuteNext(11)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_302c()</label>
        </transition>
        <transition>
            <source ref="id3030"/>
            <target ref="id3034"/>
            <label kind="guard">EUs_ExecuteNext(12)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3030()</label>
        </transition>
        <transition>
            <source ref="id3034"/>
            <target ref="id3038"/>
            <label kind="guard">EUs_ExecuteNext(13)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3034()</label>
        </transition>
        <transition>
            <source ref="id3038"/>
            <target ref="id3144"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(14)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3038()</label>
        </transition>
        <transition>
            <source ref="id3000"/>
            <target ref="id3004"/>
            <label kind="guard">EUs_ExecuteNext(0)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3000()</label>
        </transition>
        <transition>
            <source ref="id3004"/>
            <target ref="id3008"/>
            <label kind="guard">EUs_ExecuteNext(1)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3004()</label>
        </transition>
        <transition>
            <source ref="id3008"/>
            <target ref="id300c"/>
            <label kind="guard">EUs_ExecuteNext(2)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3008()</label>
        </transition>
        <transition>
            <source ref="id300c"/>
            <target ref="id3010"/>
            <label kind="guard">EUs_ExecuteNext(3)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_300c()</label>
        </transition>
        <transition>
            <source ref="id3010"/>
            <target ref="id3014"/>
            <label kind="guard">EUs_ExecuteNext(4)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3010()</label>
        </transition>
        <transition>
            <source ref="id3014"/>
            <target ref="id3018"/>
            <label kind="guard">EUs_ExecuteNext(5)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3014()</label>
        </transition>
        <transition>
            <source ref="id3018"/>
            <target ref="id301c"/>
            <label kind="guard">!true &amp;&amp;
EUs_ExecuteNext(6)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3018()</label>
        </transition>
    </template>
    <template>
        <name>sched</name>
        <location id="id0" x="0" y="102" color="#ffc0cb">
            <name x="17" y="93">end</name>
            <committed/>
        </location>
        <location id="id1" x="0" y="0"/>
        <location id="id2" x="-34" y="102">
            <urgent/>
        </location>
        <init ref="id2"/>
        <transition>
            <source ref="id1"/>
            <target ref="id0"/>
            <label kind="synchronisation" x="17" y="34">_doTerminate?</label>
            <label kind="assignment" x="17" y="51">_clock = 0</label>
        </transition>
        <transition>
            <source ref="id1"/>
            <target ref="id1"/>
            <label kind="synchronisation" x="-59" y="-59">_do?</label>
            <nail x="0" y="-102"/>
            <nail x="34" y="-102"/>
            <nail x="34" y="0"/>
        </transition>
        <transition>
            <source ref="id2"/>
            <target ref="id1"/>
            <label kind="synchronisation" x="-144" y="25">_doInitialize!</label>
            <label kind="assignment" x="-144" y="42">_Init(),
_clock = 0</label>
            <nail x="-34" y="0"/>
        </transition>
    </template>
    <template>
        <name>Flash_Memory</name>
        <location id="id3" x="0" y="-102"/>
        <location id="id4" x="-102" y="204">
            <urgent/>
        </location>
        <location id="id5" x="-68" y="102"/>
        <location id="id6" x="-34" y="0">
            <label kind="invariant" x="-280" y="-25">Flash_clock &lt;= FLASH_LATENCY</label>
        </location>
        <init ref="id4"/>
        <transition>
            <source ref="id3"/>
            <target ref="id6"/>
            <label kind="guard" x="17" y="-93">Flash.burst_index != FLASH_BURST_MAX -1</label>
            <label kind="synchronisation" x="17" y="-76">Flash_doneBurst[Flash.burst_index]!</label>
            <label kind="assignment" x="17" y="-59">IMU_FillBuffer_Update(),
Flash.burst_index++,
Flash_clock = 0</label>
            <nail x="0" y="0"/>
        </transition>
        <transition>
            <source ref="id4"/>
            <target ref="id5"/>
            <label kind="synchronisation" x="-212" y="136">_doInitialize?</label>
            <label kind="assignment" x="-212" y="153">Flash_Init()</label>
            <nail x="-102" y="102"/>
        </transition>
        <transition>
            <source ref="id5"/>
            <target ref="id6"/>
            <label kind="guard" x="-246" y="8">!Flash_IsTerminated()</label>
            <label kind="synchronisation" x="-246" y="25">Flash_doBurst?</label>
            <label kind="assignment" x="-246" y="42">IMU_FillBuffer_Set(),
Flash.burst_index = 0,
Flash_clock = 0</label>
            <nail x="-68" y="0"/>
        </transition>
        <transition>
            <source ref="id3"/>
            <target ref="id5"/>
            <label kind="guard" x="17" y="17">Flash.burst_index == FLASH_BURST_MAX -1</label>
            <label kind="synchronisation" x="17" y="34">Flash_doneBurst[Flash.burst_index]!</label>
            <label kind="assignment" x="17" y="51">IMU_FillBuffer_Update(),
IMU_ICache_Update()</label>
            <nail x="0" y="102"/>
        </transition>
        <transition>
            <source ref="id6"/>
            <target ref="id3"/>
            <label kind="guard" x="-289" y="-85">Flash_clock == FLASH_LATENCY</label>
            <label kind="synchronisation" x="-289" y="-68">EUs_doStep?</label>
            <nail x="-34" y="-102"/>
        </transition>
    </template>
    <template>
        <name>Static_RAM</name>
        <location id="id7" x="136" y="306">
            <urgent/>
        </location>
        <location id="id8" x="170" y="204"/>
        <location id="id9" x="204" y="102">
            <label kind="invariant" x="221" y="110">SRAM_clock &lt;= SRAM_LATENCY</label>
        </location>
        <init ref="id7"/>
        <transition>
            <source ref="id7"/>
            <target ref="id8"/>
            <label kind="synchronisation" x="25" y="238">_doInitialize?</label>
            <label kind="assignment" x="25" y="255">SRAM_Init()</label>
            <nail x="136" y="289"/>
            <nail x="136" y="204"/>
        </transition>
        <transition>
            <source ref="id8"/>
            <target ref="id9"/>
            <label kind="guard" x="-34" y="110">!SRAM_IsTerminated() &amp;&amp;
SRAM_IsAccessed()</label>
            <label kind="synchronisation" x="-34" y="144">EUs_doStep?</label>
            <label kind="assignment" x="-34" y="161">SRAM_clock = 0,
SRAM.executing = true</label>
            <nail x="170" y="102"/>
        </transition>
        <transition>
            <source ref="id9"/>
            <target ref="id8"/>
            <label kind="guard" x="221" y="144">SRAM_clock == SRAM_LATENCY</label>
            <label kind="synchronisation" x="221" y="161">EUs_doStep?</label>
            <label kind="assignment" x="221" y="178">SRAM.executing = false</label>
            <nail x="204" y="204"/>
        </transition>
    </template>
    <template>
        <name>Instruction_Memory_Unit</name>
        <location id="id10" x="-612" y="-102"/>
        <location id="id11" x="-782" y="-102"/>
        <location id="id12" x="-646" y="0">
            <label kind="invariant" x="-629" y="17">IMU_clock &lt;= 1</label>
        </location>
        <location id="id13" x="-816" y="0"/>
        <location id="id14" x="-850" y="102"/>
        <location id="id15" x="-884" y="204">
            <urgent/>
        </location>
        <init ref="id15"/>
        <transition>
            <source ref="id10"/>
            <target ref="id12"/>
            <label kind="synchronisation" x="-595" y="-68">IMU_doneAccess!</label>
            <label kind="assignment" x="-595" y="-51">IMU_clock = 0</label>
            <nail x="-612" y="0"/>
        </transition>
        <transition>
            <source ref="id12"/>
            <target ref="id14"/>
            <label kind="guard" x="-629" y="51">IMU_clock == 1</label>
            <label kind="synchronisation" x="-629" y="68">EUs_doStep?</label>
            <nail x="-646" y="102"/>
        </transition>
        <transition>
            <source ref="id11"/>
            <target ref="id10"/>
            <label kind="synchronisation" x="-765" y="-144">Flash_doneBurst[0]?</label>
            <label kind="assignment" x="-765" y="-127">IMU_clock = 0</label>
        </transition>
        <transition>
            <source ref="id13"/>
            <target ref="id11"/>
            <label kind="guard" x="-969" y="-76">IMU_ICache_Miss()</label>
            <label kind="synchronisation" x="-969" y="-59">Flash_doBurst!</label>
            <label kind="assignment" x="-969" y="-42">_M_ICacheMiss++</label>
            <nail x="-816" y="-102"/>
        </transition>
        <transition>
            <source ref="id13"/>
            <target ref="id12"/>
            <label kind="guard" x="-799" y="-42">IMU_ICache_Hit() ||
IMU_FillBuffer_Hit()</label>
            <label kind="synchronisation" x="-799" y="8">IMU_doneAccess!</label>
            <label kind="assignment" x="-799" y="25">IMU_clock = 0,
_M_ICacheHit++</label>
        </transition>
        <transition>
            <source ref="id14"/>
            <target ref="id13"/>
            <label kind="guard" x="-1020" y="25">!IMU_IsTerminated()</label>
            <label kind="synchronisation" x="-1020" y="42">IMU_doAccess?</label>
            <label kind="assignment" x="-1020" y="59">IMU_Set()</label>
            <nail x="-850" y="0"/>
        </transition>
        <transition>
            <source ref="id15"/>
            <target ref="id14"/>
            <label kind="synchronisation" x="-994" y="136">_doInitialize?</label>
            <label kind="assignment" x="-994" y="153">IMU_Init()</label>
            <nail x="-884" y="102"/>
        </transition>
    </template>
    <template>
        <name>Instruction_and_Control_Unit</name>
        <location id="id16" x="272" y="68">
            <urgent/>
        </location>
        <location id="id17" x="340" y="-136"/>
        <location id="id18" x="306" y="-34"/>
        <init ref="id16"/>
        <transition>
            <source ref="id16"/>
            <target ref="id18"/>
            <label kind="synchronisation" x="161" y="0">_doInitialize?</label>
            <label kind="assignment" x="161" y="17">InCU_Init()</label>
            <nail x="272" y="-34"/>
        </transition>
        <transition>
            <source ref="id17"/>
            <target ref="id18"/>
            <label kind="synchronisation" x="357" y="-102">IMU_doneAccess?</label>
            <label kind="assignment" x="357" y="-85">InCU_Update()</label>
            <nail x="340" y="-34"/>
        </transition>
        <transition>
            <source ref="id18"/>
            <target ref="id17"/>
            <label kind="guard" x="110" y="-110">!InCU_IsTerminated() &amp;&amp;
!InCU_IBuff_IsFull()</label>
            <label kind="synchronisation" x="110" y="-76">IMU_doAccess!</label>
            <nail x="306" y="-136"/>
        </transition>
    </template>
    <template>
        <name x="5" y="5">Execution_Units</name>
        <location id="id19" x="238" y="102"/>
        <location id="id20" x="204" y="102">
            <urgent/>
        </location>
        <location id="id21" x="238" y="0">
            <label kind="invariant" x="102" y="-25">EUs_clock  &lt;= 1</label>
        </location>
        <init ref="id20"/>
        <transition>
            <source ref="id20"/>
            <target ref="id21"/>
            <label kind="synchronisation" x="59" y="25">_doInitialize?</label>
            <label kind="assignment" x="59" y="42">EUs_Init(),
EUs_clock  = 0</label>
            <nail x="204" y="0"/>
        </transition>
        <transition>
            <source ref="id21"/>
            <target ref="id19"/>
            <label kind="guard" x="255" y="34">EUs_IsTerminated()</label>
            <label kind="synchronisation" x="255" y="51">_doTerminate!</label>
        </transition>
        <transition>
            <source ref="id21"/>
            <target ref="id21"/>
            <label kind="guard" x="289" y="-93">!EUs_IsTerminated() &amp;&amp;
EUs_clock == 1</label>
            <label kind="synchronisation" x="289" y="-59">EUs_doStep!</label>
            <label kind="assignment" x="289" y="-42">EUs_Update(),
EUs_clock  = 0</label>
            <nail x="238" y="-102"/>
            <nail x="272" y="-102"/>
            <nail x="272" y="0"/>
        </transition>
    </template>
    <system>system
    sched
  , Flash_Memory
  , Static_RAM
  , Instruction_Memory_Unit
  , Instruction_and_Control_Unit
  , Execution_Units
  , Binary
  ;
</system>
    <queries>
        <query>
            <formula>A&lt;&gt; sched.end
			</formula>
            <comment>...
			</comment>
        </query>
        <query>
            <formula>sup: _clock
			</formula>
            <comment>...
			</comment>
        </query>
    </queries>
</nta>
