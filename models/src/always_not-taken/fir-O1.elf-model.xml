<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
    <declaration>/* TODO:
 *  - data struct for _Stack
 *  - capitalize _DATA, _INSTS &amp; _BSS
 *  - microbench for memory access time
 *  - set proper values for _Inst_t.cycles
 *  - should remove '_do'?
 */

//////////////////////////////////////////
////////////////// Types and Constants: //
//////////////////////////////////////////

/* NOTE: This is the opt. template. */

const bool MONITORING = false;
const bool BACKWARD_TAKEN = false;
const bool DYNAMIC_PRED = false;

/* Binary: */

const int _UINT1_MAX  =           1;
const int _UINT2_MAX  =           3;
const int _UINT3_MAX  =           7;
const int _UINT4_MAX  =          15;
const int _UINT5_MAX  =          31;
const int _UINT8_MAX  =         255;
const int _UINT16_MAX =       65535;
const int _UINT32_MAX =  2147483647; // not 4294967295 because of UPPAAL internal limitation...
typedef int[0, _UINT1_MAX ] uint1_t;
typedef int[0, _UINT2_MAX ] uint2_t;
typedef int[0, _UINT3_MAX ] uint3_t;
typedef int[0, _UINT4_MAX ] uint4_t;
typedef int[0, _UINT5_MAX ] uint5_t;
typedef int[0, _UINT8_MAX ] uint8_t;
typedef int[0, _UINT16_MAX] uint16_t;
typedef int[0, _UINT32_MAX] uint32_t;

const int _SINT8_MIN =         -128;
const int _SINT8_MAX =          127;
const int _SINT16_MIN =      -32768;
const int _SINT16_MAX =       32767;
const int _SINT32_MIN = -2147483648;
const int _SINT32_MAX =  2147483647;
typedef int[_SINT8_MIN, _SINT8_MAX] sint8_t;
typedef int[_SINT16_MIN, _SINT16_MAX] sint16_t;
typedef int[_SINT32_MIN, _SINT32_MAX] sint32_t;

const int  _REGS_MAX  =  8;
const int _CYCLES_MAX =  1; // Arbitrary.
const int _STACK_MAX  = 10; // Arbitrary.
const int  _INST_MAX  = 116;
const int  _DATA_MAX  = 5828;
const int   _BSS_MAX  = 1;

typedef struct {
  int  addr;
  int[-1,_CYCLES_MAX]  cycles;
  bool do_branch;
  int[0,_INST_MAX] target;
  bool do_memory;
  uint8_t  read_regs[_REGS_MAX];
  uint8_t  write_regs[_REGS_MAX];
} _Inst_t;
const uint8_t _EMPTY_REGS[_REGS_MAX] = { 0, 0, 0, 0, 0, 0, 0, 0 };
const _Inst_t _EMPTY_INST            = { 0, 0, false, 0, false, _EMPTY_REGS, _EMPTY_REGS };

typedef struct {
  int incorrectly_predicted_not_taken;
  int incorrectly_predicted_taken;
  int correctly_predicted_not_taken;
  int correctly_predicted_taken;
  int incorrect_target;
} _M_Pred_t;
const _M_Pred_t _M_EMPTY_PRED = { 0, 0, 0, 0, 0 };

/* Flash: */

const int FLASH_LATENCY   = 10; // TODO: arbitrary; to set correctly
const int FLASH_BURST_MAX =  4;
typedef struct {
  int[0, FLASH_BURST_MAX] burst_index;
} Flash_t;

/* Static RAM (SRAM): */

const int SRAM_LATENCY = -1 + 10; // TODO: arbitrary; to set correctly
typedef struct {
  bool executing;
} SRAM_t;

/* Instruction Memory Unit (IMU): */

const int IMU_WAYS_MAX              =  2;
const int IMU_SETS_MAX              = 64;
const int IMU_FILLBUFFER_DWORDS_MAX =  4;

/*
const int IMU_FIRST_USED_SET = (_INSTS[           0].addr / 32) % IMU_SETS_MAX; // First 'in-use-at-run-time' set
const int IMU_LAST_USED_SET  = (_INSTS[_INST_MAX -1].addr / 32) % IMU_SETS_MAX; // Last  'in-use-at-run-time' set
const int IMU_USED_SETS_MAX  = IMU_LAST_USED_SET - IMU_FIRST_USED_SET +1;       // Number of 'used' sets
*/
const int IMU_USED_SETS_MAX = IMU_SETS_MAX;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[0, IMU_WAYS_MAX -1] rp_way;
  int tags[IMU_WAYS_MAX][IMU_USED_SETS_MAX]; // TODO: set a range as [-1, ???]
} IMU_ICache_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1, IMU_FILLBUFFER_DWORDS_MAX -1] dword;
  int[-1, IMU_SETS_MAX -1] set;
  int tag; // TODO: set a range as [-1, ???]
  bool filled[IMU_FILLBUFFER_DWORDS_MAX];
} IMU_FillBuffer_t;
const IMU_FillBuffer_t IMU_EMPTY_FILLBUFFER_LINE = { -1, -1, -1, -1, { false, false, false, false } };

typedef struct {
  IMU_FillBuffer_t FillBuffer;
  IMU_ICache_t ICache;
} IMU_t;

const int IMU_CACHE_HIT       = 0;
const int IMU_FILLBUFFER_HIT  = 1;
const int IMU_FILLBUFFER_MISS = 2;
const int IMU_CACHE_MISS      = 3;

/* Instruction and Control Unit (InCU): */

const int INCU_STRONGLY_NOT_TAKEN = 0;
const int INCU_WEAKLY___NOT_TAKEN = 1;
const int INCU_WEAKLY_______TAKEN = 2;
const int INCU_STRONGLY_____TAKEN = 3;
typedef struct {
  int[-1, _INST_MAX -1] index;
//int[-1, _INST_MAX -1] target;
  int[-1, INCU_STRONGLY_____TAKEN +1] prediction;
} InCU_BTB_Entry_t;
const InCU_BTB_Entry_t INCU_EMPTY_BTB_ENTRY = { -1, /*-1,*/ INCU_STRONGLY_NOT_TAKEN };

const int INCU_BTB_MAX = 8;
typedef struct {
  int[0, 8] top;
  InCU_BTB_Entry_t buffer[INCU_BTB_MAX];
} InCU_BTB_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_PC_t;
const InCU_PC_t INCU_EMPTY_PC = { -1, -1, false, false, false };

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IBuff_Entry_t;
const InCU_IBuff_Entry_t INCU_EMPTY_IBUFF_ENTRY = { -1, -1, false, false, false };

const int INCU_IBUFF_MAX = 8;
typedef struct {
  int[0, INCU_IBUFF_MAX] count;
  InCU_IBuff_Entry_t buffer[INCU_IBUFF_MAX];
} InCU_IBuff_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IR_t;
const InCU_IR_t INCU_EMPTY_IR = { -1, -1, false, false, false };

typedef struct {
  InCU_BTB_t BTB;
  InCU_PC_t PC;
  InCU_IBuff_t IBuff;
  InCU_IR_t IR;
} InCU_t;

/* Execution Units (EUs): */

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1,_CYCLES_MAX] cycles;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} EUs_Pipeline_Stage_t;
const EUs_Pipeline_Stage_t EUS_EMPTY_PIPELINE_STAGE = { -1, -1, false, false, false };

const int EUS_PIPELINE_D   = 0;
const int EUS_PIPELINE_E   = 1;
const int EUS_PIPELINE_M   = 2;
const int EUS_PIPELINE_W   = 3;
const int EUS_PIPELINE_MAX = 4;
const int EUS_CYCLES_MAX   = 5; // TODO: arbitrary; set properly
typedef struct {
  EUs_Pipeline_Stage_t pipeline[EUS_PIPELINE_MAX];
} EUs_t;

//////////////////////////////////////////
///////////////////////// Declarations: //
//////////////////////////////////////////

/* (global:) */

clock _clock;

broadcast chan _doInitialize;
   urgent chan _doTerminate;
   urgent chan _do;

bool _mustTerminate;
int[-1,  _INST_MAX -1] _Stack[_STACK_MAX];
int[ 0, _STACK_MAX   ] _stack_top;

_M_Pred_t _M_StaticPred;
_M_Pred_t _M_DynamicPred;
uint32_t  _M_BTBOverwriting;
uint32_t  _M_ICacheMiss;
uint32_t  _M_ICacheHit;
uint32_t  _M_IBuffPop;
uint32_t  _M_IBuffFlush;
uint32_t  _M_IBuffFlushedInst;
uint32_t  _M_ExecutedInst;

/* Binary: */

sint32_t CTR ,XER;

const int _CR_MAX = 2;
const int[-1, _CR_MAX] IndCR[8] = { 0, -1, -1, -1, -1, -1, -1, 1 };
uint4_t CR[_CR_MAX];

const uint3_t cr0 = 0;
const uint3_t cr7 = 7;


const int _GPRS_MAX = 18;
sint32_t GPRS[_GPRS_MAX];

const uint3_t r0 = 0;
const uint5_t r1 = 1;
const uint5_t r3 = 2;
const uint5_t r4 = 3;
const uint5_t r5 = 4;
const uint5_t r6 = 5;
const uint5_t r7 = 6;
const uint5_t r8 = 7;
const uint5_t r9 = 8;
const uint5_t r10 = 9;
const uint5_t r11 = 10;
const uint5_t r12 = 11;
const uint5_t r26 = 12;
const uint5_t r27 = 13;
const uint5_t r28 = 14;
const uint5_t r29 = 15;
const uint5_t r30 = 16;
const uint5_t r31 = 17;


const int _RETS_MAX = 2;
      int[-1, _INST_MAX -32] _Rets[_RETS_MAX] = { -1, -1 };
const int[-1, _RETS_MAX] IndRets[_INST_MAX -32] = {
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
  -1, -1, -1, -1
};

const _Inst_t _INSTS[_INST_MAX] = {

  /* BB0 */
  /*  3000: stwu r1,-32(r1)          - 0 */ { 12288, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3004: stw r27,12(r1)           - 1 */ { 12292, 1, false, _INST_MAX, true,  {   2,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3008: stw r31,28(r1)           - 2 */ { 12296, 1, false, _INST_MAX, true,  { 224,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  300c: addi r31,r7,1            - 3 */ { 12300, 1, false, _INST_MAX, false, {   0,   0,   0,  32,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3010: srawi r31,r31,1          - 4 */ { 12304, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   8,   0 } },
  /*  3014: rlwinm r27,r5,2,0,29     - 5 */ { 12308, 1, false, _INST_MAX, false, {   0,   0,   0,   8,   0,   0,   0,   0 }, {   2,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3018: addi r27,r27,-4          - 6 */ { 12312, 1, false, _INST_MAX, false, {   2,   0,   0,   0,   0,   0,   0,   0 }, {   2,   0,   0,   0,   0,   0,   0,   0 } },
  /*  301c: add r27,r3,r27           - 7 */ { 12316, 1, false, _INST_MAX, false, {   2,   0,   0,   2,   0,   0,   0,   0 }, {   2,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3020: rlwinm r12,r31,2,0,29    - 8 */ { 12320, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   4,   0,   0,   0,   0,   0 } },
  /*  3024: addi r12,r12,-4          - 9 */ { 12324, 1, false, _INST_MAX, false, {   0,   0,   4,   0,   0,   0,   0,   0 }, {   0,   0,   4,   0,   0,   0,   0,   0 } },
  /*  3028: add r12,r3,r12           - 10 */ { 12328, 1, false, _INST_MAX, false, {   0,   0,   4,   2,   0,   0,   0,   0 }, {   0,   0,   4,   0,   0,   0,   0,   0 } },
  /*  302c: cmpwi cr7,r5,0           - 11 */ { 12332, 1, false, _INST_MAX, false, {   0,   0,   0,   8,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3030: ble- cr7,30d8            - 12 */ { 12336, 1, true,         54, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB1 */
  /*  3034: stw r26,8(r1)            - 13 */ { 12340, 1, false, _INST_MAX, true,  {   1,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3038: stw r28,16(r1)           - 14 */ { 12344, 1, false, _INST_MAX, true,  {   4,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  303c: stw r29,20(r1)           - 15 */ { 12348, 1, false, _INST_MAX, true,  {   8,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3040: addi r28,r4,-4           - 16 */ { 12352, 1, false, _INST_MAX, false, {   0,   0,   0,   4,   0,   0,   0,   0 }, {   4,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3044: li r29,0                 - 17 */ { 12356, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   8,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3048: b 3068                   - 18 */ { 12360, 1, true,         26, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB2 */
  /*  304c: addi r31,r31,-1          - 19 */ { 12364, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3050: mr r6,r26                - 20 */ { 12368, 1, false, _INST_MAX, false, {   1,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  16,   0,   0,   0,   0 } },
  /*  3054: b 305c                   - 21 */ { 12372, 1, true,         23, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB3 */
  /*  3058: addi r12,r12,4           - 22 */ { 12376, 1, false, _INST_MAX, false, {   0,   0,   4,   0,   0,   0,   0,   0 }, {   0,   0,   4,   0,   0,   0,   0,   0 } },

  /* BB4 */
  /*  305c: addi r29,r29,1           - 23 */ { 12380, 1, false, _INST_MAX, false, {   8,   0,   0,   0,   0,   0,   0,   0 }, {   8,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3060: cmpw cr7,r5,r29          - 24 */ { 12384, 1, false, _INST_MAX, false, {   8,   0,   0,   8,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  3064: beq- cr7,30cc            - 25 */ { 12388, 1, true,         51, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB5 */
  /*  3068: addi r26,r6,4            - 26 */ { 12392, 1, false, _INST_MAX, false, {   0,   0,   0,  16,   0,   0,   0,   0 }, {   1,   0,   0,   0,   0,   0,   0,   0 } },
  /*  306c: lwz r10,0(r6)            - 27 */ { 12396, 1, false, _INST_MAX, true,  {   0,   0,   0,  16,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3070: lwz r9,0(r12)            - 28 */ { 12400, 1, false, _INST_MAX, true,  {   0,   0,   4,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3074: mullw r10,r10,r9         - 29 */ { 12404, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3078: cmpwi cr7,r31,1          - 30 */ { 12408, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  307c: ble- cr7,30ac            - 31 */ { 12412, 1, true,         43, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB6 */
  /*  3080: mr r11,r6                - 32 */ { 12416, 1, false, _INST_MAX, false, {   0,   0,   0,  16,   0,   0,   0,   0 }, {   0,   0,   2,   0,   0,   0,   0,   0 } },
  /*  3084: mr r3,r12                - 33 */ { 12420, 1, false, _INST_MAX, false, {   0,   0,   4,   0,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  3088: li r4,1                  - 34 */ { 12424, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   4,   0,   0,   0,   0 } },
  /*  308c: subf r9,r4,r31           - 35 */ { 12428, 1, false, _INST_MAX, false, { 224,   0,   0,   4,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  3090: mtspr 120,r9             - 36 */ { 12432, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   2 } },

  /* BB7 */
  /*  3094: lwzu r9,4(r11)           - 37 */ { 12436, 1, false, _INST_MAX, true,  {   0,   0,   2,   0,   0,   0,   0,   0 }, {   0,   0,   2, 128,   0,   0,   0,   0 } },
  /*  3098: lwzu r0,-4(r3)           - 38 */ { 12440, 1, false, _INST_MAX, true,  {   0,   0,   0,   2,   0,   0,   0,   0 }, {   0,   0,   0,   2,  64,   0,   0,   0 } },
  /*  309c: mullw r9,r9,r0           - 39 */ { 12444, 1, false, _INST_MAX, false, {   0,   0,   0, 128,  64,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  30a0: add r10,r10,r9           - 40 */ { 12448, 1, false, _INST_MAX, false, {   0,   0,   1, 128,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  30a4: addi r4,r4,1             - 41 */ { 12452, 1, false, _INST_MAX, false, {   0,   0,   0,   4,   0,   0,   0,   0 }, {   0,   0,   0,   4,   0,   0,   0,   0 } },
  /*  30a8: bdnz+ 3094               - 42 */ { 12456, 1, true,         37, false, {   0,   0,   0,   0,   0,   0,   0, 130 }, {   0,   0,   0,   0,   0,   0,   0, 130 } },

  /* BB8 */
  /*  30ac: divw r10,r10,r8          - 43 */ { 12460, 1, false, _INST_MAX, false, {   0,   0,   1,  64,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  30b0: stwu r10,4(r28)          - 44 */ { 12464, 1, false, _INST_MAX, true,  {   4,   0,   1,   0,   0,   0,   0,   0 }, {   4,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30b4: cmplw cr7,r27,r12        - 45 */ { 12468, 1, false, _INST_MAX, false, {   2,   0,   4,   0,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  30b8: beq+ cr7,304c            - 46 */ { 12472, 1, true,         19, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB9 */
  /*  30bc: cmpw cr7,r7,r31          - 47 */ { 12476, 1, false, _INST_MAX, false, { 224,   0,   0,  32,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0, 128,   0,   0 } },
  /*  30c0: ble+ cr7,3058            - 48 */ { 12480, 1, true,         22, false, {   0,   0,   0,   0,   0, 128,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB10 */
  /*  30c4: addi r31,r31,1           - 49 */ { 12484, 1, false, _INST_MAX, false, { 224,   0,   0,   0,   0,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30c8: b 3058                   - 50 */ { 12488, 1, true,         22, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB11 */
  /*  30cc: lwz r26,8(r1)            - 51 */ { 12492, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   1,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30d0: lwz r28,16(r1)           - 52 */ { 12496, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   4,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30d4: lwz r29,20(r1)           - 53 */ { 12500, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   8,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB12 */
  /*  30d8: lwz r27,12(r1)           - 54 */ { 12504, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   2,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30dc: lwz r31,28(r1)           - 55 */ { 12508, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, { 224,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30e0: addi r1,r1,32            - 56 */ { 12512, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  30e4: bclr- 20,lt              - 57 */ { 12516, 1, true,  _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB13 */
  /*  30e8: stwu r1,-2896(r1)        - 58 */ { 12520, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  30ec: mfspr r0,100             - 59 */ { 12524, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  30f0: stw r0,2900(r1)          - 60 */ { 12528, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 192,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30f4: stw r30,2888(r1)         - 61 */ { 12532, 1, false, _INST_MAX, true,  {  16,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  30f8: bcl- 20,4*cr7+so,30f8    - 62 */ { 12536, 1, true,         63, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB14 */
  /*  30fc: mfspr r30,100            - 63 */ { 12540, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3100: addis r30,r30,1          - 64 */ { 12544, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3104: addi r30,r30,-26576      - 65 */ { 12548, 1, false, _INST_MAX, false, {  16,   0,   0,   0,   0,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3108: lwz r3,-32768(r30)       - 66 */ { 12552, 1, false, _INST_MAX, true,  {  16,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  310c: li r8,285                - 67 */ { 12556, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3110: li r7,35                 - 68 */ { 12560, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3114: mr r6,r3                 - 69 */ { 12564, 1, false, _INST_MAX, false, {   0,   0,   0,   2,   0,   0,   0,   0 }, {   0,   0,   0,  16,   0,   0,   0,   0 } },
  /*  3118: li r5,700                - 70 */ { 12568, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   8,   0,   0,   0,   0 } },
  /*  311c: addi r4,r1,8             - 71 */ { 12572, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   4,   0,   0,   0,   0 } },
  /*  3120: addi r3,r3,144           - 72 */ { 12576, 1, false, _INST_MAX, false, {   0,   0,   0,   2,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  3124: bl 3000                  - 73 */ { 12580, 1, true,          0, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB15 */
  /*  3128: li r3,0                  - 74 */ { 12584, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  312c: lwz r0,2900(r1)          - 75 */ { 12588, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  3130: mtspr 100,r0             - 76 */ { 12592, 1, false, _INST_MAX, false, {   0,   0,   0,   0,  64,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,  32 } },
  /*  3134: lwz r30,2888(r1)         - 77 */ { 12596, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {  16,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3138: addi r1,r1,2896          - 78 */ { 12600, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  313c: bclr- 20,lt              - 79 */ { 12604, 1, true,  _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },

  /* BB16 */
  /*  3140: lis r1,0                 - 80 */ { 12608, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3144: ori r1,r1,0              - 81 */ { 12612, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3148: bl 30e8                  - 82 */ { 12616, 1, true,         58, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB17 */
  /*  314c: b 314c                   - 83 */ { 12620, 1, true,         83, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* Nops */
  /*  xxxx: ---                      - 84 */ { 12624, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 85 */ { 12628, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 86 */ { 12632, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 87 */ { 12636, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 88 */ { 12640, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 89 */ { 12644, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 90 */ { 12648, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 91 */ { 12652, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 92 */ { 12656, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 93 */ { 12660, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 94 */ { 12664, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 95 */ { 12668, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 96 */ { 12672, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 97 */ { 12676, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 98 */ { 12680, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 99 */ { 12684, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 100 */ { 12688, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 101 */ { 12692, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 102 */ { 12696, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 103 */ { 12700, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 104 */ { 12704, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 105 */ { 12708, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 106 */ { 12712, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 107 */ { 12716, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 108 */ { 12720, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 109 */ { 12724, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 110 */ { 12728, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 111 */ { 12732, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 112 */ { 12736, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 113 */ { 12740, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 114 */ { 12744, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 115 */ { 12748, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } }
};

const uint32_t _DATA_ADDR = 12904;
const sint8_t  _DATA[_DATA_MAX] = {
  /* 0 */   -1,   -1,   -1,   -2, /* 4 */    0,    0,    0,    1, /* 8 */    0,    0,    0,    4, /* 12 */    0,    0,    0,    3, 
  /* 16 */   -1,   -1,   -1,   -2, /* 20 */   -1,   -1,   -1,   -4, /* 24 */    0,    0,    0,    2, /* 28 */    0,    0,    0,    7, 
  /* 32 */    0,    0,    0,    0, /* 36 */   -1,   -1,   -1,   -9, /* 40 */   -1,   -1,   -1,   -4, /* 44 */    0,    0,    0,   12, 
  /* 48 */    0,    0,    0,   11, /* 52 */   -1,   -1,   -1,  -14, /* 56 */   -1,   -1,   -1,  -26, /* 60 */    0,    0,    0,   15, 
  /* 64 */    0,    0,    0,   89, /* 68 */    0,    0,    0,  127, /* 72 */    0,    0,    0,   89, /* 76 */    0,    0,    0,   15, 
  /* 80 */   -1,   -1,   -1,  -26, /* 84 */   -1,   -1,   -1,  -14, /* 88 */    0,    0,    0,   11, /* 92 */    0,    0,    0,   12, 
  /* 96 */   -1,   -1,   -1,   -4, /* 100 */   -1,   -1,   -1,   -9, /* 104 */    0,    0,    0,    0, /* 108 */    0,    0,    0,    7, 
  /* 112 */    0,    0,    0,    2, /* 116 */   -1,   -1,   -1,   -4, /* 120 */   -1,   -1,   -1,   -2, /* 124 */    0,    0,    0,    3, 
  /* 128 */    0,    0,    0,    4, /* 132 */    0,    0,    0,    1, /* 136 */   -1,   -1,   -1,   -2, /* 140 */    0,    0,    0,    0, 
  /* 144 */    0,    0,    0,    0, /* 148 */    0,    0,    0,    0, /* 152 */    0,    0,    0,    0, /* 156 */    0,    0,    0,    0, 
  /* 160 */    0,    0,    0,  127, /* 164 */    0,    0,    0,  121, /* 168 */    0,    0,    0,  114, /* 172 */    0,    0,    0,  121, 
  /* 176 */    0,    0,    0,   13, /* 180 */    0,    0,    0,   13, /* 184 */    0,    0,    0,    0, /* 188 */    0,    0,    0,    3, 
  /* 192 */    0,    0,    0,    5, /* 196 */    0,    0,    0,    2, /* 200 */    0,    0,    0,    3, /* 204 */    0,    0,    0,  127, 
  /* 208 */    0,    0,    0,  127, /* 212 */    0,    0,    0,    2, /* 216 */    0,    0,    0,  126, /* 220 */    0,    0,    0,    0, 
  /* 224 */    0,    0,    0,    1, /* 228 */    0,    0,    0,  126, /* 232 */    0,    0,    0,    1, /* 236 */    0,    0,    0,    1, 
  /* 240 */    0,    0,    0,  127, /* 244 */    0,    0,    0,    0, /* 248 */    0,    0,    0,  127, /* 252 */    0,    0,    0,    0, 
  /* 256 */    0,    0,    0,    2, /* 260 */    0,    0,    0,    1, /* 264 */    0,    0,    0,    1, /* 268 */    0,    0,    0,    3, 
  /* 272 */    0,    0,    0,    1, /* 276 */    0,    0,    0,  127, /* 280 */    0,    0,    0,    1, /* 284 */    0,    0,    0,    0, 
  /* 288 */    0,    0,    0,    1, /* 292 */    0,    0,    0,    1, /* 296 */    0,    0,    0,  125, /* 300 */    0,    0,    0,  123, 
  /* 304 */    0,    0,    0,  115, /* 308 */    0,    0,    0,  106, /* 312 */    0,    0,    0,  119, /* 316 */    0,    0,    0,   16, 
  /* 320 */    0,    0,    0,   14, /* 324 */    0,    0,    0,    1, /* 328 */    0,    0,    0,    5, /* 332 */    0,    0,    0,    5, 
  /* 336 */    0,    0,    0,    5, /* 340 */    0,    0,    0,    5, /* 344 */    0,    0,    0,  125, /* 348 */    0,    0,    0,    0, 
  /* 352 */    0,    0,    0,    2, /* 356 */    0,    0,    0,  125, /* 360 */    0,    0,    0,    0, /* 364 */    0,    0,    0,    0, 
  /* 368 */    0,    0,    0,  126, /* 372 */    0,    0,    0,    1, /* 376 */    0,    0,    0,  126, /* 380 */    0,    0,    0,  127, 
  /* 384 */    0,    0,    0,    3, /* 388 */    0,    0,    0,  124, /* 392 */    0,    0,    0,  126, /* 396 */    0,    0,    0,    6, 
  /* 400 */    0,    0,    0,    0, /* 404 */    0,    0,    0,  126, /* 408 */    0,    0,    0,    3, /* 412 */    0,    0,    0,    2, 
  /* 416 */    0,    0,    0,  127, /* 420 */    0,    0,    0,  126, /* 424 */    0,    0,    0,  127, /* 428 */    0,    0,    0,    2, 
  /* 432 */    0,    0,    0,    1, /* 436 */    0,    0,    0,  127, /* 440 */    0,    0,    0,    1, /* 444 */    0,    0,    0,    1, 
  /* 448 */    0,    0,    0,    0, /* 452 */    0,    0,    0,    3, /* 456 */    0,    0,    0,    0, /* 460 */    0,    0,    0,  127, 
  /* 464 */    0,    0,    0,    2, /* 468 */    0,    0,    0,    0, /* 472 */    0,    0,    0,  127, /* 476 */    0,    0,    0,    3, 
  /* 480 */    0,    0,    0,    1, /* 484 */    0,    0,    0,    0, /* 488 */    0,    0,    0,    0, /* 492 */    0,    0,    0,  125, 
  /* 496 */    0,    0,    0,    0, /* 500 */    0,    0,    0,    3, /* 504 */    0,    0,    0,    0, /* 508 */    0,    0,    0,  126, 
  /* 512 */    0,    0,    0,  127, /* 516 */    0,    0,    0,    2, /* 520 */    0,    0,    0,    1, /* 524 */    0,    0,    0,  126, 
  /* 528 */    0,    0,    0,    0, /* 532 */    0,    0,    0,    3, /* 536 */    0,    0,    0,  127, /* 540 */    0,    0,    0,  125, 
  /* 544 */    0,    0,    0,    1, /* 548 */    0,    0,    0,    1, /* 552 */    0,    0,    0,    1, /* 556 */    0,    0,    0,  127, 
  /* 560 */    0,    0,    0,    0, /* 564 */    0,    0,    0,    5, /* 568 */    0,    0,    0,    0, /* 572 */    0,    0,    0,  127, 
  /* 576 */    0,    0,    0,    2, /* 580 */    0,    0,    0,  126, /* 584 */    0,    0,    0,  127, /* 588 */    0,    0,    0,    2, 
  /* 592 */    0,    0,    0,    1, /* 596 */    0,    0,    0,    0, /* 600 */    0,    0,    0,  126, /* 604 */    0,    0,    0,    0, 
  /* 608 */    0,    0,    0,    5, /* 612 */    0,    0,    0,    0, /* 616 */    0,    0,    0,  127, /* 620 */    0,    0,    0,    0, 
  /* 624 */    0,    0,    0,  126, /* 628 */    0,    0,    0,    1, /* 632 */    0,    0,    0,    0, /* 636 */    0,    0,    0,  125, 
  /* 640 */    0,    0,    0,    1, /* 644 */    0,    0,    0,    3, /* 648 */    0,    0,    0,  127, /* 652 */    0,    0,    0,    0, 
  /* 656 */    0,    0,    0,    0, /* 660 */    0,    0,    0,  126, /* 664 */    0,    0,    0,    2, /* 668 */    0,    0,    0,    3, 
  /* 672 */    0,    0,    0,  126, /* 676 */    0,    0,    0,  125, /* 680 */    0,    0,    0,  114, /* 684 */    0,    0,    0,  104, 
  /* 688 */    0,    0,    0,  113, /* 692 */    0,    0,    0,    5, /* 696 */    0,    0,    0,   12, /* 700 */    0,    0,    0,    7, 
  /* 704 */    0,    0,    0,    2, /* 708 */    0,    0,    0,    6, /* 712 */    0,    0,    0,   13, /* 716 */    0,    0,    0,    5, 
  /* 720 */    0,    0,    0,  125, /* 724 */    0,    0,    0,    3, /* 728 */    0,    0,    0,    2, /* 732 */    0,    0,    0,  127, 
  /* 736 */    0,    0,    0,    0, /* 740 */    0,    0,    0,  121, /* 744 */    0,    0,    0,  122, /* 748 */    0,    0,    0,    3, 
  /* 752 */    0,    0,    0,  126, /* 756 */    0,    0,    0,  125, /* 760 */    0,    0,    0,    0, /* 764 */    0,    0,    0,  125, 
  /* 768 */    0,    0,    0,    2, /* 772 */    0,    0,    0,    1, /* 776 */    0,    0,    0,  125, /* 780 */    0,    0,    0,    8, 
  /* 784 */    0,    0,    0,    3, /* 788 */    0,    0,    0,  124, /* 792 */    0,    0,    0,    6, /* 796 */    0,    0,    0,    0, 
  /* 800 */    0,    0,    0,  122, /* 804 */    0,    0,    0,    6, /* 808 */    0,    0,    0,    2, /* 812 */    0,    0,    0,  124, 
  /* 816 */    0,    0,    0,    3, /* 820 */    0,    0,    0,  126, /* 824 */    0,    0,    0,  121, /* 828 */    0,    0,    0,    6, 
  /* 832 */    0,    0,    0,    5, /* 836 */    0,    0,    0,  116, /* 840 */    0,    0,    0,  127, /* 844 */    0,    0,    0,   13, 
  /* 848 */    0,    0,    0,  122, /* 852 */    0,    0,    0,  120, /* 856 */    0,    0,    0,    6, /* 860 */    0,    0,    0,    5, 
  /* 864 */    0,    0,    0,    1, /* 868 */    0,    0,    0,    0, /* 872 */    0,    0,    0,  125, /* 876 */    0,    0,    0,    1, 
  /* 880 */    0,    0,    0,    4, /* 884 */    0,    0,    0,  124, /* 888 */    0,    0,    0,  127, /* 892 */    0,    0,    0,    3, 
  /* 896 */    0,    0,    0,  127, /* 900 */    0,    0,    0,    5, /* 904 */    0,    0,    0,    3, /* 908 */    0,    0,    0,  122, 
  /* 912 */    0,    0,    0,    6, /* 916 */    0,    0,    0,   10, /* 920 */    0,    0,    0,  118, /* 924 */    0,    0,    0,  124, 
  /* 928 */    0,    0,    0,   10, /* 932 */    0,    0,    0,  124, /* 936 */    0,    0,    0,  127, /* 940 */    0,    0,    0,    6, 
  /* 944 */    0,    0,    0,  121, /* 948 */    0,    0,    0,    3, /* 952 */    0,    0,    0,   12, /* 956 */    0,    0,    0,  117, 
  /* 960 */    0,    0,    0,  120, /* 964 */    0,    0,    0,   10, /* 968 */    0,    0,    0,    0, /* 972 */    0,    0,    0,  121, 
  /* 976 */    0,    0,    0,    3, /* 980 */    0,    0,    0,  126, /* 984 */    0,    0,    0,  124, /* 988 */    0,    0,    0,    6, 
  /* 992 */    0,    0,    0,    0, /* 996 */    0,    0,    0,  121, /* 1000 */    0,    0,    0,    2, /* 1004 */    0,    0,    0,  126, 
  /* 1008 */    0,    0,    0,  127, /* 1012 */    0,    0,    0,    6, /* 1016 */    0,    0,    0,  118, /* 1020 */    0,    0,    0,  127, 
  /* 1024 */    0,    0,    0,   13, /* 1028 */    0,    0,    0,  121, /* 1032 */    0,    0,    0,  127, /* 1036 */    0,    0,    0,    6, 
  /* 1040 */    0,    0,    0,  121, /* 1044 */    0,    0,    0,    6, /* 1048 */    0,    0,    0,    3, /* 1052 */    0,    0,    0,  113, 
  /* 1056 */    0,    0,    0,    6, /* 1060 */    0,    0,    0,   10, /* 1064 */    0,    0,    0,  115, /* 1068 */    0,    0,    0,  127, 
  /* 1072 */    0,    0,    0,   10, /* 1076 */    0,    0,    0,    0, /* 1080 */    0,    0,    0,  127, /* 1084 */    0,    0,    0,  122, 
  /* 1088 */    0,    0,    0,  124, /* 1092 */    0,    0,    0,   10, /* 1096 */    0,    0,    0,    0, /* 1100 */    0,    0,    0,  117, 
  /* 1104 */    0,    0,    0,  127, /* 1108 */    0,    0,    0,   12, /* 1112 */    0,    0,    0,   10, /* 1116 */    0,    0,    0,  124, 
  /* 1120 */    0,    0,    0,  121, /* 1124 */    0,    0,    0,    9, /* 1128 */    0,    0,    0,   13, /* 1132 */    0,    0,    0,  125, 
  /* 1136 */    0,    0,    0,  122, /* 1140 */    0,    0,    0,    5, /* 1144 */    0,    0,    0,   11, /* 1148 */    0,    0,    0,   10, 
  /* 1152 */    0,    0,    0,  121, /* 1156 */    0,    0,    0,  124, /* 1160 */    0,    0,    0,   22, /* 1164 */    0,    0,    0,    3, 
  /* 1168 */    0,    0,    0,  114, /* 1172 */    0,    0,    0,   13, /* 1176 */    0,    0,    0,    7, /* 1180 */    0,    0,    0,  121, 
  /* 1184 */    0,    0,    0,   12, /* 1188 */    0,    0,    0,    7, /* 1192 */    0,    0,    0,  122, /* 1196 */    0,    0,    0,   11, 
  /* 1200 */    0,    0,    0,    7, /* 1204 */    0,    0,    0,  122, /* 1208 */    0,    0,    0,   10, /* 1212 */    0,    0,    0,    7, 
  /* 1216 */    0,    0,    0,  121, /* 1220 */    0,    0,    0,   10, /* 1224 */    0,    0,    0,    5, /* 1228 */    0,    0,    0,  117, 
  /* 1232 */    0,    0,    0,    6, /* 1236 */    0,    0,    0,    5, /* 1240 */    0,    0,    0,  121, /* 1244 */    0,    0,    0,    5, 
  /* 1248 */    0,    0,    0,    6, /* 1252 */    0,    0,    0,    1, /* 1256 */    0,    0,    0,    6, /* 1260 */    0,    0,    0,    0, 
  /* 1264 */    0,    0,    0,  122, /* 1268 */    0,    0,    0,    2, /* 1272 */    0,    0,    0,    7, /* 1276 */    0,    0,    0,    3, 
  /* 1280 */    0,    0,    0,  125, /* 1284 */    0,    0,    0,    1, /* 1288 */    0,    0,    0,   10, /* 1292 */    0,    0,    0,    7, 
  /* 1296 */    0,    0,    0,    2, /* 1300 */    0,    0,    0,  127, /* 1304 */    0,    0,    0,  127, /* 1308 */    0,    0,    0,    9, 
  /* 1312 */    0,    0,    0,    7, /* 1316 */    0,    0,    0,  121, /* 1320 */    0,    0,    0,  121, /* 1324 */    0,    0,    0,    6, 
  /* 1328 */    0,    0,    0,    8, /* 1332 */    0,    0,    0,  125, /* 1336 */    0,    0,    0,  122, /* 1340 */    0,    0,    0,    6, 
  /* 1344 */    0,    0,    0,   12, /* 1348 */    0,    0,    0,    6, /* 1352 */    0,    0,    0,  125, /* 1356 */    0,    0,    0,  127, 
  /* 1360 */    0,    0,    0,   13, /* 1364 */    0,    0,    0,    7, /* 1368 */    0,    0,    0,  121, /* 1372 */    0,    0,    0,    1, 
  /* 1376 */    0,    0,    0,    6, /* 1380 */    0,    0,    0,  127, /* 1384 */    0,    0,    0,  127, /* 1388 */    0,    0,    0,    2, 
  /* 1392 */    0,    0,    0,    3, /* 1396 */    0,    0,    0,    1, /* 1400 */    0,    0,    0,  126, /* 1404 */    0,    0,    0,    1, 
  /* 1408 */    0,    0,    0,    1, /* 1412 */    0,    0,    0,  125, /* 1416 */    0,    0,    0,    1, /* 1420 */    0,    0,    0,    0, 
  /* 1424 */    0,    0,    0,  125, /* 1428 */    0,    0,    0,    6, /* 1432 */    0,    0,    0,    3, /* 1436 */    0,    0,    0,  125, 
  /* 1440 */    0,    0,    0,    5, /* 1444 */    0,    0,    0,    7, /* 1448 */    0,    0,    0,  127, /* 1452 */    0,    0,    0,  124, 
  /* 1456 */    0,    0,    0,    1, /* 1460 */    0,    0,    0,    6, /* 1464 */    0,    0,    0,    6, /* 1468 */    0,    0,    0,  124, 
  /* 1472 */    0,    0,    0,  122, /* 1476 */    0,    0,    0,    7, /* 1480 */    0,    0,    0,   10, /* 1484 */    0,    0,    0,    0, 
  /* 1488 */    0,    0,    0,  120, /* 1492 */    0,    0,    0,    1, /* 1496 */    0,    0,    0,    8, /* 1500 */    0,    0,    0,    0, 
  /* 1504 */    0,    0,    0,  121, /* 1508 */    0,    0,    0,  122, /* 1512 */    0,    0,    0,    4, /* 1516 */    0,    0,    0,   10, 
  /* 1520 */    0,    0,    0,    0, /* 1524 */    0,    0,    0,  120, /* 1528 */    0,    0,    0,    1, /* 1532 */    0,    0,    0,    6, 
  /* 1536 */    0,    0,    0,  122, /* 1540 */    0,    0,    0,  117, /* 1544 */    0,    0,    0,  122, /* 1548 */    0,    0,    0,    0, 
  /* 1552 */    0,    0,    0,    0, /* 1556 */    0,    0,    0,  121, /* 1560 */    0,    0,    0,  118, /* 1564 */    0,    0,    0,  127, 
  /* 1568 */    0,    0,    0,    7, /* 1572 */    0,    0,    0,    0, /* 1576 */    0,    0,    0,  122, /* 1580 */    0,    0,    0,  125, 
  /* 1584 */    0,    0,    0,    2, /* 1588 */    0,    0,    0,    4, /* 1592 */    0,    0,    0,  124, /* 1596 */    0,    0,    0,  122, 
  /* 1600 */    0,    0,    0,    2, /* 1604 */    0,    0,    0,    5, /* 1608 */    0,    0,    0,  124, /* 1612 */    0,    0,    0,  122, 
  /* 1616 */    0,    0,    0,  125, /* 1620 */    0,    0,    0,  127, /* 1624 */    0,    0,    0,    0, /* 1628 */    0,    0,    0,  120, 
  /* 1632 */    0,    0,    0,  117, /* 1636 */    0,    0,    0,  127, /* 1640 */    0,    0,    0,    0, /* 1644 */    0,    0,    0,  121, 
  /* 1648 */    0,    0,    0,  120, /* 1652 */    0,    0,    0,  121, /* 1656 */    0,    0,    0,    1, /* 1660 */    0,    0,    0,    3, 
  /* 1664 */    0,    0,    0,  121, /* 1668 */    0,    0,    0,  121, /* 1672 */    0,    0,    0,    0, /* 1676 */    0,    0,    0,    0, 
  /* 1680 */    0,    0,    0,  127, /* 1684 */    0,    0,    0,  127, /* 1688 */    0,    0,    0,  121, /* 1692 */    0,    0,    0,  127, 
  /* 1696 */    0,    0,    0,    2, /* 1700 */    0,    0,    0,  122, /* 1704 */    0,    0,    0,  124, /* 1708 */    0,    0,    0,  125, 
  /* 1712 */    0,    0,    0,  124, /* 1716 */    0,    0,    0,  127, /* 1720 */    0,    0,    0,  125, /* 1724 */    0,    0,    0,  121, 
  /* 1728 */    0,    0,    0,  125, /* 1732 */    0,    0,    0,    0, /* 1736 */    0,    0,    0,  121, /* 1740 */    0,    0,    0,  122, 
  /* 1744 */    0,    0,    0,  124, /* 1748 */    0,    0,    0,  125, /* 1752 */    0,    0,    0,    0, /* 1756 */    0,    0,    0,  125, 
  /* 1760 */    0,    0,    0,  125, /* 1764 */    0,    0,    0,    0, /* 1768 */    0,    0,    0,    0, /* 1772 */    0,    0,    0,    0, 
  /* 1776 */    0,    0,    0,    0, /* 1780 */    0,    0,    0,  125, /* 1784 */    0,    0,    0,  125, /* 1788 */    0,    0,    0,    0, 
  /* 1792 */    0,    0,    0,  125, /* 1796 */    0,    0,    0,  126, /* 1800 */    0,    0,    0,    0, /* 1804 */    0,    0,    0,  126, 
  /* 1808 */    0,    0,    0,    3, /* 1812 */    0,    0,    0,    3, /* 1816 */    0,    0,    0,  125, /* 1820 */    0,    0,    0,    1, 
  /* 1824 */    0,    0,    0,    5, /* 1828 */    0,    0,    0,    0, /* 1832 */    0,    0,    0,  126, /* 1836 */    0,    0,    0,  125, 
  /* 1840 */    0,    0,    0,  127, /* 1844 */    0,    0,    0,    3, /* 1848 */    0,    0,    0,  125, /* 1852 */    0,    0,    0,  121, 
  /* 1856 */    0,    0,    0,    1, /* 1860 */    0,    0,    0,    2, /* 1864 */    0,    0,    0,  125, /* 1868 */    0,    0,    0,  127, 
  /* 1872 */    0,    0,    0,    1, /* 1876 */    0,    0,    0,    0, /* 1880 */    0,    0,    0,    0, /* 1884 */    0,    0,    0,  127, 
  /* 1888 */    0,    0,    0,  127, /* 1892 */    0,    0,    0,  126, /* 1896 */    0,    0,    0,  127, /* 1900 */    0,    0,    0,    0, 
  /* 1904 */    0,    0,    0,  127, /* 1908 */    0,    0,    0,    0, /* 1912 */    0,    0,    0,  124, /* 1916 */    0,    0,    0,  125, 
  /* 1920 */    0,    0,    0,    0, /* 1924 */    0,    0,    0,  121, /* 1928 */    0,    0,    0,  120, /* 1932 */    0,    0,    0,  124, 
  /* 1936 */    0,    0,    0,  124, /* 1940 */    0,    0,    0,  123, /* 1944 */    0,    0,    0,  123, /* 1948 */    0,    0,    0,  125, 
  /* 1952 */    0,    0,    0,  127, /* 1956 */    0,    0,    0,    0, /* 1960 */    0,    0,    0,    0, /* 1964 */    0,    0,    0,  127, 
  /* 1968 */    0,    0,    0,    0, /* 1972 */    0,    0,    0,    1, /* 1976 */    0,    0,    0,    2, /* 1980 */    0,    0,    0,    0, 
  /* 1984 */    0,    0,    0,  127, /* 1988 */    0,    0,    0,    0, /* 1992 */    0,    0,    0,    0, /* 1996 */    0,    0,    0,    0, 
  /* 2000 */    0,    0,    0,  127, /* 2004 */    0,    0,    0,  126, /* 2008 */    0,    0,    0,    0, /* 2012 */    0,    0,    0,    0, 
  /* 2016 */    0,    0,    0,  127, /* 2020 */    0,    0,    0,    0, /* 2024 */    0,    0,    0,    2, /* 2028 */    0,    0,    0,    1, 
  /* 2032 */    0,    0,    0,    2, /* 2036 */    0,    0,    0,    6, /* 2040 */    0,    0,    0,    5, /* 2044 */    0,    0,    0,    3, 
  /* 2048 */    0,    0,    0,    6, /* 2052 */    0,    0,    0,    8, /* 2056 */    0,    0,    0,    5, /* 2060 */    0,    0,    0,    2, 
  /* 2064 */    0,    0,    0,    1, /* 2068 */    0,    0,    0,    1, /* 2072 */    0,    0,    0,    3, /* 2076 */    0,    0,    0,    0, 
  /* 2080 */    0,    0,    0,  125, /* 2084 */    0,    0,    0,  127, /* 2088 */    0,    0,    0,    0, /* 2092 */    0,    0,    0,  127, 
  /* 2096 */    0,    0,    0,  126, /* 2100 */    0,    0,    0,    0, /* 2104 */    0,    0,    0,    2, /* 2108 */    0,    0,    0,    3, 
  /* 2112 */    0,    0,    0,    2, /* 2116 */    0,    0,    0,    1, /* 2120 */    0,    0,    0,    2, /* 2124 */    0,    0,    0,    3, 
  /* 2128 */    0,    0,    0,    1, /* 2132 */    0,    0,    0,  124, /* 2136 */    0,    0,    0,  125, /* 2140 */    0,    0,    0,    0, 
  /* 2144 */    0,    0,    0,    0, /* 2148 */    0,    0,    0,  126, /* 2152 */    0,    0,    0,  124, /* 2156 */    0,    0,    0,  127, 
  /* 2160 */    0,    0,    0,    1, /* 2164 */    0,    0,    0,    0, /* 2168 */    0,    0,    0,  126, /* 2172 */    0,    0,    0,  124, 
  /* 2176 */    0,    0,    0,  127, /* 2180 */    0,    0,    0,    1, /* 2184 */    0,    0,    0,    0, /* 2188 */    0,    0,    0,  126, 
  /* 2192 */    0,    0,    0,  127, /* 2196 */    0,    0,    0,    2, /* 2200 */    0,    0,    0,    3, /* 2204 */    0,    0,    0,    1, 
  /* 2208 */    0,    0,    0,    0, /* 2212 */    0,    0,    0,    4, /* 2216 */    0,    0,    0,    6, /* 2220 */    0,    0,    0,    5, 
  /* 2224 */    0,    0,    0,    6, /* 2228 */    0,    0,    0,    7, /* 2232 */    0,    0,    0,   10, /* 2236 */    0,    0,    0,   10, 
  /* 2240 */    0,    0,    0,    4, /* 2244 */    0,    0,    0,    2, /* 2248 */    0,    0,    0,    5, /* 2252 */    0,    0,    0,    8, 
  /* 2256 */    0,    0,    0,    9, /* 2260 */    0,    0,    0,    8, /* 2264 */    0,    0,    0,    7, /* 2268 */    0,    0,    0,   12, 
  /* 2272 */    0,    0,    0,   20, /* 2276 */    0,    0,    0,   20, /* 2280 */    0,    0,    0,   16, /* 2284 */    0,    0,    0,   14, 
  /* 2288 */    0,    0,    0,   20, /* 2292 */    0,    0,    0,   21, /* 2296 */    0,    0,    0,   15, /* 2300 */    0,    0,    0,    9, 
  /* 2304 */    0,    0,    0,    7, /* 2308 */    0,    0,    0,    4, /* 2312 */    0,    0,    0,  126, /* 2316 */    0,    0,    0,  118, 
  /* 2320 */    0,    0,    0,  100, /* 2324 */    0,    0,    0,   65, /* 2328 */    0,    0,    0,   72, /* 2332 */    0,    0,    0,  125, 
  /* 2336 */    0,    0,    0,  108, /* 2340 */    0,    0,    0,   61, /* 2344 */    0,    0,    0,  103, /* 2348 */    0,    0,    0,   16, 
  /* 2352 */    0,    0,    0,    6, /* 2356 */    0,    0,    0,  125, /* 2360 */    0,    0,    0,  117, /* 2364 */    0,    0,    0,    7, 
  /* 2368 */    0,    0,    0,   29, /* 2372 */    0,    0,    0,    0, /* 2376 */    0,    0,    0,  108, /* 2380 */    0,    0,    0,    2, 
  /* 2384 */    0,    0,    0,  125, /* 2388 */    0,    0,    0,  120, /* 2392 */    0,    0,    0,  119, /* 2396 */    0,    0,    0,  111, 
  /* 2400 */    0,    0,    0,  119, /* 2404 */    0,    0,    0,    1, /* 2408 */    0,    0,    0,    0, /* 2412 */    0,    0,    0,    2, 
  /* 2416 */    0,    0,    0,    7, /* 2420 */    0,    0,    0,   10, /* 2424 */    0,    0,    0,   28, /* 2428 */    0,    0,    0,   28, 
  /* 2432 */    0,    0,    0,   23, /* 2436 */    0,    0,    0,   35, /* 2440 */    0,    0,    0,   47, /* 2444 */    0,    0,    0,   65, 
  /* 2448 */    0,    0,    0,   67, /* 2452 */    0,    0,    0,   79, /* 2456 */    0,    0,    0,   85, /* 2460 */    0,    0,    0,   88, 
  /* 2464 */    0,    0,    0,  126, /* 2468 */    0,    0,    0,    2, /* 2472 */    0,    0,    0,   76, /* 2476 */    0,    0,    0,   16, 
  /* 2480 */    0,    0,    0,  105, /* 2484 */    0,    0,    0,   44, /* 2488 */    0,    0,    0,   13, /* 2492 */    0,    0,    0,  116, 
  /* 2496 */    0,    0,    0,   42, /* 2500 */    0,    0,    0,  116, /* 2504 */    0,    0,    0,   99, /* 2508 */    0,    0,    0,   41, 
  /* 2512 */    0,    0,    0,  124, /* 2516 */    0,    0,    0,   94, /* 2520 */    0,    0,    0,   33, /* 2524 */    0,    0,    0,   53, 
  /* 2528 */    0,    0,    0,   70, /* 2532 */    0,    0,    0,   36, /* 2536 */    0,    0,    0,  103, /* 2540 */    0,    0,    0,   53, 
  /* 2544 */    0,    0,    0,   60, /* 2548 */    0,    0,    0,   60, /* 2552 */    0,    0,    0,   38, /* 2556 */    0,    0,    0,   38, 
  /* 2560 */    0,    0,    0,   47, /* 2564 */    0,    0,    0,   71, /* 2568 */    0,    0,    0,  100, /* 2572 */    0,    0,    0,    4, 
  /* 2576 */    0,    0,    0,   19, /* 2580 */    0,    0,    0,   24, /* 2584 */    0,    0,    0,   39, /* 2588 */    0,    0,    0,   43, 
  /* 2592 */    0,    0,    0,   48, /* 2596 */    0,    0,    0,   27, /* 2600 */    0,    0,    0,  127, /* 2604 */    0,    0,    0,  120, 
  /* 2608 */    0,    0,    0,  114, /* 2612 */    0,    0,    0,  104, /* 2616 */    0,    0,    0,   92, /* 2620 */    0,    0,    0,   90, 
  /* 2624 */    0,    0,    0,  104, /* 2628 */    0,    0,    0,  124, /* 2632 */    0,    0,    0,    3, /* 2636 */    0,    0,    0,   13, 
  /* 2640 */    0,    0,    0,   38, /* 2644 */    0,    0,    0,   65, /* 2648 */    0,    0,    0,   81, /* 2652 */    0,    0,    0,   90, 
  /* 2656 */    0,    0,    0,  106, /* 2660 */    0,    0,    0,  108, /* 2664 */    0,    0,    0,   84, /* 2668 */    0,    0,    0,  120, 
  /* 2672 */    0,    0,    0,    9, /* 2676 */    0,    0,    0,   69, /* 2680 */    0,    0,    0,  121, /* 2684 */    0,    0,    0,   31, 
  /* 2688 */    0,    0,    0,   11, /* 2692 */    0,    0,    0,   46, /* 2696 */    0,    0,    0,   96, /* 2700 */    0,    0,    0,   11, 
  /* 2704 */    0,    0,    0,  102, /* 2708 */    0,    0,    0,  127, /* 2712 */    0,    0,    0,  104, /* 2716 */    0,    0,    0,  119, 
  /* 2720 */    0,    0,    0,   78, /* 2724 */    0,    0,    0,   70, /* 2728 */    0,    0,    0,   74, /* 2732 */    0,    0,    0,   59, 
  /* 2736 */    0,    0,    0,   18, /* 2740 */    0,    0,    0,   91, /* 2744 */    0,    0,    0,   55, /* 2748 */    0,    0,    0,   49, 
  /* 2752 */    0,    0,    0,   33, /* 2756 */    0,    0,    0,   11, /* 2760 */    0,    0,    0,   18, /* 2764 */    0,    0,    0,   46, 
  /* 2768 */    0,    0,    0,   87, /* 2772 */    0,    0,    0,  126, /* 2776 */    0,    0,    0,   25, /* 2780 */    0,    0,    0,   34, 
  /* 2784 */    0,    0,    0,   43, /* 2788 */    0,    0,    0,   63, /* 2792 */    0,    0,    0,   58, /* 2796 */    0,    0,    0,   37, 
  /* 2800 */    0,    0,    0,   11, /* 2804 */    0,    0,    0,  121, /* 2808 */    0,    0,    0,  113, /* 2812 */    0,    0,    0,  104, 
  /* 2816 */    0,    0,    0,   97, /* 2820 */    0,    0,    0,   92, /* 2824 */    0,    0,    0,  102, /* 2828 */    0,    0,    0,  114, 
  /* 2832 */    0,    0,    0,    6, /* 2836 */    0,    0,    0,   22, /* 2840 */    0,    0,    0,   41, /* 2844 */    0,    0,    0,   65, 
  /* 2848 */    0,    0,    0,   94, /* 2852 */    0,    0,    0,  109, /* 2856 */    0,    0,    0,  102, /* 2860 */    0,    0,    0,   96, 
  /* 2864 */    0,    0,    0,  110, /* 2868 */    0,    0,    0,   23, /* 2872 */    0,    0,    0,   72, /* 2876 */    0,    0,    0,   54, 
  /* 2880 */    0,    0,    0,   18, /* 2884 */    0,    0,    0,   23, /* 2888 */    0,    0,    0,   47, /* 2892 */    0,    0,    0,   99, 
  /* 2896 */    0,    0,    0,  120, /* 2900 */    0,    0,    0,   92, /* 2904 */    0,    0,    0,  119, /* 2908 */    0,    0,    0,  108, 
  /* 2912 */    0,    0,    0,  117, /* 2916 */    0,    0,    0,   65, /* 2920 */    0,    0,    0,   73, /* 2924 */    0,    0,    0,   79, 
  /* 2928 */    0,    0,    0,   59, /* 2932 */    0,    0,    0,   11, /* 2936 */    0,    0,    0,   84, /* 2940 */    0,    0,    0,   55, 
  /* 2944 */    0,    0,    0,    0, /* 2948 */    0,    0,    0,    3, /* 2952 */   -1,   -1,   -1,   -6, /* 2956 */   -1,   -1,   -1,   -3, 
  /* 2960 */    0,    0,    0,   29, /* 2964 */    0,    0,    0,   88, /* 2968 */    0,    0,    0, -119, /* 2972 */    0,    0,    0, -121, 
  /* 2976 */    0,    0,    0,   86, /* 2980 */    0,    0,    0,   32, /* 2984 */    0,    0,    0,    7, /* 2988 */    0,    0,    0,    7, 
  /* 2992 */    0,    0,    0,    4, /* 2996 */   -1,   -1,   -1,   -7, /* 3000 */    0,    0,    0,    0, /* 3004 */    0,    0,    0,   40, 
  /* 3008 */    0,    0,    0,   91, /* 3012 */    0,    0,    0,  107, /* 3016 */    0,    0,    0,   79, /* 3020 */    0,    0,    0,   43, 
  /* 3024 */    0,    0,    0,   33, /* 3028 */    0,    0,    0,   45, /* 3032 */    0,    0,    0,   48, /* 3036 */    0,    0,    0,   39, 
  /* 3040 */    0,    0,    0,   39, /* 3044 */    0,    0,    0,   55, /* 3048 */    0,    0,    0,   71, /* 3052 */    0,    0,    0,   66, 
  /* 3056 */    0,    0,    0,   39, /* 3060 */    0,    0,    0,    8, /* 3064 */   -1,   -1,   -1,  -12, /* 3068 */   -1,   -1,   -1,  -11, 
  /* 3072 */    0,    0,    0,   13, /* 3076 */    0,    0,    0,   46, /* 3080 */    0,    0,    0,   59, /* 3084 */    0,    0,    0,   37, 
  /* 3088 */    0,    0,    0,    0, /* 3092 */   -1,   -1,   -1,   -8, /* 3096 */    0,    0,    0,   29, /* 3100 */    0,    0,    0,   89, 
  /* 3104 */    0,    0,    0, -125, /* 3108 */    0,    0,    0, -121, /* 3112 */    0,    0,    0,  111, /* 3116 */    0,    0,    0,   78, 
  /* 3120 */    0,    0,    0,   47, /* 3124 */    0,    0,    0,   18, /* 3128 */   -1,   -1,   -1,   -1, /* 3132 */   -1,   -1,   -1,   -5, 
  /* 3136 */    0,    0,    0,    4, /* 3140 */    0,    0,    0,   21, /* 3144 */    0,    0,    0,   35, /* 3148 */    0,    0,    0,   45, 
  /* 3152 */    0,    0,    0,   49, /* 3156 */    0,    0,    0,   47, /* 3160 */    0,    0,    0,   41, /* 3164 */    0,    0,    0,   38, 
  /* 3168 */    0,    0,    0,   42, /* 3172 */    0,    0,    0,   54, /* 3176 */    0,    0,    0,   72, /* 3180 */    0,    0,    0,   88, 
  /* 3184 */    0,    0,    0,   95, /* 3188 */    0,    0,    0,   90, /* 3192 */    0,    0,    0,   79, /* 3196 */    0,    0,    0,   70, 
  /* 3200 */    0,    0,    0,   65, /* 3204 */    0,    0,    0,   50, /* 3208 */    0,    0,    0,   27, /* 3212 */    0,    0,    0,   23, 
  /* 3216 */    0,    0,    0,   55, /* 3220 */    0,    0,    0,  105, /* 3224 */    0,    0,    0,  123, /* 3228 */    0,    0,    0,   89, 
  /* 3232 */    0,    0,    0,   47, /* 3236 */    0,    0,    0,   36, /* 3240 */    0,    0,    0,   48, /* 3244 */    0,    0,    0,   42, 
  /* 3248 */    0,    0,    0,    8, /* 3252 */   -1,   -1,   -1,  -10, /* 3256 */    0,    0,    0,    7, /* 3260 */    0,    0,    0,   36, 
  /* 3264 */    0,    0,    0,   49, /* 3268 */    0,    0,    0,   47, /* 3272 */    0,    0,    0,   51, /* 3276 */    0,    0,    0,   50, 
  /* 3280 */    0,    0,    0,   30, /* 3284 */    0,    0,    0,    4, /* 3288 */    0,    0,    0,    7, /* 3292 */    0,    0,    0,   35, 
  /* 3296 */    0,    0,    0,   51, /* 3300 */    0,    0,    0,   33, /* 3304 */    0,    0,    0,   14, /* 3308 */    0,    0,    0,   30, 
  /* 3312 */    0,    0,    0,   74, /* 3316 */    0,    0,    0,   97, /* 3320 */    0,    0,    0,   75, /* 3324 */    0,    0,    0,   33, 
  /* 3328 */    0,    0,    0,   14, /* 3332 */    0,    0,    0,   34, /* 3336 */    0,    0,    0,   73, /* 3340 */    0,    0,    0,   94, 
  /* 3344 */    0,    0,    0,   77, /* 3348 */    0,    0,    0,   37, /* 3352 */    0,    0,    0,   11, /* 3356 */    0,    0,    0,   24, 
  /* 3360 */    0,    0,    0,   50, /* 3364 */    0,    0,    0,   51, /* 3368 */    0,    0,    0,   21, /* 3372 */    0,    0,    0,    5, 
  /* 3376 */    0,    0,    0,   41, /* 3380 */    0,    0,    0,  100, /* 3384 */    0,    0,    0,  118, /* 3388 */    0,    0,    0,   77, 
  /* 3392 */    0,    0,    0,   22, /* 3396 */    0,    0,    0,    9, /* 3400 */    0,    0,    0,   38, /* 3404 */    0,    0,    0,   55, 
  /* 3408 */    0,    0,    0,   35, /* 3412 */    0,    0,    0,   11, /* 3416 */    0,    0,    0,   21, /* 3420 */    0,    0,    0,   60, 
  /* 3424 */    0,    0,    0,   82, /* 3428 */    0,    0,    0,   64, /* 3432 */    0,    0,    0,   35, /* 3436 */    0,    0,    0,   29, 
  /* 3440 */    0,    0,    0,   45, /* 3444 */    0,    0,    0,   54, /* 3448 */    0,    0,    0,   45, /* 3452 */    0,    0,    0,   36, 
  /* 3456 */    0,    0,    0,   41, /* 3460 */    0,    0,    0,   50, /* 3464 */    0,    0,    0,   44, /* 3468 */    0,    0,    0,   33, 
  /* 3472 */    0,    0,    0,   43, /* 3476 */    0,    0,    0,   80, /* 3480 */    0,    0,    0,  123, /* 3484 */    0,    0,    0, -115, 
  /* 3488 */    0,    0,    0,  115, /* 3492 */    0,    0,    0,   71, /* 3496 */    0,    0,    0,   34, /* 3500 */    0,    0,    0,   15, 
  /* 3504 */    0,    0,    0,    7, /* 3508 */   -1,   -1,   -1,   -1, /* 3512 */    0,    0,    0,    0, /* 3516 */    0,    0,    0,   19, 
  /* 3520 */    0,    0,    0,   45, /* 3524 */    0,    0,    0,   54, /* 3528 */    0,    0,    0,   43, /* 3532 */    0,    0,    0,   35, 
  /* 3536 */    0,    0,    0,   50, /* 3540 */    0,    0,    0,   78, /* 3544 */    0,    0,    0,   92, /* 3548 */    0,    0,    0,   85, 
  /* 3552 */    0,    0,    0,   79, /* 3556 */    0,    0,    0,   85, /* 3560 */    0,    0,    0,   92, /* 3564 */    0,    0,    0,   80, 
  /* 3568 */    0,    0,    0,   52, /* 3572 */    0,    0,    0,   32, /* 3576 */    0,    0,    0,   34, /* 3580 */    0,    0,    0,   50, 
  /* 3584 */    0,    0,    0,   56, /* 3588 */    0,    0,    0,   47, /* 3592 */    0,    0,    0,   37, /* 3596 */    0,    0,    0,   42, 
  /* 3600 */    0,    0,    0,   53, /* 3604 */    0,    0,    0,   50, /* 3608 */    0,    0,    0,   35, /* 3612 */    0,    0,    0,   31, 
  /* 3616 */    0,    0,    0,   54, /* 3620 */    0,    0,    0,   87, /* 3624 */    0,    0,    0,   96, /* 3628 */    0,    0,    0,   76, 
  /* 3632 */    0,    0,    0,   49, /* 3636 */    0,    0,    0,   45, /* 3640 */    0,    0,    0,   64, /* 3644 */    0,    0,    0,   87, 
  /* 3648 */    0,    0,    0,  103, /* 3652 */    0,    0,    0,  103, /* 3656 */    0,    0,    0,   76, /* 3660 */    0,    0,    0,   33, 
  /* 3664 */    0,    0,    0,    4, /* 3668 */    0,    0,    0,    8, /* 3672 */    0,    0,    0,   32, /* 3676 */    0,    0,    0,   48, 
  /* 3680 */    0,    0,    0,   44, /* 3684 */    0,    0,    0,   51, /* 3688 */    0,    0,    0,   78, /* 3692 */    0,    0,    0,   97, 
  /* 3696 */    0,    0,    0,   86, /* 3700 */    0,    0,    0,   57, /* 3704 */    0,    0,    0,   38, /* 3708 */    0,    0,    0,   38, 
  /* 3712 */    0,    0,    0,   43, /* 3716 */    0,    0,    0,   46, /* 3720 */    0,    0,    0,   56, /* 3724 */    0,    0,    0,   74, 
  /* 3728 */    0,    0,    0,   87, /* 3732 */    0,    0,    0,   88, /* 3736 */    0,    0,    0,   92, /* 3740 */    0,    0,    0,   95, 
  /* 3744 */    0,    0,    0,   80, /* 3748 */    0,    0,    0,   49, /* 3752 */    0,    0,    0,   29, /* 3756 */    0,    0,    0,   49, 
  /* 3760 */    0,    0,    0,   88, /* 3764 */    0,    0,    0,   93, /* 3768 */    0,    0,    0,   55, /* 3772 */    0,    0,    0,   22, 
  /* 3776 */    0,    0,    0,   35, /* 3780 */    0,    0,    0,   85, /* 3784 */    0,    0,    0,  113, /* 3788 */    0,    0,    0,   86, 
  /* 3792 */    0,    0,    0,   40, /* 3796 */    0,    0,    0,   24, /* 3800 */    0,    0,    0,   48, /* 3804 */    0,    0,    0,   81, 
  /* 3808 */    0,    0,    0,   96, /* 3812 */    0,    0,    0,   92, /* 3816 */    0,    0,    0,   82, /* 3820 */    0,    0,    0,   79, 
  /* 3824 */    0,    0,    0,   84, /* 3828 */    0,    0,    0,   94, /* 3832 */    0,    0,    0,   98, /* 3836 */    0,    0,    0,   87, 
  /* 3840 */    0,    0,    0,   69, /* 3844 */    0,    0,    0,   58, /* 3848 */    0,    0,    0,   53, /* 3852 */    0,    0,    0,   38, 
  /* 3856 */    0,    0,    0,   23, /* 3860 */    0,    0,    0,   35, /* 3864 */    0,    0,    0,   71, /* 3868 */    0,    0,    0,   93, 
  /* 3872 */    0,    0,    0,   72, /* 3876 */    0,    0,    0,   39, /* 3880 */    0,    0,    0,   48, /* 3884 */    0,    0,    0,   97, 
  /* 3888 */    0,    0,    0,  121, /* 3892 */    0,    0,    0,   90, /* 3896 */    0,    0,    0,   49, /* 3900 */    0,    0,    0,   45, 
  /* 3904 */    0,    0,    0,   69, /* 3908 */    0,    0,    0,   79, /* 3912 */    0,    0,    0,   65, /* 3916 */    0,    0,    0,   62, 
  /* 3920 */    0,    0,    0,   72, /* 3924 */    0,    0,    0,   72, /* 3928 */    0,    0,    0,   58, /* 3932 */    0,    0,    0,   61, 
  /* 3936 */    0,    0,    0,   83, /* 3940 */    0,    0,    0,   85, /* 3944 */    0,    0,    0,   47, /* 3948 */    0,    0,    0,   13, 
  /* 3952 */    0,    0,    0,   31, /* 3956 */    0,    0,    0,   85, /* 3960 */    0,    0,    0,  105, /* 3964 */    0,    0,    0,   71, 
  /* 3968 */    0,    0,    0,   30, /* 3972 */    0,    0,    0,   28, /* 3976 */    0,    0,    0,   50, /* 3980 */    0,    0,    0,   60, 
  /* 3984 */    0,    0,    0,   49, /* 3988 */    0,    0,    0,   40, /* 3992 */    0,    0,    0,   45, /* 3996 */    0,    0,    0,   52, 
  /* 4000 */    0,    0,    0,   50, /* 4004 */    0,    0,    0,   46, /* 4008 */    0,    0,    0,   46, /* 4012 */    0,    0,    0,   47, 
  /* 4016 */    0,    0,    0,   45, /* 4020 */    0,    0,    0,   47, /* 4024 */    0,    0,    0,   50, /* 4028 */    0,    0,    0,   47, 
  /* 4032 */    0,    0,    0,   38, /* 4036 */    0,    0,    0,   35, /* 4040 */    0,    0,    0,   48, /* 4044 */    0,    0,    0,   61, 
  /* 4048 */    0,    0,    0,   44, /* 4052 */    0,    0,    0,    3, /* 4056 */   -1,   -1,   -1,  -17, /* 4060 */    0,    0,    0,   10, 
  /* 4064 */    0,    0,    0,   52, /* 4068 */    0,    0,    0,   57, /* 4072 */    0,    0,    0,   24, /* 4076 */    0,    0,    0,   10, 
  /* 4080 */    0,    0,    0,   40, /* 4084 */    0,    0,    0,   66, /* 4088 */    0,    0,    0,   40, /* 4092 */   -1,   -1,   -1,   -5, 
  /* 4096 */   -1,   -1,   -1,   -2, /* 4100 */    0,    0,    0,   55, /* 4104 */    0,    0,    0,   97, /* 4108 */    0,    0,    0,   83, 
  /* 4112 */    0,    0,    0,   50, /* 4116 */    0,    0,    0,   53, /* 4120 */    0,    0,    0,   75, /* 4124 */    0,    0,    0,   76, 
  /* 4128 */    0,    0,    0,   54, /* 4132 */    0,    0,    0,   54, /* 4136 */    0,    0,    0,   78, /* 4140 */    0,    0,    0,   86, 
  /* 4144 */    0,    0,    0,   51, /* 4148 */    0,    0,    0,   14, /* 4152 */    0,    0,    0,   27, /* 4156 */    0,    0,    0,   78, 
  /* 4160 */    0,    0,    0,  105, /* 4164 */    0,    0,    0,   81, /* 4168 */    0,    0,    0,   34, /* 4172 */    0,    0,    0,   13, 
  /* 4176 */    0,    0,    0,   36, /* 4180 */    0,    0,    0,   75, /* 4184 */    0,    0,    0,   94, /* 4188 */    0,    0,    0,   77, 
  /* 4192 */    0,    0,    0,   42, /* 4196 */    0,    0,    0,   18, /* 4200 */    0,    0,    0,   22, /* 4204 */    0,    0,    0,   41, 
  /* 4208 */    0,    0,    0,   53, /* 4212 */    0,    0,    0,   51, /* 4216 */    0,    0,    0,   42, /* 4220 */    0,    0,    0,   37, 
  /* 4224 */    0,    0,    0,   38, /* 4228 */    0,    0,    0,   47, /* 4232 */    0,    0,    0,   56, /* 4236 */    0,    0,    0,   49, 
  /* 4240 */    0,    0,    0,   29, /* 4244 */    0,    0,    0,   29, /* 4248 */    0,    0,    0,   66, /* 4252 */    0,    0,    0,  104, 
  /* 4256 */    0,    0,    0,   88, /* 4260 */    0,    0,    0,   26, /* 4264 */   -1,   -1,   -1,   -1, /* 4268 */    0,    0,    0,   42, 
  /* 4272 */    0,    0,    0,   99, /* 4276 */    0,    0,    0,   95, /* 4280 */    0,    0,    0,   39, /* 4284 */    0,    0,    0,   10, 
  /* 4288 */    0,    0,    0,   34, /* 4292 */    0,    0,    0,   52, /* 4296 */    0,    0,    0,   30, /* 4300 */    0,    0,    0,   11, 
  /* 4304 */    0,    0,    0,   39, /* 4308 */    0,    0,    0,   88, /* 4312 */    0,    0,    0,   90, /* 4316 */    0,    0,    0,   46, 
  /* 4320 */    0,    0,    0,   16, /* 4324 */    0,    0,    0,   27, /* 4328 */    0,    0,    0,   40, /* 4332 */    0,    0,    0,   35, 
  /* 4336 */    0,    0,    0,   49, /* 4340 */    0,    0,    0,   96, /* 4344 */    0,    0,    0,  124, /* 4348 */    0,    0,    0,   86, 
  /* 4352 */    0,    0,    0,   27, /* 4356 */    0,    0,    0,   29, /* 4360 */    0,    0,    0,   93, /* 4364 */    0,    0,    0, -127, 
  /* 4368 */    0,    0,    0,   92, /* 4372 */    0,    0,    0,   41, /* 4376 */    0,    0,    0,   44, /* 4380 */    0,    0,    0,   78, 
  /* 4384 */    0,    0,    0,   81, /* 4388 */    0,    0,    0,   53, /* 4392 */    0,    0,    0,   51, /* 4396 */    0,    0,    0,   77, 
  /* 4400 */    0,    0,    0,   83, /* 4404 */    0,    0,    0,   50, /* 4408 */    0,    0,    0,   36, /* 4412 */    0,    0,    0,   80, 
  /* 4416 */    0,    0,    0, -122, /* 4420 */    0,    0,    0, -123, /* 4424 */    0,    0,    0,   90, /* 4428 */    0,    0,    0,   70, 
  /* 4432 */    0,    0,    0,   93, /* 4436 */    0,    0,    0,  107, /* 4440 */    0,    0,    0,   91, /* 4444 */    0,    0,    0,   79, 
  /* 4448 */    0,    0,    0,   99, /* 4452 */    0,    0,    0,  113, /* 4456 */    0,    0,    0,   84, /* 4460 */    0,    0,    0,   42, 
  /* 4464 */    0,    0,    0,   44, /* 4468 */    0,    0,    0,   80, /* 4472 */    0,    0,    0,   86, /* 4476 */    0,    0,    0,   48, 
  /* 4480 */    0,    0,    0,   30, /* 4484 */    0,    0,    0,   77, /* 4488 */    0,    0,    0, -115, /* 4492 */    0,    0,    0, -112, 
  /* 4496 */    0,    0,    0,   91, /* 4500 */    0,    0,    0,   58, /* 4504 */    0,    0,    0,   85, /* 4508 */    0,    0,    0, -128, 
  /* 4512 */    0,    0,    0, -119, /* 4516 */    0,    0,    0,  120, /* 4520 */    0,    0,    0,  123, /* 4524 */    0,    0,    0, -118, 
  /* 4528 */    0,    0,    0,  125, /* 4532 */    0,    0,    0,   83, /* 4536 */    0,    0,    0,   62, /* 4540 */    0,    0,    0,   91, 
  /* 4544 */    0,    0,    0, -125, /* 4548 */    0,    0,    0,  127, /* 4552 */    0,    0,    0,   89, /* 4556 */    0,    0,    0,   74, 
  /* 4560 */    0,    0,    0,   91, /* 4564 */    0,    0,    0,   94, /* 4568 */    0,    0,    0,   46, /* 4572 */   -1,   -1,   -1,  -12, 
  /* 4576 */   -1,   -1,   -1,  -13, /* 4580 */    0,    0,    0,   45, /* 4584 */    0,    0,    0,   95, /* 4588 */    0,    0,    0,   97, 
  /* 4592 */    0,    0,    0,   80, /* 4596 */    0,    0,    0,   84, /* 4600 */    0,    0,    0,   94, /* 4604 */    0,    0,    0,   80, 
  /* 4608 */    0,    0,    0,   48, /* 4612 */    0,    0,    0,   38, /* 4616 */    0,    0,    0,   52, /* 4620 */    0,    0,    0,   50, 
  /* 4624 */    0,    0,    0,   24, /* 4628 */    0,    0,    0,    9, /* 4632 */    0,    0,    0,   39, /* 4636 */    0,    0,    0,   91, 
  /* 4640 */    0,    0,    0,  116, /* 4644 */    0,    0,    0,  109, /* 4648 */    0,    0,    0,   94, /* 4652 */    0,    0,    0,   82, 
  /* 4656 */    0,    0,    0,   64, /* 4660 */    0,    0,    0,   45, /* 4664 */    0,    0,    0,   52, /* 4668 */    0,    0,    0,   84, 
  /* 4672 */    0,    0,    0,   92, /* 4676 */    0,    0,    0,   49, /* 4680 */    0,    0,    0,    0, /* 4684 */    0,    0,    0,   10, 
  /* 4688 */    0,    0,    0,   86, /* 4692 */    0,    0,    0, -100, /* 4696 */    0,    0,    0, -106, /* 4700 */    0,    0,    0,   89, 
  /* 4704 */    0,    0,    0,   46, /* 4708 */    0,    0,    0,   56, /* 4712 */    0,    0,    0,   87, /* 4716 */    0,    0,    0,   94, 
  /* 4720 */    0,    0,    0,   75, /* 4724 */    0,    0,    0,   70, /* 4728 */    0,    0,    0,   94, /* 4732 */    0,    0,    0,  120, 
  /* 4736 */    0,    0,    0,  124, /* 4740 */    0,    0,    0,  119, /* 4744 */    0,    0,    0, -128, /* 4748 */    0,    0,    0, -115, 
  /* 4752 */    0,    0,    0,  125, /* 4756 */    0,    0,    0,   79, /* 4760 */    0,    0,    0,   43, /* 4764 */    0,    0,    0,   43, 
  /* 4768 */    0,    0,    0,   51, /* 4772 */    0,    0,    0,   30, /* 4776 */    0,    0,    0,    0, /* 4780 */    0,    0,    0,    6, 
  /* 4784 */    0,    0,    0,   40, /* 4788 */    0,    0,    0,   55, /* 4792 */    0,    0,    0,   29, /* 4796 */    0,    0,    0,    9, 
  /* 4800 */    0,    0,    0,   36, /* 4804 */    0,    0,    0,   83, /* 4808 */    0,    0,    0,   93, /* 4812 */    0,    0,    0,   61, 
  /* 4816 */    0,    0,    0,   31, /* 4820 */    0,    0,    0,   33, /* 4824 */    0,    0,    0,   41, /* 4828 */    0,    0,    0,   24, 
  /* 4832 */   -1,   -1,   -1,   -4, /* 4836 */   -1,   -1,   -1,  -11, /* 4840 */    0,    0,    0,    6, /* 4844 */    0,    0,    0,   18, 
  /* 4848 */    0,    0,    0,    9, /* 4852 */   -1,   -1,   -1,   -3, /* 4856 */    0,    0,    0,    1, /* 4860 */    0,    0,    0,   15, 
  /* 4864 */    0,    0,    0,   12, /* 4868 */   -1,   -1,   -1,   -6, /* 4872 */   -1,   -1,   -1,  -14, /* 4876 */    0,    0,    0,    9, 
  /* 4880 */    0,    0,    0,   50, /* 4884 */    0,    0,    0,   77, /* 4888 */    0,    0,    0,   86, /* 4892 */    0,    0,    0,   92, 
  /* 4896 */    0,    0,    0,   98, /* 4900 */    0,    0,    0,   83, /* 4904 */    0,    0,    0,   39, /* 4908 */    0,    0,    0,    0, 
  /* 4912 */   -1,   -1,   -1,   -4, /* 4916 */    0,    0,    0,   12, /* 4920 */    0,    0,    0,    8, /* 4924 */   -1,   -1,   -1,  -16, 
  /* 4928 */   -1,   -1,   -1,   -7, /* 4932 */    0,    0,    0,   54, /* 4936 */    0,    0,    0,  106, /* 4940 */    0,    0,    0,   85, 
  /* 4944 */    0,    0,    0,   28, /* 4948 */    0,    0,    0,   27, /* 4952 */    0,    0,    0,   96, /* 4956 */    0,    0,    0, -114, 
  /* 4960 */    0,    0,    0,   97, /* 4964 */    0,    0,    0,   21, /* 4968 */    0,    0,    0,   20, /* 4972 */    0,    0,    0,   94, 
  /* 4976 */    0,    0,    0, -116, /* 4980 */    0,    0,    0,   97, /* 4984 */    0,    0,    0,   29, /* 4988 */    0,    0,    0,   26, 
  /* 4992 */    0,    0,    0,   82, /* 4996 */    0,    0,    0,  107, /* 5000 */    0,    0,    0,   61, /* 5004 */   -1,   -1,   -1,   -5, 
  /* 5008 */   -1,   -1,   -1,  -24, /* 5012 */    0,    0,    0,    1, /* 5016 */    0,    0,    0,   21, /* 5020 */    0,    0,    0,   12, 
  /* 5024 */   -1,   -1,   -1,   -2, /* 5028 */    0,    0,    0,    0, /* 5032 */    0,    0,    0,   13, /* 5036 */    0,    0,    0,   17, 
  /* 5040 */    0,    0,    0,    9, /* 5044 */    0,    0,    0,    1, /* 5048 */    0,    0,    0,    1, /* 5052 */    0,    0,    0,    7, 
  /* 5056 */    0,    0,    0,   12, /* 5060 */    0,    0,    0,   11, /* 5064 */    0,    0,    0,    7, /* 5068 */    0,    0,    0,    6, 
  /* 5072 */    0,    0,    0,   13, /* 5076 */    0,    0,    0,   22, /* 5080 */    0,    0,    0,   23, /* 5084 */    0,    0,    0,   16, 
  /* 5088 */    0,    0,    0,   12, /* 5092 */    0,    0,    0,   19, /* 5096 */    0,    0,    0,   28, /* 5100 */    0,    0,    0,   19, 
  /* 5104 */    0,    0,    0,    0, /* 5108 */    0,    0,    0,    0, /* 5112 */    0,    0,    0,   38, /* 5116 */    0,    0,    0,   95, 
  /* 5120 */    0,    0,    0,  123, /* 5124 */    0,    0,    0,  104, /* 5128 */    0,    0,    0,   72, /* 5132 */    0,    0,    0,   72, 
  /* 5136 */    0,    0,    0,  104, /* 5140 */    0,    0,    0,  125, /* 5144 */    0,    0,    0,   96, /* 5148 */    0,    0,    0,   45, 
  /* 5152 */    0,    0,    0,   25, /* 5156 */    0,    0,    0,   55, /* 5160 */    0,    0,    0,   92, /* 5164 */    0,    0,    0,   90, 
  /* 5168 */    0,    0,    0,   49, /* 5172 */    0,    0,    0,   15, /* 5176 */    0,    0,    0,   19, /* 5180 */    0,    0,    0,   49, 
  /* 5184 */    0,    0,    0,   76, /* 5188 */    0,    0,    0,   94, /* 5192 */    0,    0,    0,  113, /* 5196 */    0,    0,    0, -125, 
  /* 5200 */    0,    0,    0,  127, /* 5204 */    0,    0,    0,   88, /* 5208 */    0,    0,    0,   32, /* 5212 */   -1,   -1,   -1,   -3, 
  /* 5216 */   -1,   -1,   -1,   -8, /* 5220 */    0,    0,    0,    9, /* 5224 */    0,    0,    0,   24, /* 5228 */    0,    0,    0,   25, 
  /* 5232 */    0,    0,    0,   22, /* 5236 */    0,    0,    0,   25, /* 5240 */    0,    0,    0,   39, /* 5244 */    0,    0,    0,   55, 
  /* 5248 */    0,    0,    0,   61, /* 5252 */    0,    0,    0,   66, /* 5256 */    0,    0,    0,   79, /* 5260 */    0,    0,    0,   98, 
  /* 5264 */    0,    0,    0,  101, /* 5268 */    0,    0,    0,   79, /* 5272 */    0,    0,    0,   51, /* 5276 */    0,    0,    0,   44, 
  /* 5280 */    0,    0,    0,   54, /* 5284 */    0,    0,    0,   61, /* 5288 */    0,    0,    0,   56, /* 5292 */    0,    0,    0,   52, 
  /* 5296 */    0,    0,    0,   64, /* 5300 */    0,    0,    0,   84, /* 5304 */    0,    0,    0,   93, /* 5308 */    0,    0,    0,   91, 
  /* 5312 */    0,    0,    0,   88, /* 5316 */    0,    0,    0,   89, /* 5320 */    0,    0,    0,   83, /* 5324 */    0,    0,    0,   65, 
  /* 5328 */    0,    0,    0,   50, /* 5332 */    0,    0,    0,   51, /* 5336 */    0,    0,    0,   63, /* 5340 */    0,    0,    0,   74, 
  /* 5344 */    0,    0,    0,   75, /* 5348 */    0,    0,    0,   67, /* 5352 */    0,    0,    0,   51, /* 5356 */    0,    0,    0,   37, 
  /* 5360 */    0,    0,    0,   40, /* 5364 */    0,    0,    0,   61, /* 5368 */    0,    0,    0,   79, /* 5372 */    0,    0,    0,   68, 
  /* 5376 */    0,    0,    0,   35, /* 5380 */    0,    0,    0,   14, /* 5384 */    0,    0,    0,   22, /* 5388 */    0,    0,    0,   41, 
  /* 5392 */    0,    0,    0,   44, /* 5396 */    0,    0,    0,   40, /* 5400 */    0,    0,    0,   57, /* 5404 */    0,    0,    0,   99, 
  /* 5408 */    0,    0,    0, -124, /* 5412 */    0,    0,    0,  125, /* 5416 */    0,    0,    0,   95, /* 5420 */    0,    0,    0,   86, 
  /* 5424 */    0,    0,    0,  105, /* 5428 */    0,    0,    0,  115, /* 5432 */    0,    0,    0,   86, /* 5436 */    0,    0,    0,   36, 
  /* 5440 */    0,    0,    0,   12, /* 5444 */    0,    0,    0,   30, /* 5448 */    0,    0,    0,   64, /* 5452 */    0,    0,    0,   86, 
  /* 5456 */    0,    0,    0,   96, /* 5460 */    0,    0,    0,  105, /* 5464 */    0,    0,    0,  110, /* 5468 */    0,    0,    0,   99, 
  /* 5472 */    0,    0,    0,   78, /* 5476 */    0,    0,    0,   66, /* 5480 */    0,    0,    0,   68, /* 5484 */    0,    0,    0,   71, 
  /* 5488 */    0,    0,    0,   59, /* 5492 */    0,    0,    0,   42, /* 5496 */    0,    0,    0,   34, /* 5500 */    0,    0,    0,   45, 
  /* 5504 */    0,    0,    0,   69, /* 5508 */    0,    0,    0,   93, /* 5512 */    0,    0,    0,  112, /* 5516 */    0,    0,    0,  119, 
  /* 5520 */    0,    0,    0,  109, /* 5524 */    0,    0,    0,   91, /* 5528 */    0,    0,    0,   74, /* 5532 */    0,    0,    0,   63, 
  /* 5536 */    0,    0,    0,   55, /* 5540 */    0,    0,    0,   50, /* 5544 */    0,    0,    0,   57, /* 5548 */    0,    0,    0,   67, 
  /* 5552 */    0,    0,    0,   61, /* 5556 */    0,    0,    0,   32, /* 5560 */    0,    0,    0,    5, /* 5564 */    0,    0,    0,   16, 
  /* 5568 */    0,    0,    0,   63, /* 5572 */    0,    0,    0,  100, /* 5576 */    0,    0,    0,   90, /* 5580 */    0,    0,    0,   52, 
  /* 5584 */    0,    0,    0,   33, /* 5588 */    0,    0,    0,   46, /* 5592 */    0,    0,    0,   62, /* 5596 */    0,    0,    0,   51, 
  /* 5600 */    0,    0,    0,   34, /* 5604 */    0,    0,    0,   48, /* 5608 */    0,    0,    0,   89, /* 5612 */    0,    0,    0,  117, 
  /* 5616 */    0,    0,    0,  113, /* 5620 */    0,    0,    0,   96, /* 5624 */    0,    0,    0,   97, /* 5628 */    0,    0,    0,  103, 
  /* 5632 */    0,    0,    0,   85, /* 5636 */    0,    0,    0,   45, /* 5640 */    0,    0,    0,   18, /* 5644 */    0,    0,    0,   29, 
  /* 5648 */    0,    0,    0,   67, /* 5652 */    0,    0,    0,  101, /* 5656 */    0,    0,    0,  113, /* 5660 */    0,    0,    0,  108, 
  /* 5664 */    0,    0,    0,   95, /* 5668 */    0,    0,    0,   83, /* 5672 */    0,    0,    0,   71, /* 5676 */    0,    0,    0,   57, 
  /* 5680 */    0,    0,    0,   41, /* 5684 */    0,    0,    0,   28, /* 5688 */    0,    0,    0,   30, /* 5692 */    0,    0,    0,   53, 
  /* 5696 */    0,    0,    0,   86, /* 5700 */    0,    0,    0,  111, /* 5704 */    0,    0,    0,  116, /* 5708 */    0,    0,    0,  111, 
  /* 5712 */    0,    0,    0,  106, /* 5716 */    0,    0,    0,  102, /* 5720 */    0,    0,    0,   92, /* 5724 */    0,    0,    0,   75, 
  /* 5728 */    0,    0,    0,   58, /* 5732 */    0,    0,    0,   51, /* 5736 */    0,    0,    0,   54, /* 5740 */    0,    0,    0,   56, 
  /* 5744 */    0,    0,    0,   44, /* 5748 */    0,    0,    0,    0, /* 5752 */    0,    0,    0,    0, /* 5756 */    0,    0,    0,    0, 
  /* 5760 */    0,    0,    0,    0, /* 5764 */    0,    0,    0,    0, /* 5768 */    0,    0,    0,    0, /* 5772 */    0,    0,    0,    0, 
  /* 5776 */    0,    0,    0,    0, /* 5780 */    0,    0,    0,    0, /* 5784 */    0,    0,    0,    0, /* 5788 */    0,    0,    0,    0, 
  /* 5792 */    0,    0,    0,    0, /* 5796 */    0,    0,    0,    0, /* 5800 */    0,    0,    0,    0, /* 5804 */    0,    0,    0,    0, 
  /* 5808 */    0,    0,    0,    0, /* 5812 */    0,    0,    0,    0, /* 5816 */    0,    0,    0,    0, /* 5820 */    0,    0,    0,    0, 
  /* 5824 */    0,    0,    0,    0
};

const uint32_t _BSS_ADDR = 0;
      sint8_t  _BSS[_BSS_MAX] = {
  0
};      

/* Flash: */

Flash_t Flash;
clock Flash_clock;

urgent           chan Flash_doBurst;
urgent broadcast chan Flash_doneBurst[FLASH_BURST_MAX];

/* Static RAM (SRAM): */

SRAM_t SRAM;
clock SRAM_clock;

chan SRAM_doAccess;
chan SRAM_doneAccess;

/* Instruction Memory Unit (IMU): */

IMU_t IMU;
clock IMU_clock;

                 chan IMU_doneFill;
urgent           chan IMU_doAccess;
urgent broadcast chan IMU_doneAccess;

/* Instruction and Control Unit (InCU): */

InCU_t InCU;

/* Execution Units (EUs): */

EUs_t EUs;
clock EUs_clock;
broadcast chan EUs_doStep;

//////////////////////////////////////////
//////////////////////////// Functions: //
//////////////////////////////////////////

/* (global:) */

void _Init() {
  int i;
  _stack_top = 0;
  for (i = 0; i &lt; _STACK_MAX; ++i)
    _Stack[i] = -1;
  _mustTerminate = false;

  _M_StaticPred       = _M_EMPTY_PRED;
  _M_DynamicPred      = _M_EMPTY_PRED;
  _M_BTBOverwriting   = 0;
  _M_ICacheMiss       = 0;
  _M_ICacheHit        = 0;
  _M_IBuffPop         = 0;
  _M_IBuffFlush       = 0;
  _M_IBuffFlushedInst = 0;
  _M_ExecutedInst     = 0;
}

void _Stack_Push  (int index) { _Stack[_stack_top] = index; _stack_top++; }
int  _Stack_Pop   (         ) { int index; _stack_top--; index = _Stack[_stack_top]; _Stack[_stack_top] = -1; return index; }
bool _Stack_TopIs (int index) { return (_Stack[_stack_top -1] == index); }
int  _Stack_Top   (         ) { return  _Stack[_stack_top -1]; }

/* Flash: */

void Flash_Init() {
  Flash.burst_index = 0;
}

bool Flash_IsTerminated() {
  return _mustTerminate;
}

/* Static RAM (SRAM): */

void SRAM_Init() {
  SRAM.executing = false;
}

bool SRAM_IsAccessed() {
  return ((EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE) &amp;&amp;
          _INSTS[EUs.pipeline[EUS_PIPELINE_E].index].do_memory);
}

bool SRAM_IsTerminated() {
  return _mustTerminate;
}

/* Instruction Memory Unit (IMU): */

void IMU_Init(){
  int w, s;

  IMU.FillBuffer   = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.ICache.index = -1;
  IMU.ICache.rp_way =  0;
  for (w = 0; w &lt; IMU_WAYS_MAX; ++w)
    for (s = 0; s &lt; IMU_USED_SETS_MAX; ++s)
      IMU.ICache.tags[w][s] = -1;
}

bool IMU_IsTerminated() {
  return _mustTerminate;
}

void IMU_Set() {
  IMU.ICache.index = InCU.PC.index;
}

void IMU_FillBuffer_Update() {
  IMU.FillBuffer.filled[IMU.FillBuffer.dword] = true;
  IMU.FillBuffer.dword = (IMU.FillBuffer.dword +1) % IMU_FILLBUFFER_DWORDS_MAX;
}

int IMU_ICache_Lookup() {
  // return wether the current instruction is in the instruction cache (or line buffer) or not
  int                          addr  = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);
  int                          dword = (addr /   8) % IMU_FILLBUFFER_DWORDS_MAX;

  // Is in cache?
  int icache_tag;
  for (way = 0; way &lt; IMU_WAYS_MAX; ++way) {
    icache_tag = IMU.ICache.tags[way][set];

    if (icache_tag != -1
    &amp;&amp;  icache_tag == tag)
      return IMU_CACHE_HIT;
  }

  // Is in fill buffer?
  if (IMU.FillBuffer.set == set
  &amp;&amp;  IMU.FillBuffer.tag == tag) {
    if (IMU.FillBuffer.filled[dword]) return IMU_FILLBUFFER_HIT;
    else                              return IMU_FILLBUFFER_MISS;
  }

  return IMU_CACHE_MISS;
}

bool IMU_ICache_Hit      () { return ( IMU_ICache_Lookup() == IMU_CACHE_HIT       ); }
bool IMU_FillBuffer_Hit  () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_HIT  ); }
bool IMU_FillBuffer_Miss () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_MISS ); }
bool IMU_ICache_Miss     () { return ( IMU_ICache_Lookup() == IMU_CACHE_MISS      ); }

void IMU_ICache_Update() {
  // on a miss, insert the current instruction on the instruction cache
  int                          addr = _INSTS[IMU.FillBuffer.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);

  bool found = false;

  way = 0;
  while (!found &amp;&amp; way &lt; IMU_WAYS_MAX)
    if (IMU.ICache.tags[way][set] == -1)
      found = true;
    else ++way; // conditional increment (thus not a for loop)
  if (found) {
    // free slot found
    IMU.ICache.tags[way][set] = tag;

  } else {
    // no free slot found (pseudo round-robin replacement policy)
    way = IMU.ICache.rp_way;
    IMU.ICache.tags[way][set] = tag;
    IMU.ICache.rp_way = (IMU.ICache.rp_way +1) % IMU_WAYS_MAX;
  }
}

void IMU_FillBuffer_Set() {
  int                     addr = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_SETS_MAX -1] set  = (addr /  32) % IMU_SETS_MAX;  // TODO: add _USED
  int                     tag  =  addr / (32  * IMU_SETS_MAX);

  IMU.FillBuffer       = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.FillBuffer.index = IMU.ICache.index;
  IMU.FillBuffer.dword = (addr / 8) % IMU_FILLBUFFER_DWORDS_MAX;
  IMU.FillBuffer.set   = set;
  IMU.FillBuffer.tag   = tag;
}

/* Instruction and Control Unit (InCU): */

void InCU_Init() {
  int i;

  InCU.BTB.top = 0;
  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    InCU.BTB.buffer[i] = INCU_EMPTY_BTB_ENTRY;

  InCU.PC.index = -1;
  InCU.IBuff.count = 0;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i)
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;  
  InCU.IR = INCU_EMPTY_IR;
}

void InCU_PC_Set(int index) {
  int  btb_entry = INCU_BTB_MAX;
  bool doBreak;

  InCU.PC        = INCU_EMPTY_PC;
  InCU.PC.index  = index;
  InCU.PC.cycles = _INSTS[InCU.PC.index].cycles;

  if (DYNAMIC_PRED) {
    doBreak = false;
    for (btb_entry = 0; !doBreak &amp;&amp; btb_entry &lt; INCU_BTB_MAX; ++btb_entry)
      if (InCU.BTB.buffer[btb_entry].index == InCU.PC.index) {
        doBreak = true; /* No 'break' keyword in UPPAAL, 'doBreak' emulate a breaking behavior. */
        btb_entry--;    /* We must decrement 'btb_entry' to match the behavior of a real 'break' */
      }

    if (btb_entry != INCU_BTB_MAX) {
      InCU.PC.dynamic_prediction = true;

      if (InCU.BTB.buffer[btb_entry].prediction == INCU_WEAKLY_______TAKEN
      ||  InCU.BTB.buffer[btb_entry].prediction == INCU_STRONGLY_____TAKEN)
        InCU.PC.predict_taken = true;
    }
  }
}

void InCU_PC_Update() {
  int index;
  int btb_entry;
  bool doBreak;

  index = InCU.PC.index +1;
  if (DYNAMIC_PRED) {
    btb_entry = -1;
    if (InCU.PC.dynamic_prediction 
    &amp;&amp;  InCU.PC.predict_taken) {
      doBreak = false;
      for (btb_entry = 0; !doBreak &amp;&amp; btb_entry &lt; INCU_BTB_MAX; ++btb_entry)
        if (InCU.BTB.buffer[btb_entry].index == InCU.PC.index) {
          doBreak = true; /* No 'break' keyword in UPPAAL, 'doBreak' emulate a breaking behavior. */
          btb_entry--;    /* We must decrement 'btb_entry' to match the behavior of a real 'break' */
        }
    }

    /* Handle the bclr case: */
    index = (btb_entry ==        -1 ? InCU.PC.index +1 : _INSTS[InCU.PC.index].target );
    index = (index     != _INST_MAX ? index            : _Rets[IndRets[InCU.PC.index]] );
  }

  InCU_PC_Set(index);
}

bool InCU_IBuff_IsFull() {
  return (InCU.IBuff.count == INCU_IBUFF_MAX);
}

void InCU_IBuff_Push() {
  if (InCU.IR == INCU_EMPTY_IR)      InCU.IR = InCU.PC;
  else InCU.IBuff.buffer[InCU.IBuff.count++] = InCU.PC;
}

InCU_IR_t InCU_IBuff_Pop() {
  InCU_IR_t entry = INCU_EMPTY_IR;

  if (InCU.IBuff.count &gt; 0) {
    entry                = InCU.IBuff.buffer[0];
    InCU.IBuff.buffer[0] = InCU.IBuff.buffer[1];
    InCU.IBuff.buffer[1] = InCU.IBuff.buffer[2];
    InCU.IBuff.buffer[2] = InCU.IBuff.buffer[3];
    InCU.IBuff.buffer[3] = InCU.IBuff.buffer[4];
    InCU.IBuff.buffer[4] = InCU.IBuff.buffer[5];
    InCU.IBuff.buffer[5] = InCU.IBuff.buffer[6];
    InCU.IBuff.buffer[6] = InCU.IBuff.buffer[7];
    InCU.IBuff.buffer[7] = INCU_EMPTY_IBUFF_ENTRY;
    InCU.IBuff.count--;

    if (MONITORING) { _M_IBuffPop++; }
    return entry;
  }

  return entry;
}

bool InCU_IsTerminated() {
  return _mustTerminate;
}

void InCU_Flush(int pipeline_stage) {
  int i;

  if (MONITORING) { _M_IBuffFlush++; }
  InCU.IBuff.count = 0;
  InCU.PC = INCU_EMPTY_PC;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i) {
    if (MONITORING &amp;&amp; InCU.IBuff.buffer[i] != INCU_EMPTY_IBUFF_ENTRY) { _M_IBuffFlushedInst++; }
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;
  }
  if (MONITORING &amp;&amp; InCU.IR != INCU_EMPTY_IR) { _M_IBuffFlushedInst++; }
  InCU.IR = INCU_EMPTY_IR;

  if (pipeline_stage == EUS_PIPELINE_E
  &amp;&amp; EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE) {
    if (MONITORING) { _M_IBuffFlushedInst++; }
    EUs.pipeline[EUS_PIPELINE_D] = EUS_EMPTY_PIPELINE_STAGE;
  }
}

void InCU_Update() {
  if (InCU.PC.index != IMU.ICache.index) {
    if (MONITORING) { _M_IBuffFlushedInst++; }
    return;
  }

  InCU_IBuff_Push();
  InCU_PC_Update();
}

bool InCU_BTB_Update(int index, int target, bool taken) {
  int i;
  int btb_index = -1;
  bool incorrect_target = false;

  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    if (InCU.BTB.buffer[i].index == index)
      btb_index = i;
    
  if (btb_index != -1) {
    // Fix prediction
    if (taken) {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction +1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &gt; INCU_STRONGLY_____TAKEN) ? INCU_STRONGLY_____TAKEN : InCU.BTB.buffer[btb_index].prediction;
      if (_INSTS[index].target == _INST_MAX
      &amp;&amp;  target != _Rets[IndRets[index]]) {
        incorrect_target = true;
        _Rets[IndRets[index]] = target;
        InCU_Flush(EUS_PIPELINE_E);
        InCU_PC_Set(target);
      }
    } else {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction -1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &lt; INCU_STRONGLY_NOT_TAKEN) ? INCU_STRONGLY_NOT_TAKEN : InCU.BTB.buffer[btb_index].prediction;
    }

  } else {
    /* "On initial allocation of an entry to the BTB for a taken branch,
     *  the counter is initialized to the weakly-taken state."
     *  (cf. e200z4 manual, p. 4-7) */
    if (taken) { // Insert (FIFO)
      InCU_BTB_Entry_t new_entry = {index, /*target,*/ INCU_WEAKLY_______TAKEN};

      if (MONITORING
      &amp;&amp;  InCU.BTB.buffer[InCU.BTB.top] != INCU_EMPTY_BTB_ENTRY)
        _M_BTBOverwriting++;

      InCU.BTB.buffer[InCU.BTB.top] = new_entry;
      InCU.BTB.top = (InCU.BTB.top +1) % INCU_BTB_MAX;
      if (_INSTS[index].target == _INST_MAX)
        _Rets[IndRets[index]] = target;
    }
  }

  return incorrect_target;
}

/* Execution Units (EUs): */

void EUs_Init() {
  int i;

  for (i = 0; i &lt; EUS_PIPELINE_MAX; ++i)
    EUs.pipeline[i] = EUS_EMPTY_PIPELINE_STAGE;
}

bool EUs_ExecuteNext(int index) {
  bool do_stall = true;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE)
    do_stall = false;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles == 0
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_M] == EUS_EMPTY_PIPELINE_STAGE)
    do_stall = false;

  if (EUs.pipeline[EUS_PIPELINE_D].index == index
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles == 0
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp; !SRAM.executing)
    do_stall = false;

  return !do_stall;
}

bool EUs_IsTerminated() {
  return (_mustTerminate
       &amp;&amp; InCU.IR                      == INCU_EMPTY_IR
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_D] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] == EUS_EMPTY_PIPELINE_STAGE
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_W] == EUS_EMPTY_PIPELINE_STAGE);
}

bool EUs_D_DoStall() { return                                                              EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_E_DoStall() { return                   EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0 || EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_M_DoStall() { return SRAM.executing || EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0 || EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE; }
bool EUs_W_DoStall() { return SRAM.executing; }

void EUs_Update() {
  bool do_stall = false;
  int[0, _INST_MAX] target;
  
  // Execute W (if doesn't stall):
  if (MONITORING &amp;&amp; EUs.pipeline[EUS_PIPELINE_W] != EUS_EMPTY_PIPELINE_STAGE) { _M_ExecutedInst++; }
  EUs.pipeline[EUS_PIPELINE_W] = EUS_EMPTY_PIPELINE_STAGE;
  if (!EUs_W_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_W] = EUs.pipeline[EUS_PIPELINE_M];
    EUs.pipeline[EUS_PIPELINE_M] = EUS_EMPTY_PIPELINE_STAGE;
  }

  // Execute M (if doesn't stall):
  if (!EUs_M_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_M] = EUs.pipeline[EUS_PIPELINE_E];
    EUs.pipeline[EUS_PIPELINE_E] = EUS_EMPTY_PIPELINE_STAGE;
  }

  /* Don't move inst in D to E if there are
   * data dependencies between D and M:
   */
  if (EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] != EUS_EMPTY_PIPELINE_STAGE
   &amp;&amp; _INSTS[EUs.pipeline[EUS_PIPELINE_M].index].do_memory) {
    int i;
    _Inst_t inD = _INSTS[EUs.pipeline[EUS_PIPELINE_D].index];
    _Inst_t inM = _INSTS[EUs.pipeline[EUS_PIPELINE_M].index];

    for (i = 0; i &lt; _REGS_MAX; ++i)
      if (inM.write_regs[i] &amp; inD.read_regs[i])
        do_stall = true;
  }

  // Execute E (if doesn't stall):
  if (!EUs_E_DoStall() &amp;&amp; !do_stall) {
    EUs.pipeline[EUS_PIPELINE_E] = EUs.pipeline[EUS_PIPELINE_D];
    EUs.pipeline[EUS_PIPELINE_D] = EUS_EMPTY_PIPELINE_STAGE;
  }

  if (EUs.pipeline[EUS_PIPELINE_E] != EUS_EMPTY_PIPELINE_STAGE
  &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].cycles &gt; 0)
    EUs.pipeline[EUS_PIPELINE_E].cycles--;


  // Execute D (if doesn't stall):
  if (!EUs_D_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_D] = InCU.IR;
    InCU.IR = InCU_IBuff_Pop();

    // inst. in D is a backward branch then statically predict taken
    if (BACKWARD_TAKEN
    &amp;&amp;  EUs.pipeline[EUS_PIPELINE_D] != EUS_EMPTY_PIPELINE_STAGE
    &amp;&amp;  _INSTS[EUs.pipeline[EUS_PIPELINE_D].index].do_branch
    &amp;&amp; !EUs.pipeline[EUS_PIPELINE_D].dynamic_prediction) {

      target = _INSTS[EUs.pipeline[EUS_PIPELINE_D].index].target;
      target = (target == _INST_MAX ? _Stack_Top() : target); /* Check for bclr case. */
      if (target &lt; EUs.pipeline[EUS_PIPELINE_D].index) {
        EUs.pipeline[EUS_PIPELINE_D].predict_taken = true;
        InCU_Flush(EUS_PIPELINE_D);
        InCU_PC_Set(target);
      }
    }
  }
}

/* Binary: */

const int XER_CA = 1;
const int XER_OV = 2;
const int XER_SO = 3;

const int  CR_SO = 3;
const int  CR_EQ = 2;
const int  CR_GT = 1;
const int  CR_LT = 0;

bool     getBit  ( sint32_t  field ,             uint5_t i             ) { return (((field &gt;&gt; i) % 2) == 1); }
sint32_t getBits ( sint32_t  field , uint5_t j , uint5_t i             ) { return ((field &gt;&gt; (32 -i)) &amp; (2^(j +1) -1)); }
void     setBit  ( sint32_t &amp;field ,             uint5_t i , uint1_t b ) { field |= (b &lt;&lt; i); }
void     setBits ( sint32_t &amp;field , uint5_t j , uint5_t i , uint1_t b ) { int[0,32] x = i; while (x &lt;= j) setBit (field, x++, b); }

sint32_t NOT  ( sint32_t field ) { int i; for (i = 0; i &lt; 32; ++i) field ^= (1 &lt;&lt; i); return field; }
sint32_t CLZ  ( sint32_t field ) { int n; for (n = 31; n &gt;= 0 &amp;&amp; !getBit(field, n); --n); return 32 - (n +1); }
sint32_t EXTS ( sint32_t field, uint5_t sign_bit ) { setBits (field, 31, sign_bit, getBit(field, sign_bit)); return field; }
sint32_t ROTL ( sint32_t field, uint5_t n ) { sint32_t shl = (field &lt;&lt; n); sint32_t shr = (field &gt;&gt; (32 - n)); return (shl | shr); }
sint32_t MASK ( uint5_t  me, uint5_t  mb ) { sint32_t field; if (me &gt;= mb) { setBits (field, 31, 0, 0); setBits (field, me   , mb   , 1); }
                                                             else          { setBits (field, 31, 0, 1); setBits (field, mb -1, me +1, 0); } return field; }

uint4_t  getCRn  ( uint3_t crfD                             ) { return CR[IndCR[crfD]]; }
sint32_t getCTR  (                                          ) { return CTR;             }
uint4_t  getXER  (                                          ) { return XER;             }
uint1_t  getCRni ( uint3_t crfD , uint2_t i                 ) { return (CR[IndCR[crfD]] &gt;&gt; i) % 2; }
uint1_t  getXERi (                uint2_t i                 ) { return (XER             &gt;&gt; i) % 2; }

void     setCRn  ( uint3_t crfD ,             uint4_t  bbbb ) { CR[IndCR[crfD]] = bbbb; }
void     setCTR  (                            sint32_t word ) { CTR             = word; }
void     setXER  (                            uint4_t  bbbb ) { XER             = bbbb; }
void     setCRni ( uint3_t crfD , uint2_t i , uint1_t  b    ) { uint4_t bbbb = getCRn(crfD); bbbb = ( b ? (bbbb | (1 &lt;&lt; i)) : (bbbb &amp; NOT(1 &lt;&lt; i)) ); setCRn(crfD, bbbb); }
void     setXERi (                uint2_t i , uint1_t  b    ) { uint4_t bbbb = getXER(    ); bbbb = ( b ? (bbbb | (1 &lt;&lt; i)) : (bbbb &amp; NOT(1 &lt;&lt; i)) ); setXER(      bbbb); }

void to_MEM  ( sint32_t addr, uint5_t size, sint32_t blob ) {
  int[0,4] i;
  int[0, _BSS_MAX] bss_index;

  if (addr &gt;= _BSS_ADDR
  &amp;&amp;  addr &lt;  _BSS_ADDR + _BSS_MAX) { /* if in .bss section */
    bss_index = addr - _BSS_ADDR;
    for (i = 0; i &lt; size; ++i) {
      _BSS[bss_index + i] = EXTS((blob &gt;&gt; (size - i -1) * 8) &amp; 255, 7);
    }
  }

//else {
//  /* Unsupported address for a memory write.
//     Fail on the following execption: */
//  _BSS[0] = 255;
//}
}

sint32_t from_MEM  ( sint32_t addr, uint5_t size ) {
  int[0,4] i;
  int[0, _DATA_MAX] data_index;
  int[0, _BSS_MAX] bss_index;
  sint32_t blob = 0;

  if (addr &gt;= _DATA_ADDR
  &amp;&amp;  addr &lt;  _DATA_ADDR + _DATA_MAX) { /* if in .data section */
    data_index = addr - _DATA_ADDR;
    for (i = 0; i &lt; size; ++i)
      blob |= (_DATA[data_index + i] &lt;&lt; ((size - i -1) * 8));
  }

  else
  if (addr &gt;= _BSS_ADDR
  &amp;&amp;  addr &lt;  _BSS_ADDR + _BSS_MAX) { /* if in .bss section */
    bss_index = addr - _BSS_ADDR;
    for (i = 0; i &lt; size; ++i)
      blob |= (_BSS[bss_index + i] &lt;&lt; ((size - i -1) * 8));
  }

//else {
//  /* Unsupported address for a memory read.
//     Fail on the following "out of range" exception: */
//  blob = _BSS[-1];
//}

  return blob;
}

bool  z () { return ((CTR -1) == 0);    }
bool nz () { return !z();               }

bool eq ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_EQ); }
bool gt ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_GT); }
bool lt ( uint3_t crfD ) { return getBit(getCRn(crfD), CR_LT); }
bool ne ( uint3_t crfD ) { return !eq(crfD);                   }
bool le ( uint3_t crfD ) { return !gt(crfD);                   }
bool ge ( uint3_t crfD ) { return !lt(crfD);                   }

const int OP_ADD   =  0;
const int OP_AND   =  1;
const int OP_BR    =  2;
const int OP_CMP   =  3;
const int OP_CLZ   =  4;
const int OP_DIV   =  5;
const int OP_EQV   =  6;
const int OP_EXT   =  7;
const int OP_LOAD  =  8;
const int OP_MUL   =  9;
const int OP_NAND  = 10;
const int OP_NEG   = 11;
const int OP_NOR   = 12;
const int OP_OR    = 13;
const int OP_ROTL  = 14;
const int OP_SHL   = 15;
const int OP_SHR   = 16;
const int OP_STORE = 17;
const int OP_SUB   = 18;
const int OP_XOR   = 19;

const int ARG_NONE = 0;
const int ARG_REG  = 1;
const int ARG_SIMM = 2;
const int ARG_UIMM = 3;

const int QUAL_NONE             =  0;
const int QUAL_ALGEBRAIC        =  1;
const int QUAL_ANDMASK          =  2;
const int QUAL_COMPLEMENT       =  3;
const int QUAL_EXTEND           =  4;
const int QUAL_EXTEND_MINUS_ONE =  5;
const int QUAL_EXTEND_ZERO      =  6;
const int QUAL_INDEX            =  7;
const int QUAL_LOGICAL          =  8;
const int QUAL_MASKINSERT       =  9;
const int QUAL_MSB              = 10;
const int QUAL_REVERSE          = 11;
const int QUAL_SHIFT            = 12;
const int QUAL_TOCTR            = 13;
const int QUAL_TOLR             = 14;
const int QUAL_UNSIGNED         = 15;
const int QUAL_UPDATE           = 16;

const int SIZE_NONE     = 0;
const int SIZE_BYTE     = 1; 
const int SIZE_HALFWORD = 2;
const int SIZE_WORD     = 4;

// Arithmetic instructions:

void _ARITHM( int op, int arg, int qual, bool carries , uint5_t rD, uint5_t rA, uint5_t rB, sint16_t SIMM, uint1_t OE, uint1_t Rc ) {
  sint32_t rA_sval = GPRS[rA], rB_sval = GPRS[rB], rD_sval;
//uint32_t rA_uval = GPRS[rA], rB_uval = GPRS[rB]; // TODO: fix

  uint1_t CA = getXERi(XER_CA);
  if ( op == OP_ADD ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )       ; }
                                                 if ( qual == QUAL_EXTEND           ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )  + CA ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt; 16 )       ; }
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( rB_sval &lt;&lt;  0 )       ; } }

                        if ( arg == ARG_SIMM ) { rA_sval = (carries || (rA != 0) ? rA_sval : 0);
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval + ( SIMM     &lt;&lt;  0 )      ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] =  rA_sval + ( SIMM     &lt;&lt; 16 )      ; } }
                        if ( arg == ARG_NONE ) { if ( qual == QUAL_EXTEND_MINUS_ONE ) { GPRS[rD] =  rA_sval - ( 1        &lt;&lt;  0 ) + CA ; }
                                                 if ( qual == QUAL_EXTEND_ZERO      ) { GPRS[rD] =  rA_sval                      + CA ; } }
                        if ( carries         ) { setXERi (XER_CA, false)                                                              ; } } /* Always false as UPPAAL disallow overflowing. */

  if ( op == OP_SUB ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )       ; }
                                                 if ( qual == QUAL_EXTEND           ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )  + CA ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt; 16 )       ; }
                                                 if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( rB_sval &lt;&lt;  0 )       ; } }
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE             ) { GPRS[rD] = -rA_sval + ( SIMM     &lt;&lt;  0 )      ; }
                                                 if ( qual == QUAL_SHIFT            ) { GPRS[rD] = -rA_sval + ( SIMM     &lt;&lt; 16 )      ; } }
                        if ( arg == ARG_NONE ) { if ( qual == QUAL_EXTEND_MINUS_ONE ) { GPRS[rD] = -rA_sval - ( 1        &lt;&lt;  0 ) + CA ; }
                                                 if ( qual == QUAL_EXTEND_ZERO      ) { GPRS[rD] = -rA_sval                      + CA ; } }
                        if ( carries         ) { setXERi (XER_CA, false)                                                              ; } } /* Always false as UPPAAL disallow overflowing. */

  if ( op == OP_DIV ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval /   rB_sval               ; }  
                                                 if ( qual == QUAL_UNSIGNED         ) { GPRS[rD] =  rA_sval /   rB_sval               ; } } } // TODO: set back to rA_uval

  if ( op == OP_MUL ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval *   rB_sval               ; } }   // TODO: 64-bit multiplication; store the 32 LSB in rD
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE             ) { GPRS[rD] =  rA_sval *   SIMM                  ; } }   // TODO: 64-bit multiplication; store the 32 LSB in rD
                                                 if ( qual == QUAL_MSB              ) { GPRS[rD] =  rA_sval *   rB_sval               ; }   } // TODO: 64-bit multiplication; store the 32 MSB in rD

  rD_sval = GPRS[rD];
  if ( OE ) { setXERi (     XER_OV, false                        );   /* Always false as UPPAAL disallow overflowing. */
              setXERi (     XER_SO, getBit (XER, XER_OV)         ); }
  if ( Rc ) { setCRni (cr0,  CR_SO, getBit (XER, XER_SO)         );
              setCRni (cr0,  CR_EQ, (rD_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rD_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rD_sval &lt;  0 ? true : false)); }
}

void _add      ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _add_     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _addo     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _addo_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _addc     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , false , false ); }
void _addc_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , false , true  ); }
void _addco    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , true  , false ); }
void _addco_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_NONE             , true  , rD ,  rA , rB , 0    , true  , true  ); }
void _adde     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , false , false ); }
void _adde_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , false , true  ); }
void _addeo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , true  , false ); }
void _addeo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_ADD , ARG_REG  , QUAL_EXTEND           , false , rD ,  rA , rB , 0    , true  , true  ); }
void _addi     ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , false , rD ,  rA , 0  , SIMM , false , false ); }
void _addic    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , true  , rD ,  rA , 0  , SIMM , false , false ); }
void _addic_   ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_NONE             , true  , rD ,  rA , 0  , SIMM , false , true  ); }
void _addis    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_ADD , ARG_SIMM , QUAL_SHIFT            , false , rD ,  rA , 0  , SIMM , false , false ); }
void _addme    ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , false , false ); }
void _addme_   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , false , true  ); }
void _addmeo   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , true  , false ); }
void _addmeo_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD ,  rA , 0  , 0    , true  , true  ); }
void _addze    ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , false , false ); }
void _addze_   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , false , true  ); }
void _addzeo   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , true  , false ); }
void _addzeo_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_ADD , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD ,  rA , 0  , 0    , true  , true  ); }

void _subf     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , false , false ); }
void _subf_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , false , true  ); }
void _subfo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , true  , false ); }
void _subfo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , false , rD , rA , rB , 0    , true  , true  ); }
void _subfc    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , false , false ); }
void _subfc_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , false , true  ); }
void _subfco   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , true  , false ); }
void _subfco_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_NONE             , true  , rD , rA , rB , 0    , true  , true  ); }
void _subfe    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , false , false ); }
void _subfe_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , false , true  ); }
void _subfeo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , true  , false ); }
void _subfeo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_SUB , ARG_REG  , QUAL_EXTEND           , false , rD , rA , rB , 0    , true  , true  ); }
void _subfic   ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_SUB , ARG_SIMM , QUAL_NONE             , true  , rD , rA , 0  , SIMM , false , false ); }
void _subfme   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , false , false ); }
void _subfme_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , false , true  ); }
void _subfmeo  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , true  , false ); }
void _subfmeo_ ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_MINUS_ONE , false , rD , rA , 0  , 0    , true  , true  ); }
void _subfze   ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , false , false ); }
void _subfze_  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , false , true  ); }
void _subfzeo  ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , true  , false ); }
void _subfzeo_ ( uint5_t rD , uint5_t rA                  ) { _ARITHM( OP_SUB , ARG_NONE , QUAL_EXTEND_ZERO      , false , rD , rA , 0  , 0    , true  , true  ); }

void _divw     ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _divw_    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _divwo    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _divwo_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _divwu    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , false , false ); }
void _divwu_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , false , true  ); }
void _divwuo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , true  , false ); }
void _divwuo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_DIV , ARG_REG  , QUAL_UNSIGNED         , false , rD ,  rA , rB , 0    , true  , true  ); }

void _mullw    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , false ); }
void _mullw_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , false , true  ); }
void _mullwo   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , false ); }
void _mullwo_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_NONE             , false , rD ,  rA , rB , 0    , true  , true  ); }
void _mulli    ( uint5_t rD , uint5_t rA  , sint16_t SIMM ) { _ARITHM( OP_MUL , ARG_SIMM , QUAL_NONE             , false , rD ,  rA , 0  , SIMM , false , false ); }
void _mulhw    ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , false ); }
void _mulhw_   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , true  ); }
void _mulhwu   ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , false ); }
void _mulhwu_  ( uint5_t rD , uint5_t rA  , uint5_t  rB   ) { _ARITHM( OP_MUL , ARG_REG  , QUAL_MSB              , false , rD ,  rA , rB , 0    , false , true  ); }

void _li       ( uint5_t rD ,               sint16_t SIMM ) { _addi    ( rD,  0,  SIMM ); }
void _lis      ( uint5_t rD ,               sint16_t SIMM ) { _addis   ( rD,  0,  SIMM ); }
void _la       ( uint5_t rD , sint16_t d  , uint5_t  rA   ) { _addi    ( rD, rA,  d    ); }
void _sub      ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subf    ( rD, rB,  rA   ); }
void _sub_     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subf_   ( rD, rB,  rA   ); }
void _subo     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfo   ( rD, rB,  rA   ); }
void _subo_    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfo_  ( rD, rB,  rA   ); }
void _subc     ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfc   ( rD, rB,  rA   ); }
void _subc_    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfc_  ( rD, rB,  rA   ); }
void _subco    ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfco  ( rD, rB,  rA   ); }
void _subco_   ( uint5_t rD , uint5_t  rA , uint5_t  rB   ) { _subfco_ ( rD, rB,  rA   ); }
void _subi     ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addi    ( rD, rA, -SIMM ); }
void _subis    ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addis   ( rD, rA, -SIMM ); }
void _subic    ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addic   ( rD, rA, -SIMM ); }
void _subic_   ( uint5_t rD , uint5_t  rA , sint16_t SIMM ) { _addic_  ( rD, rA, -SIMM ); }

// Compare instructions:

void _COMPARE( int op, int arg, int qual, uint3_t crfD, uint5_t rA, uint5_t rB, sint32_t IMM ) {
  sint32_t rA_sval = GPRS[rA], rB_sval = GPRS[rB];
//uint32_t rA_uval = GPRS[rA], rB_uval = GPRS[rB];
  sint16_t SIMM = (arg == ARG_SIMM ? IMM : 0);
  uint16_t UIMM = (arg == ARG_UIMM ? IMM : 0);

  sint32_t a;
  sint32_t b;
  uint4_t  c;
  if ( op == OP_CMP ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE    ) { a = rA_sval; b =     ( rB_sval      ); }
                                                 if ( qual == QUAL_LOGICAL ) { a = rA_sval; b =     ( rB_sval      ); } }   // TODO: set back to rA_uval
                        if ( arg == ARG_SIMM ) { if ( qual == QUAL_NONE    ) { a = rA_sval; b = EXTS( SIMM    , 15 ); } }
                        if ( arg == ARG_UIMM ) { if ( qual == QUAL_LOGICAL ) { a = rA_sval; b =     ( UIMM         ); } } } // TODO: set back to rA_uval

       if ( a &lt; b ) { c = (1 &lt;&lt; CR_LT); } // TODO: does it perform an "unsigned evaluation" if a and b are unsigned?
  else if ( a &gt; b ) { c = (1 &lt;&lt; CR_GT); }
  else              { c = (1 &lt;&lt; CR_EQ); }

  c |= getXERi(XER_SO);
  setCRn (crfD, c);
}

void _cmp    ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _COMPARE( OP_CMP , ARG_REG  , QUAL_NONE    , crfD , rA , rB , 0    ); }
void _cmpl   ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _COMPARE( OP_CMP , ARG_REG  , QUAL_LOGICAL , crfD , rA , rB , 0    ); }
void _cmpi   ( uint3_t crfD , uint5_t rA , sint16_t SIMM ) { _COMPARE( OP_CMP , ARG_SIMM , QUAL_NONE    , crfD , rA , 0  , SIMM ); }
void _cmpli  ( uint3_t crfD , uint5_t rA , uint16_t UIMM ) { _COMPARE( OP_CMP , ARG_UIMM , QUAL_LOGICAL , crfD , rA , 0  , UIMM ); }

void _cmpw   ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _cmp   ( crfD, rA, rB   ); }
void _cmpwi  ( uint3_t crfD , uint5_t rA , sint16_t SIMM ) { _cmpi  ( crfD, rA, SIMM ); }
void _cmplw  ( uint3_t crfD , uint5_t rA , uint5_t  rB   ) { _cmpl  ( crfD, rA, rB   ); }
void _cmplwi ( uint3_t crfD , uint5_t rA , uint16_t UIMM ) { _cmpli ( crfD, rA, UIMM ); }

// Logical instructions:

void _LOGICAL( int op, int arg, int qual, int size, uint5_t rA, uint5_t rS, uint5_t rB, uint16_t UIMM, uint1_t OE, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint5_t n        = 31;
  uint5_t sign_bit = (size == SIZE_BYTE ? 7 : 15);
  uint1_t S        = getBit (rS_uval, sign_bit);
  if ( op == OP_AND  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval &amp;    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_COMPLEMENT ) { GPRS[rA] =    ( rS_uval &amp; NOT( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval &amp;    ( UIMM    &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval &amp;    ( UIMM    &lt;&lt; 16 ) ); } } }
  if ( op == OP_CLZ  ) { if ( arg == ARG_NONE ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = CLZ( rS_uval                        ); } } }
  if ( op == OP_EQV  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_EXT  ) { if ( arg == ARG_NONE ) { if ( size == SIZE_BYTE       ) { GPRS[rA] =    ( rS_uval &amp;    (   255   &lt;&lt;  0 ) ); }
                                                  if ( size == SIZE_HALFWORD   ) { GPRS[rA] =    ( rS_uval &amp;    ( 65535   &lt;&lt;  0 ) ); }
                                                  setBits (GPRS[rA], 31, sign_bit, S)                                                ;   } }

  if ( op == OP_NAND ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval &amp;    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_NEG  ) { if ( arg == ARG_NONE ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval                        ); } } }
  if ( op == OP_NOR  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] = NOT( rS_uval |    ( rB_uval &lt;&lt;  0 ) ); } } }
  if ( op == OP_OR   ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval |    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_COMPLEMENT ) { GPRS[rA] =    ( rS_uval | NOT( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval |    ( UIMM    &lt;&lt;  0 ) ); } }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval |    ( rB_uval &lt;&lt; 16 ) ); }   }
  if ( op == OP_XOR  ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); } }
                         if ( arg == ARG_UIMM ) { if ( qual == QUAL_NONE       ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt;  0 ) ); }
                                                  if ( qual == QUAL_SHIFT      ) { GPRS[rA] =    ( rS_uval ^    ( rB_uval &lt;&lt; 16 ) ); } } }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( OE ) { setXERi (     XER_OV, false                        );   /* Always false as UPPAAL disallow overflowing. */
              setXERi (     XER_SO, getBit (XER, XER_OV)         ); }
  if ( Rc ) { setCRni (cr0,  CR_SO, getBit (XER, XER_SO)         );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _and     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _and_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _andc    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _andc_   ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_AND  , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _andi_   ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_AND  , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , true  ); }
void _andis_  ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_AND  , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , true  ); }

void _cntlzw  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_CLZ  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , false ); }
void _cntlzw_ ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_CLZ  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , true  ); }
void _eqv     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_EQV  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _eqv_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_EQV  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _extsb   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_BYTE     , rA , rS , 0  , 0    , false , false ); }
void _extsb_  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_BYTE     , rA , rS , 0  , 0    , false , true  ); }
void _extsh   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_HALFWORD , rA , rS , 0  , 0    , false , false ); }
void _extsh_  ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_EXT  , ARG_NONE , QUAL_NONE       , SIZE_HALFWORD , rA , rS , 0  , 0    , false , true  ); }

void _nand    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NAND , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _nand_   ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NAND , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _neg     ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , false ); }
void _neg_    ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , false , true  ); }
void _nego    ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , true  , false ); }
void _nego_   ( uint5_t rA , uint5_t rS                 ) { _LOGICAL( OP_NEG  , ARG_NONE , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , 0    , true  , true  ); }
void _nor     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _nor_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_NOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }

void _or      ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _or_     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _orc     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _orc_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_OR   , ARG_REG  , QUAL_COMPLEMENT , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _ori     ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_OR   , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _oris    ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_OR   , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _xor     ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_XOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , false ); }
void _xor_    ( uint5_t rA , uint5_t rS , uint5_t  rB   ) { _LOGICAL( OP_XOR  , ARG_REG  , QUAL_NONE       , SIZE_NONE     , rA , rS , rB , 0    , false , true  ); }
void _xori    ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_XOR  , ARG_UIMM , QUAL_NONE       , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }
void _xoris   ( uint5_t rA , uint5_t rS , uint16_t UIMM ) { _LOGICAL( OP_XOR  , ARG_UIMM , QUAL_SHIFT      , SIZE_NONE     , rA , rS , 0  , UIMM , false , false ); }

void _not     ( uint5_t rA , uint5_t rS                 ) { _nor  ( rA, rS, rS ); }
void _not_    ( uint5_t rA , uint5_t rS                 ) { _nor_ ( rA, rS, rS ); }
void _mr      ( uint5_t rA , uint5_t rS                 ) { _or   ( rA, rS, rS ); }
void _mr_     ( uint5_t rA , uint5_t rS                 ) { _or_  ( rA, rS, rS ); }
void _nop     (                                         ) { _ori  (  0,  0,  0 ); }

// Rotate instructions:

void _ROTATE( int op, int arg, int qual, uint5_t rA, uint5_t rS, uint5_t rB, uint5_t SH, uint5_t MB, uint5_t ME, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rA_uval = GPRS[rA], rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint5_t  n = ( arg == ARG_REG ? getBits (rB_uval, 4, 0) : SH );
  sint32_t r = ROTL (rS_uval, n);
  sint32_t m = MASK (ME, MB);
  if ( op == OP_ROTL ) { if ( qual == QUAL_ANDMASK    ) { GPRS[rA] = (r &amp; m)                         ; }
                         if ( qual == QUAL_MASKINSERT ) { GPRS[rA] = (r &amp; m) | ( rA_uval &amp; NOT( m ) ); } }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( Rc ) { setCRni (cr0,  CR_SO, getXERi(XER_SO)               );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _rlwnm     ( uint5_t rA , uint5_t rS , uint5_t rB , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_REG  , QUAL_ANDMASK    , rA , rS , rB , 0  , 31 - ME , 31 - MB , false ); }
void _rlwnm_    ( uint5_t rA , uint5_t rS , uint5_t rB , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_REG  , QUAL_ANDMASK    , rA , rS , rB , 0  , 31 - ME , 31 - MB , true  ); }
void _rlwimi    ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_MASKINSERT , rA , rS , 0  , SH , 31 - ME , 31 - MB , false ); }
void _rlwimi_   ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_MASKINSERT , rA , rS , 0  , SH , 31 - ME , 31 - MB , true  ); }
void _rlwinm    ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_ANDMASK    , rA , rS , 0  , SH , 31 - ME , 31 - MB , false ); }
void _rlwinm_   ( uint5_t rA , uint5_t rS , uint5_t SH , uint5_t MB , uint5_t ME ) { _ROTATE( OP_ROTL , ARG_UIMM , QUAL_ANDMASK    , rA , rS , 0  , SH , 31 - ME , 31 - MB , true  ); }

void _inslwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi  ( rA , rS , 32 - (b + 0) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _inslwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi_ ( rA , rS , 32 - (b + 0) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _insrwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi  ( rA , rS , 32 - (b + n) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _insrwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwimi_ ( rA , rS , 32 - (b + n) , b  + 0 , (b +  n) - 1); } // (n &gt; 0)
void _extlwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm  ( rA , rS ,  0 + (b + 0) ,  0 + 0 , (0 +  n) - 1); } // (n &gt; 0)
void _extlwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm_ ( rA , rS ,  0 + (b + 0) ,  0 + 0 , (0 +  n) - 1); } // (n &gt; 0)
void _extrwi    ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm  ( rA , rS ,  0 + (b + n) , 32 - n , (0 + 31) - 0); } // (n &gt; 0)
void _extrwi_   ( uint5_t rA , uint5_t rS , uint5_t n  , uint5_t b ) { _rlwinm_ ( rA , rS ,  0 + (b + n) , 32 - n , (0 + 31) - 0); } // (n &gt; 0)
void _rotlwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotlwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotrwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS , 32 - (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _rotrwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS , 32 - (0 + n) ,  0 + 0 , (0 + 31) - 0); }
void _slwi      ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _slwi_     ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _srwi      ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS , 32 - (0 + n) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _srwi_     ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS , 32 - (0 + n) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrlwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + 0) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrlwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + 0) ,  0 + n , (0 + 31) - 0); } // (n &lt; 32)
void _clrrwi    ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm  ( rA , rS ,  0 + (0 + 0) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _clrrwi_   ( uint5_t rA , uint5_t rS , uint5_t n              ) { _rlwinm_ ( rA , rS ,  0 + (0 + 0) ,  0 + 0 , (0 + 31) - n); } // (n &lt; 32)
void _clrlslwi  ( uint5_t rA , uint5_t rS , uint5_t b  , uint5_t n ) { _rlwinm  ( rA , rS ,  0 + (0 + n) , b  - n , (0 + 31) - n); } // (n &lt;= b &lt;= 31)
void _clrlslwi_ ( uint5_t rA , uint5_t rS , uint5_t b  , uint5_t n ) { _rlwinm_ ( rA , rS ,  0 + (0 + n) , b  - n , (0 + 31) - n); } // (n &lt;= b &lt;= 31)
void _rotlw     ( uint5_t rA , uint5_t rS , uint5_t rB             ) { _rlwnm   ( rA , rS , rB           ,  0 + 0 , (0 + 31) - 0); }
void _rotlw_    ( uint5_t rA , uint5_t rS , uint5_t rB             ) { _rlwnm_  ( rA , rS , rB           ,  0 + 0 , (0 + 31) - 0); }

// Shift instructions:

void _SHIFT( int op, int arg, int qual, uint5_t rA, uint5_t rS, uint5_t rB, uint5_t SH, uint1_t Rc ) {
  sint32_t rA_sval;
  sint32_t rS_uval = GPRS[rS], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  uint1_t  S;
  sint32_t r, _32xS;
  uint5_t  n = ( arg == ARG_REG ? getBits (GPRS[rB], 4, 0) : SH );
  sint32_t m = 0;
  if ( op == OP_SHL ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_LOGICAL   ) { r = ROTL(rS_uval,      n); if (getBit (rB_uval, 5) == 0) m = MASK( 31     , n ); } } }
  if ( op == OP_SHR ) { if ( arg == ARG_REG  ) { if ( qual == QUAL_LOGICAL   ) { r = ROTL(rS_uval, 32 - n); if (getBit (rB_uval, 5) == 0) m = MASK( 31 - n , 0 ); } }
                        if ( arg == ARG_REG  ) { if ( qual == QUAL_ALGEBRAIC ) { r = ROTL(rS_uval, 32 - n); if (getBit (rB_uval, 5) == 0) m = MASK( 31 - n , 0 ); } }
                        if ( arg == ARG_UIMM ) { if ( qual == QUAL_ALGEBRAIC ) { r = ROTL(rS_uval, 32 - n);                               m = MASK( 31 - n , 0 ); } } }

  S = getBit (GPRS[rS], 31);
  setBits (_32xS, 31, 0, S); /* _32xS is S's value concatenated 32 times. */
  GPRS[rA] = r &amp; m;
  if ( qual == QUAL_ALGEBRAIC )
  { GPRS[rA] |= _32xS &amp; NOT( m );
    setXERi(XER_CA, (S &amp; ((r &amp; NOT( m )) != 0))); }

  rA_sval = GPRS[rA]; // TODO: consider as unsigned?
  if ( Rc ) { setCRni (cr0,  CR_SO, getXERi(XER_SO)              );
              setCRni (cr0,  CR_EQ, (rA_sval == 0 ? true : false));
              setCRni (cr0,  CR_GT, (rA_sval &gt;  0 ? true : false));
              setCRni (cr0,  CR_LT, (rA_sval &lt;  0 ? true : false)); }
}

void _slw    ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHL , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , false ); }
void _slw_   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHL , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , true  ); }
void _sraw   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_ALGEBRAIC , rA , rS , rB , 0  , false ); }
void _sraw_  ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_ALGEBRAIC , rA , rS , rB , 0  , true  ); }
void _srawi  ( uint5_t rA , uint5_t rS , uint5_t SH ) { _SHIFT( OP_SHR , ARG_UIMM , QUAL_ALGEBRAIC , rA , rS , 0  , SH , false ); }
void _srawi_ ( uint5_t rA , uint5_t rS , uint5_t SH ) { _SHIFT( OP_SHR , ARG_UIMM , QUAL_ALGEBRAIC , rA , rS , 0  , SH , true  ); }
void _srw    ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , false ); }
void _srw_   ( uint5_t rA , uint5_t rS , uint5_t rB ) { _SHIFT( OP_SHR , ARG_REG  , QUAL_LOGICAL   , rA , rS , rB , 0  , true  ); }

// Memory instructions:

void _MEMORY( int op, int arg, int qual, bool updates, bool indexed, int size, uint5_t rD, uint5_t rS , uint5_t rA, sint16_t d, uint5_t rB ) {
  sint32_t rS_uval = GPRS[rS], rA_uval = GPRS[rA], rB_uval = GPRS[rB];
  /* Using a signed type (sint32_t) for usigned variables (rX_uval)
   * because the value 0xffffffff can't be represented in UPPAAL as
   * an unsigned value (max. unsigned value in UPPAAL is 0x7fffffff).
   * It us not a problem since we don't make any algebraic operation
   * but only bitwise operations.
   */

  sint32_t a, b, EA;
  a  = 0;           if (updates || (rA != 0)) a        = rA_uval;
  b  = EXTS(d, 15); if (indexed             ) b        = rB_uval;
  EA = a + b;       if (updates             ) GPRS[rA] = EA;

  if ( op == OP_LOAD  ) { if ( qual == QUAL_NONE       ) { GPRS[rD] =       from_MEM( EA, size )                 ; }
                          if ( qual == QUAL_ALGEBRAIC  ) { GPRS[rD] = EXTS( from_MEM( EA, size ), (size * 8) -1 ); }
                          if ( qual == QUAL_REVERSE    ) {
                            if ( size == SIZE_HALFWORD ) { GPRS[rD]  = (from_MEM( EA +0, 1 ) &lt;&lt;  0); GPRS[rD] |= (from_MEM( EA +1, 1 ) &lt;&lt;  8); }
                            if ( size == SIZE_WORD     ) { GPRS[rD]  = (from_MEM( EA +0, 1 ) &lt;&lt;  0); GPRS[rD] |= (from_MEM( EA +1, 1 ) &lt;&lt;  8);
                                                           GPRS[rD] |= (from_MEM( EA +2, 1 ) &lt;&lt; 16); GPRS[rD] |= (from_MEM( EA +3, 1 ) &lt;&lt; 24); } } }

  if ( op == OP_STORE ) { if ( qual == QUAL_NONE       ) { to_MEM(EA, size, (rS_uval &gt;&gt;  0)); }
                          if ( qual == QUAL_REVERSE    ) {
                            if ( size == SIZE_HALFWORD ) { /* MEM(EA +0, 1) = (rS_uval &gt;&gt;  0); MEM(EA +1, 1) = (rS_uval &gt;&gt;  8); */ }
                            if ( size == SIZE_WORD     ) { /* MEM(EA +0, 1) = (rS_uval &gt;&gt;  0); MEM(EA +1, 1) = (rS_uval &gt;&gt;  8); */
                                                           /* MEM(EA +2, 1) = (rS_uval &gt;&gt; 16); MEM(EA +3, 1) = (rS_uval &gt;&gt; 24); */ } } }
}

void _lbz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_BYTE     , rD , 0  , rA , d  , 0  ); }
void _lbzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_BYTE     , rD , 0  , rA , d  , 0  ); }
void _lbzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_BYTE     , rD , 0  , rA , 0  , rB ); }
void _lbzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_BYTE     , rD , 0  , rA , 0  , rB ); }
void _lha    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_ALGEBRAIC , false , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhau   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_ALGEBRAIC , true  , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhaux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_ALGEBRAIC , true  , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhax   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_ALGEBRAIC , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_HALFWORD , rD , 0  , rA , d  , 0  ); }
void _lhzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lhbrx  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_HALFWORD , rD , 0  , rA , 0  , rB ); }
void _lwz    ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , false , false , SIZE_WORD     , rD , 0  , rA , d  , 0  ); }
void _lwzu   ( uint5_t rD , sint16_t d  , uint5_t rA ) { _MEMORY( OP_LOAD  , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_WORD     , rD , 0  , rA , d  , 0  ); }
void _lwzux  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }
void _lwzx   ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_NONE      , false , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }
void _lwbrx  ( uint5_t rD , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_LOAD  , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_WORD     , rD , 0  , rA , 0  , rB ); }

void _stb    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_BYTE     , 0  , rS , rA , d  , 0  ); }
void _stbu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_BYTE     , 0  , rS , rA , d  , 0  ); }
void _stbux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_BYTE     , 0  , rS , rA , 0  , rB ); }
void _stbx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_BYTE     , 0  , rS , rA , 0  , rB ); }
void _sth    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_HALFWORD , 0  , rS , rA , d  , 0  ); }
void _sthu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_HALFWORD , 0  , rS , rA , d  , 0  ); }
void _sthux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _sthx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _sthbrx ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_HALFWORD , 0  , rS , rA , 0  , rB ); }
void _stw    ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , false , false , SIZE_WORD     , 0  , rS , rA , d  , 0  ); }
void _stwu   ( uint5_t rS , sint16_t d  , uint5_t rA ) { _MEMORY( OP_STORE , ARG_UIMM , QUAL_NONE      , true  , false , SIZE_WORD     , 0  , rS , rA , d  , 0  ); }
void _stwux  ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , true  , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }
void _stwx   ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_NONE      , false , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }
void _stwbrx ( uint5_t rS , uint5_t  rA , uint5_t rB ) { _MEMORY( OP_STORE , ARG_REG  , QUAL_REVERSE   , false , true  , SIZE_WORD     , 0  , rS , rA , 0  , rB ); }

// Branching instructions:

const int BO_not_ctr_not_cond =  0;
const int BO_____ctr_not_cond =  2;
const int BO_________not_cond =  4;
const int BO_not_ctr_____cond =  8;
const int BO_____ctr_____cond = 10;
const int BO_____________cond = 12;
const int BO_not_ctr_________ = 16;
const int BO_____ctr_________ = 18;
const int BO_________________ = 20; // Branch always

void _BRANCH( int op, int qual, bool conditional, uint5_t BO, uint5_t BI, sint32_t target_addr, uint1_t AA, uint1_t LK ) {
  int[0, _INST_MAX] next_index, target_index;
  bool incorrect_target;

  bool ctr_ok, cond_ok;
  uint3_t crfD     = BI / 4;
  uint2_t crfD_bit = BI % 4; 
  if ( conditional )
    { if (!getBit(BO, 2)) { setCTR(getCTR() -1); }
    ctr_ok  = getBit(BO, 2) || ((getCTR() != 0) ^ getBit(BO, 1));
    cond_ok = getBit(BO, 4) || (getCRni (crfD, crfD_bit) == getBit(BO, 3)); }

  if ( !conditional ) { EUs.pipeline[EUS_PIPELINE_E].taken = (                      true        ); }
  if (  conditional ) { EUs.pipeline[EUS_PIPELINE_E].taken = ((ctr_ok &amp;&amp; cond_ok) ? true : false); }

  /* Updates the BTB: */
  next_index   = EUs.pipeline[EUS_PIPELINE_E].index +1;
  target_index = (qual != QUAL_TOLR ? _INSTS[EUs.pipeline[EUS_PIPELINE_E].index].target : _Stack_Pop ());
  if (DYNAMIC_PRED) {
    incorrect_target = InCU_BTB_Update(EUs.pipeline[EUS_PIPELINE_E].index, target_index, EUs.pipeline[EUS_PIPELINE_E].taken);
    if (MONITORING &amp;&amp; incorrect_target)
      _M_DynamicPred.incorrect_target++;
  }

  if ( LK ) { _Stack_Push (next_index); }

  /* Check for incorrect predictions (predict not taken but taken): */
  if (!EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.incorrectly_predicted_not_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_not_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_not_taken++; }
    }

    InCU_Flush(EUS_PIPELINE_E);
    InCU_PC_Set(target_index);
  }

  /* Check for incorrect predictions (predict taken but not taken): */
  if (EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.incorrectly_predicted_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.incorrectly_predicted_taken++; }
    }

    InCU_Flush(EUS_PIPELINE_E);
    InCU_PC_Set(next_index);
  }

  /* Check for correct predictions (predict not taken and not taken): */
  if (!EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.correctly_predicted_not_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_not_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_not_taken++; }
    }
  }

  /* Check for correct predictions (predict taken and taken): */
  if (EUs.pipeline[EUS_PIPELINE_E].predict_taken &amp;&amp; EUs.pipeline[EUS_PIPELINE_E].taken) {
    if (MONITORING) {
           if ( DYNAMIC_PRED   &amp;&amp;  EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) { _M_DynamicPred.correctly_predicted_taken++; }
      else if ( BACKWARD_TAKEN &amp;&amp; !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_taken++; }
      else if (                   !EUs.pipeline[EUS_PIPELINE_E].dynamic_prediction) {  _M_StaticPred.correctly_predicted_taken++; }
    }
  }
}

void _b        (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , false , false ); }
void _ba       (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , true  , false ); }
void _bl       (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , false , true  ); }
void _bla      (                                          sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , false , 0  , 0  , target_addr , true  , true  ); }
void _bc       (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , false , false ); }
void _bca      (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , true  , false ); }
void _bcl      (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , false , true  ); }
void _bcla     (                uint5_t BO , uint5_t BI , sint32_t target_addr ) { _BRANCH( OP_BR , QUAL_NONE  , true  , BO , BI , target_addr , true  , true  ); }
void _bcctr    (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOCTR , true  , BO , BI , 0           , false , false ); }
void _bcctrl   (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOCTR , true  , BO , BI , 0           , false , true  ); }
void _bclr     (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOLR  , true  , BO , BI , 0           , false , false ); }
void _bclrl    (                uint5_t BO , uint5_t BI                        ) { _BRANCH( OP_BR , QUAL_TOLR  , true  , BO , BI , 0           , false , true  ); }

void _bt       ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____________cond , BI               , target_addr ); }
void _bf       ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_________not_cond , BI               , target_addr ); }
void _bdnz     (                uint5_t BO ,              sint32_t target_addr ) { _bc     ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnzt    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzf    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdz      (                uint5_t BO ,              sint32_t target_addr ) { _bc     ( BO_____ctr_________ , 0                , target_addr ); }
void _bdzt     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzf     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bc     ( BO_____ctr_not_cond , BI               , target_addr ); }
void _blt      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _ble      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beq      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bge      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgt      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnl      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bne      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bng      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bso      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bns      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bun      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnu      ( uint3_t crfD ,                           sint32_t target_addr ) { _bc     ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _bta      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____________cond , BI               , target_addr ); }
void _bfa      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_________not_cond , BI               , target_addr ); }
void _bdnza    (                uint5_t BO ,              sint32_t target_addr ) { _bca    ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnzta   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfa   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdza     (                uint5_t BO ,              sint32_t target_addr ) { _bca    ( BO_____ctr_________ , 0                , target_addr ); }
void _bdzta    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfa    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bca    ( BO_____ctr_not_cond , BI               , target_addr ); }
void _blta     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beqa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgta     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnla     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnea     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bnga     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsoa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsa     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _buna     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnua     ( uint3_t crfD ,                           sint32_t target_addr ) { _bca    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _btl      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____________cond , BI               , target_addr ); }
void _bfl      ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_________not_cond , BI               , target_addr ); }
void _bdnzl    (                uint5_t BO ,              sint32_t target_addr ) { _bcl    ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnztl   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfl   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdzl     (                uint5_t BO ,              sint32_t target_addr ) { _bcl    ( BO_____ctr_________ , 0                , target_addr ); }
void _bdztl    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfl    ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcl    ( BO_____ctr_not_cond , BI               , target_addr ); }
void _bltl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beql     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgtl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnll     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnel     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bngl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsol     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bunl     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnul     ( uint3_t crfD ,                           sint32_t target_addr ) { _bcl    ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _btla     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____________cond , BI               , target_addr ); }
void _bfla     ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_________not_cond , BI               , target_addr ); }
void _bdnzla   (                uint5_t BO ,              sint32_t target_addr ) { _bcla   ( BO_not_ctr_________ , 0                , target_addr ); }
void _bdnztla  ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_not_ctr_____cond , BI               , target_addr ); }
void _bdnzfla  ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_not_ctr_not_cond , BI               , target_addr ); }
void _bdzla    (                uint5_t BO ,              sint32_t target_addr ) { _bcla   ( BO_____ctr_________ , 0                , target_addr ); }
void _bdztla   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____ctr_____cond , BI               , target_addr ); }
void _bdzfla   ( uint3_t crfD ,              uint5_t BI , sint32_t target_addr ) { _bcla   ( BO_____ctr_not_cond , BI               , target_addr ); }
void _bltla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_LT , target_addr ); }
void _blela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _beqla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_EQ , target_addr ); }
void _bgela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bgtla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_GT , target_addr ); }
void _bnlla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_LT , target_addr ); }
void _bnela    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_EQ , target_addr ); }
void _bngla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_GT , target_addr ); }
void _bsola    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnsla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }
void _bunla    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_____________cond , 4 * crfD + CR_SO , target_addr ); }
void _bnula    ( uint3_t crfD ,                           sint32_t target_addr ) { _bcla   ( BO_________not_cond , 4 * crfD + CR_SO , target_addr ); }

void _blr      ( uint3_t crfD                                                  ) { _bclr   ( BO_________________ , 0                              ); }
void _btlr     ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____________cond , BI                             ); }
void _bflr     ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_________not_cond , BI                             ); }
void _bdnzlr   (                uint5_t BO                                     ) { _bclr   ( BO_not_ctr_________ , 0                              ); }
void _bdnztlr  ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_not_ctr_____cond , BI                             ); }
void _bdnzflr  ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_not_ctr_not_cond , BI                             ); }
void _bdzlr    (                uint5_t BO                                     ) { _bclr   ( BO_____ctr_________ , 0                              ); }
void _bdztlr   ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____ctr_____cond , BI                             ); }
void _bdzflr   ( uint3_t crfD ,              uint5_t BI                        ) { _bclr   ( BO_____ctr_not_cond , BI                             ); }
void _bltlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnllr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnelr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bnglr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsolr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnslr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunlr    ( uint3_t crfD                                                  ) { _bclr   ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnulr    ( uint3_t crfD                                                  ) { _bclr   ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _bctr     ( uint3_t crfD                                                  ) { _bcctr  ( BO_________________ , 0                              ); }
void _btctr    ( uint3_t crfD ,              uint5_t BI                        ) { _bcctr  ( BO_____________cond , BI                             ); }
void _bfctr    ( uint3_t crfD ,              uint5_t BI                        ) { _bcctr  ( BO_________not_cond , BI                             ); }			        
void _bltctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnlctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnectr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bngctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsoctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnsctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnuctr   ( uint3_t crfD                                                  ) { _bcctr  ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _blrl     ( uint3_t crfD                                                  ) { _bclrl  ( BO_________________ , 0                              ); }
void _btlrl    ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____________cond , BI                             ); }
void _bflrl    ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_________not_cond , BI                             ); }
void _bdnzlrl  (                uint5_t BO                                     ) { _bclrl  ( BO_not_ctr_________ , 0                              ); }
void _bdnztlrl ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_not_ctr_____cond , BI                             ); }
void _bdnzflrl ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_not_ctr_not_cond , BI                             ); }
void _bdzlrl   (                uint5_t BO                                     ) { _bclrl  ( BO_____ctr_________ , 0                              ); }
void _bdztlrl  ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____ctr_____cond , BI                             ); }
void _bdzflrl  ( uint3_t crfD ,              uint5_t BI                        ) { _bclrl  ( BO_____ctr_not_cond , BI                             ); }
void _bltlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnllrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnelrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bnglrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsolrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnslrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunlrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnulrl   ( uint3_t crfD                                                  ) { _bclrl  ( BO_________not_cond , 4 * crfD + CR_SO               ); }

void _bctrl    ( uint3_t crfD                                                  ) { _bcctrl ( BO_________________ , 0                              ); }
void _btctrl   ( uint3_t crfD ,              uint5_t BI                        ) { _bcctrl ( BO_____________cond , BI                             ); }
void _bfctrl   ( uint3_t crfD ,              uint5_t BI                        ) { _bcctrl ( BO_________not_cond , BI                             ); }	
void _bltctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_LT               ); }
void _blectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _beqctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_EQ               ); }
void _bgectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bgtctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_GT               ); }
void _bnlctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_LT               ); }
void _bnectrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_EQ               ); }
void _bngctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_GT               ); }
void _bsoctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnsctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_SO               ); }
void _bunctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_____________cond , 4 * crfD + CR_SO               ); }
void _bnuctrl  ( uint3_t crfD                                                  ) { _bcctrl ( BO_________not_cond , 4 * crfD + CR_SO               ); }

// Processor control instructions:

void _mfxer ( uint5_t rD               ) { GPRS[rD]  = getXER();          }
void _mfctr ( uint5_t rD               ) { GPRS[rD]  = getCTR();          }
void _mfcr  ( uint5_t rD               ) { GPRS[rD]  = (getCRn(0) &lt;&lt;  0);
                                           GPRS[rD] |= (getCRn(1) &lt;&lt;  4); 
                                           GPRS[rD] |= (getCRn(2) &lt;&lt;  8); 
                                           GPRS[rD] |= (getCRn(3) &lt;&lt; 12); 
                                           GPRS[rD] |= (getCRn(4) &lt;&lt; 16); 
                                           GPRS[rD] |= (getCRn(5) &lt;&lt; 20); 
                                           GPRS[rD] |= (getCRn(6) &lt;&lt; 24); 
                                           GPRS[rD] |= (getCRn(7) &lt;&lt; 28);     }
void _mfspr ( uint5_t rD , uint5_t spr ) { if (spr == 1) { _mfxer (rD); }
                                           if (spr == 9) { _mfctr (rD); } }

void _mtcrf ( uint8_t CRM , uint5_t rS ) { setCRn(0, (getBit(CRM, 7) ? getCRn(0) : getBits(rS, (7 * 4) + 3, (7 * 4) + 0)));
                                           setCRn(1, (getBit(CRM, 6) ? getCRn(1) : getBits(rS, (6 * 4) + 3, (6 * 4) + 0)));
                                           setCRn(2, (getBit(CRM, 5) ? getCRn(2) : getBits(rS, (5 * 4) + 3, (5 * 4) + 0)));
                                           setCRn(3, (getBit(CRM, 4) ? getCRn(3) : getBits(rS, (4 * 4) + 3, (4 * 4) + 0)));
                                           setCRn(4, (getBit(CRM, 3) ? getCRn(4) : getBits(rS, (3 * 4) + 3, (3 * 4) + 0)));
                                           setCRn(5, (getBit(CRM, 2) ? getCRn(5) : getBits(rS, (2 * 4) + 3, (2 * 4) + 0)));
                                           setCRn(6, (getBit(CRM, 1) ? getCRn(6) : getBits(rS, (1 * 4) + 3, (1 * 4) + 0)));
                                           setCRn(7, (getBit(CRM, 0) ? getCRn(7) : getBits(rS, (0 * 4) + 3, (0 * 4) + 0))); }
void _mtxer (               uint5_t rS ) { setXER(GPRS[rS]);              }
void _mtctr (               uint5_t rS ) { setCTR(GPRS[rS]);              }
void _mtspr ( uint5_t spr , uint5_t rS ) { if (spr == 1) { _mtxer (rS); }
                                           if (spr == 9) { _mtctr (rS); } }

//////////////////////////////////////////
////////////////// Generated semantics: //
//////////////////////////////////////////

void execute_3000() { _stwu(r1,-32,r1); }
void execute_3004() { _stw(r27,12,r1); }
void execute_3008() { _stw(r31,28,r1); }
void execute_300c() { _addi(r31,r7,1); }
void execute_3010() { _srawi(r31,r31,1); }
void execute_3014() { _rlwinm(r27,r5,2,0,29); }
void execute_3018() { _addi(r27,r27,-4); }
void execute_301c() { _add(r27,r3,r27); }
void execute_3020() { _rlwinm(r12,r31,2,0,29); }
void execute_3024() { _addi(r12,r12,-4); }
void execute_3028() { _add(r12,r3,r12); }
void execute_302c() { _cmpwi(cr7,r5,0); }
void execute_3030() { _ble(cr7,12500); }
void execute_3034() { _stw(r26,8,r1); }
void execute_3038() { _stw(r28,16,r1); }
void execute_303c() { _stw(r29,20,r1); }
void execute_3040() { _addi(r28,r4,-4); }
void execute_3044() { _li(r29,0); }
void execute_3048() { _b(12392); }
void execute_304c() { _addi(r31,r31,-1); }
void execute_3050() { _mr(r6,r26); }
void execute_3054() { _b(12380); }
void execute_3058() { _addi(r12,r12,4); }
void execute_305c() { _addi(r29,r29,1); }
void execute_3060() { _cmpw(cr7,r5,r29); }
void execute_3064() { _beq(cr7,12488); }
void execute_3068() { _addi(r26,r6,4); }
void execute_306c() { _lwz(r10,0,r6); }
void execute_3070() { _lwz(r9,0,r12); }
void execute_3074() { _mullw(r10,r10,r9); }
void execute_3078() { _cmpwi(cr7,r31,1); }
void execute_307c() { _ble(cr7,12456); }
void execute_3080() { _mr(r11,r6); }
void execute_3084() { _mr(r3,r12); }
void execute_3088() { _li(r4,1); }
void execute_308c() { _subf(r9,r4,r31); }
void execute_3090() { _mtspr(9,r9); }
void execute_3094() { _lwzu(r9,4,r11); }
void execute_3098() { _lwzu(r0,-4,r3); }
void execute_309c() { _mullw(r9,r9,r0); }
void execute_30a0() { _add(r10,r10,r9); }
void execute_30a4() { _addi(r4,r4,1); }
void execute_30a8() { _bdnz(16,12432); }
void execute_30ac() { _divw(r10,r10,r8); }
void execute_30b0() { _stwu(r10,4,r28); }
void execute_30b4() { _cmplw(cr7,r27,r12); }
void execute_30b8() { _beq(cr7,12360); }
void execute_30bc() { _cmpw(cr7,r7,r31); }
void execute_30c0() { _ble(cr7,12372); }
void execute_30c4() { _addi(r31,r31,1); }
void execute_30c8() { _b(12376); }
void execute_30cc() { _lwz(r26,8,r1); }
void execute_30d0() { _lwz(r28,16,r1); }
void execute_30d4() { _lwz(r29,20,r1); }
void execute_30d8() { _lwz(r27,12,r1); }
void execute_30dc() { _lwz(r31,28,r1); }
void execute_30e0() { _addi(r1,r1,32); }
void execute_30e4() { _bclr(20,0); }
void execute_30e8() { _stwu(r1,-2896,r1); }
void execute_30ec() { _mfspr(r0,8); }
void execute_30f0() { _stw(r0,2900,r1); }
void execute_30f4() { _stw(r30,2888,r1); }
void execute_30f8() { _bcl(20,31,12536); }
void execute_30fc() { _mfspr(r30,8); }
void execute_3100() { _addis(r30,r30,1); }
void execute_3104() { _addi(r30,r30,-26576); }
void execute_3108() { _lwz(r3,-32768,r30); }
void execute_310c() { _li(r8,285); }
void execute_3110() { _li(r7,35); }
void execute_3114() { _mr(r6,r3); }
void execute_3118() { _li(r5,700); }
void execute_311c() { _addi(r4,r1,8); }
void execute_3120() { _addi(r3,r3,144); }
void execute_3124() { _bl(12288); }
void execute_3128() { _li(r3,0); }
void execute_312c() { _lwz(r0,2900,r1); }
void execute_3130() { _mtspr(8,r0); }
void execute_3134() { _lwz(r30,2888,r1); }
void execute_3138() { _addi(r1,r1,2896); }
void execute_313c() { _bclr(20,0); }
void execute_3140() { _lis(r1,0); }
void execute_3144() { _ori(r1,r1,0); }
void execute_3148() { _bl(12520); }
void execute_314c() { _b(12620); }
</declaration>
    <template>
        <name>Binary</name>
        <location id="idinit" x="0" y="0">
            <urgent/>
        </location>
        <location id="idexit" x="0" y="0"/>
        <location id="id3000" x="0" y="0">
            <name>BB0</name>
        </location>
        <location id="id3004" x="0" y="0"/>
        <location id="id3008" x="0" y="0"/>
        <location id="id300c" x="0" y="0"/>
        <location id="id3010" x="0" y="0"/>
        <location id="id3014" x="0" y="0"/>
        <location id="id3018" x="0" y="0"/>
        <location id="id301c" x="0" y="0"/>
        <location id="id3020" x="0" y="0"/>
        <location id="id3024" x="0" y="0"/>
        <location id="id3028" x="0" y="0"/>
        <location id="id302c" x="0" y="0"/>
        <location id="id3030" x="0" y="0"/>
        <location id="id3034" x="0" y="0">
            <name>BB1</name>
        </location>
        <location id="id3038" x="0" y="0"/>
        <location id="id303c" x="0" y="0"/>
        <location id="id3040" x="0" y="0"/>
        <location id="id3044" x="0" y="0"/>
        <location id="id3048" x="0" y="0"/>
        <location id="id304c" x="0" y="0">
            <name>BB2</name>
        </location>
        <location id="id3050" x="0" y="0"/>
        <location id="id3054" x="0" y="0"/>
        <location id="id3058" x="0" y="0">
            <name>BB3</name>
        </location>
        <location id="id305c" x="0" y="0">
            <name>BB4</name>
        </location>
        <location id="id3060" x="0" y="0"/>
        <location id="id3064" x="0" y="0"/>
        <location id="id3068" x="0" y="0">
            <name>BB5</name>
        </location>
        <location id="id306c" x="0" y="0"/>
        <location id="id3070" x="0" y="0"/>
        <location id="id3074" x="0" y="0"/>
        <location id="id3078" x="0" y="0"/>
        <location id="id307c" x="0" y="0"/>
        <location id="id3080" x="0" y="0">
            <name>BB6</name>
        </location>
        <location id="id3084" x="0" y="0"/>
        <location id="id3088" x="0" y="0"/>
        <location id="id308c" x="0" y="0"/>
        <location id="id3090" x="0" y="0"/>
        <location id="id3094" x="0" y="0">
            <name>BB7</name>
        </location>
        <location id="id3098" x="0" y="0"/>
        <location id="id309c" x="0" y="0"/>
        <location id="id30a0" x="0" y="0"/>
        <location id="id30a4" x="0" y="0"/>
        <location id="id30a8" x="0" y="0"/>
        <location id="id30ac" x="0" y="0">
            <name>BB8</name>
        </location>
        <location id="id30b0" x="0" y="0"/>
        <location id="id30b4" x="0" y="0"/>
        <location id="id30b8" x="0" y="0"/>
        <location id="id30bc" x="0" y="0">
            <name>BB9</name>
        </location>
        <location id="id30c0" x="0" y="0"/>
        <location id="id30c4" x="0" y="0">
            <name>BB10</name>
        </location>
        <location id="id30c8" x="0" y="0"/>
        <location id="id30cc" x="0" y="0">
            <name>BB11</name>
        </location>
        <location id="id30d0" x="0" y="0"/>
        <location id="id30d4" x="0" y="0"/>
        <location id="id30d8" x="0" y="0">
            <name>BB12</name>
        </location>
        <location id="id30dc" x="0" y="0"/>
        <location id="id30e0" x="0" y="0"/>
        <location id="id30e4" x="0" y="0"/>
        <location id="id30e8" x="0" y="0">
            <name>BB13</name>
        </location>
        <location id="id30ec" x="0" y="0"/>
        <location id="id30f0" x="0" y="0"/>
        <location id="id30f4" x="0" y="0"/>
        <location id="id30f8" x="0" y="0"/>
        <location id="id30fc" x="0" y="0">
            <name>BB14</name>
        </location>
        <location id="id3100" x="0" y="0"/>
        <location id="id3104" x="0" y="0"/>
        <location id="id3108" x="0" y="0"/>
        <location id="id310c" x="0" y="0"/>
        <location id="id3110" x="0" y="0"/>
        <location id="id3114" x="0" y="0"/>
        <location id="id3118" x="0" y="0"/>
        <location id="id311c" x="0" y="0"/>
        <location id="id3120" x="0" y="0"/>
        <location id="id3124" x="0" y="0"/>
        <location id="id3128" x="0" y="0">
            <name>BB15</name>
        </location>
        <location id="id312c" x="0" y="0"/>
        <location id="id3130" x="0" y="0"/>
        <location id="id3134" x="0" y="0"/>
        <location id="id3138" x="0" y="0"/>
        <location id="id313c" x="0" y="0"/>
        <location id="id3140" x="0" y="0">
            <name>BB16</name>
        </location>
        <location id="id3144" x="0" y="0"/>
        <location id="id3148" x="0" y="0"/>
        <location id="id314c" x="0" y="0">
            <name>BB17</name>
        </location>
        <init ref="idinit"/>
        <transition>
            <source ref="idinit"/>
            <target ref="id3140"/>
            <label kind="synchronisation">_doInitialize?</label>
            <label kind="assignment">InCU_PC_Set(80),
_clock = 0</label>
        </transition>
        <transition>
            <source ref="id314c"/>
            <target ref="idexit"/>
            <label kind="guard">EUs_ExecuteNext(83)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_314c(),
_mustTerminate = true</label>
        </transition>
        <transition>
            <source ref="id3140"/>
            <target ref="id3144"/>
            <label kind="guard">EUs_ExecuteNext(80)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3140()</label>
        </transition>
        <transition>
            <source ref="id3144"/>
            <target ref="id3148"/>
            <label kind="guard">EUs_ExecuteNext(81)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3144()</label>
        </transition>
        <transition>
            <source ref="id3148"/>
            <target ref="id30e8"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(82)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3148()</label>
        </transition>
        <transition>
            <source ref="id3128"/>
            <target ref="id312c"/>
            <label kind="guard">EUs_ExecuteNext(74)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3128()</label>
        </transition>
        <transition>
            <source ref="id312c"/>
            <target ref="id3130"/>
            <label kind="guard">EUs_ExecuteNext(75)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_312c()</label>
        </transition>
        <transition>
            <source ref="id3130"/>
            <target ref="id3134"/>
            <label kind="guard">EUs_ExecuteNext(76)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3130()</label>
        </transition>
        <transition>
            <source ref="id3134"/>
            <target ref="id3138"/>
            <label kind="guard">EUs_ExecuteNext(77)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3134()</label>
        </transition>
        <transition>
            <source ref="id3138"/>
            <target ref="id313c"/>
            <label kind="guard">EUs_ExecuteNext(78)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3138()</label>
        </transition>
        <transition>
            <source ref="id313c"/>
            <target ref="id314c"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(79) &amp;&amp;
_Stack_TopIs(83)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_313c()</label>
        </transition>
        <transition>
            <source ref="id30fc"/>
            <target ref="id3100"/>
            <label kind="guard">EUs_ExecuteNext(63)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30fc()</label>
        </transition>
        <transition>
            <source ref="id3100"/>
            <target ref="id3104"/>
            <label kind="guard">EUs_ExecuteNext(64)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3100()</label>
        </transition>
        <transition>
            <source ref="id3104"/>
            <target ref="id3108"/>
            <label kind="guard">EUs_ExecuteNext(65)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3104()</label>
        </transition>
        <transition>
            <source ref="id3108"/>
            <target ref="id310c"/>
            <label kind="guard">EUs_ExecuteNext(66)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3108()</label>
        </transition>
        <transition>
            <source ref="id310c"/>
            <target ref="id3110"/>
            <label kind="guard">EUs_ExecuteNext(67)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_310c()</label>
        </transition>
        <transition>
            <source ref="id3110"/>
            <target ref="id3114"/>
            <label kind="guard">EUs_ExecuteNext(68)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3110()</label>
        </transition>
        <transition>
            <source ref="id3114"/>
            <target ref="id3118"/>
            <label kind="guard">EUs_ExecuteNext(69)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3114()</label>
        </transition>
        <transition>
            <source ref="id3118"/>
            <target ref="id311c"/>
            <label kind="guard">EUs_ExecuteNext(70)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3118()</label>
        </transition>
        <transition>
            <source ref="id311c"/>
            <target ref="id3120"/>
            <label kind="guard">EUs_ExecuteNext(71)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_311c()</label>
        </transition>
        <transition>
            <source ref="id3120"/>
            <target ref="id3124"/>
            <label kind="guard">EUs_ExecuteNext(72)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3120()</label>
        </transition>
        <transition>
            <source ref="id3124"/>
            <target ref="id3000"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(73)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3124()</label>
        </transition>
        <transition>
            <source ref="id30e8"/>
            <target ref="id30ec"/>
            <label kind="guard">EUs_ExecuteNext(58)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e8()</label>
        </transition>
        <transition>
            <source ref="id30ec"/>
            <target ref="id30f0"/>
            <label kind="guard">EUs_ExecuteNext(59)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30ec()</label>
        </transition>
        <transition>
            <source ref="id30f0"/>
            <target ref="id30f4"/>
            <label kind="guard">EUs_ExecuteNext(60)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f0()</label>
        </transition>
        <transition>
            <source ref="id30f4"/>
            <target ref="id30f8"/>
            <label kind="guard">EUs_ExecuteNext(61)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f4()</label>
        </transition>
        <transition>
            <source ref="id30f8"/>
            <target ref="id30fc"/>
            <label kind="guard">!true &amp;&amp;
EUs_ExecuteNext(62)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30f8()</label>
        </transition>
        <transition>
            <source ref="id30d8"/>
            <target ref="id30dc"/>
            <label kind="guard">EUs_ExecuteNext(54)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d8()</label>
        </transition>
        <transition>
            <source ref="id30dc"/>
            <target ref="id30e0"/>
            <label kind="guard">EUs_ExecuteNext(55)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30dc()</label>
        </transition>
        <transition>
            <source ref="id30e0"/>
            <target ref="id30e4"/>
            <label kind="guard">EUs_ExecuteNext(56)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e0()</label>
        </transition>
        <transition>
            <source ref="id30e4"/>
            <target ref="id3128"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(57) &amp;&amp;
_Stack_TopIs(74)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30e4()</label>
        </transition>
        <transition>
            <source ref="id30cc"/>
            <target ref="id30d0"/>
            <label kind="guard">EUs_ExecuteNext(51)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30cc()</label>
        </transition>
        <transition>
            <source ref="id30d0"/>
            <target ref="id30d4"/>
            <label kind="guard">EUs_ExecuteNext(52)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d0()</label>
        </transition>
        <transition>
            <source ref="id30d4"/>
            <target ref="id30d8"/>
            <label kind="guard">EUs_ExecuteNext(53)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30d4()</label>
        </transition>
        <transition>
            <source ref="id30c4"/>
            <target ref="id30c8"/>
            <label kind="guard">EUs_ExecuteNext(49)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c4()</label>
        </transition>
        <transition>
            <source ref="id30c8"/>
            <target ref="id3058"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(50)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c8()</label>
        </transition>
        <transition>
            <source ref="id30bc"/>
            <target ref="id30c0"/>
            <label kind="guard">EUs_ExecuteNext(47)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30bc()</label>
        </transition>
        <transition>
            <source ref="id30c0"/>
            <target ref="id3058"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(48)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c0()</label>
        </transition>
        <transition>
            <source ref="id30c0"/>
            <target ref="id30c4"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(48)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30c0()</label>
        </transition>
        <transition>
            <source ref="id30ac"/>
            <target ref="id30b0"/>
            <label kind="guard">EUs_ExecuteNext(43)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30ac()</label>
        </transition>
        <transition>
            <source ref="id30b0"/>
            <target ref="id30b4"/>
            <label kind="guard">EUs_ExecuteNext(44)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b0()</label>
        </transition>
        <transition>
            <source ref="id30b4"/>
            <target ref="id30b8"/>
            <label kind="guard">EUs_ExecuteNext(45)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b4()</label>
        </transition>
        <transition>
            <source ref="id30b8"/>
            <target ref="id304c"/>
            <label kind="guard">eq(cr7) &amp;&amp;
EUs_ExecuteNext(46)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b8()</label>
        </transition>
        <transition>
            <source ref="id30b8"/>
            <target ref="id30bc"/>
            <label kind="guard">!eq(cr7) &amp;&amp;
EUs_ExecuteNext(46)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30b8()</label>
        </transition>
        <transition>
            <source ref="id3094"/>
            <target ref="id3098"/>
            <label kind="guard">EUs_ExecuteNext(37)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3094()</label>
        </transition>
        <transition>
            <source ref="id3098"/>
            <target ref="id309c"/>
            <label kind="guard">EUs_ExecuteNext(38)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3098()</label>
        </transition>
        <transition>
            <source ref="id309c"/>
            <target ref="id30a0"/>
            <label kind="guard">EUs_ExecuteNext(39)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_309c()</label>
        </transition>
        <transition>
            <source ref="id30a0"/>
            <target ref="id30a4"/>
            <label kind="guard">EUs_ExecuteNext(40)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a0()</label>
        </transition>
        <transition>
            <source ref="id30a4"/>
            <target ref="id30a8"/>
            <label kind="guard">EUs_ExecuteNext(41)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a4()</label>
        </transition>
        <transition>
            <source ref="id30a8"/>
            <target ref="id3094"/>
            <label kind="guard">nz() &amp;&amp;
EUs_ExecuteNext(42)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a8()</label>
        </transition>
        <transition>
            <source ref="id30a8"/>
            <target ref="id30ac"/>
            <label kind="guard">!nz() &amp;&amp;
EUs_ExecuteNext(42)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_30a8()</label>
        </transition>
        <transition>
            <source ref="id3080"/>
            <target ref="id3084"/>
            <label kind="guard">EUs_ExecuteNext(32)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3080()</label>
        </transition>
        <transition>
            <source ref="id3084"/>
            <target ref="id3088"/>
            <label kind="guard">EUs_ExecuteNext(33)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3084()</label>
        </transition>
        <transition>
            <source ref="id3088"/>
            <target ref="id308c"/>
            <label kind="guard">EUs_ExecuteNext(34)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3088()</label>
        </transition>
        <transition>
            <source ref="id308c"/>
            <target ref="id3090"/>
            <label kind="guard">EUs_ExecuteNext(35)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_308c()</label>
        </transition>
        <transition>
            <source ref="id3090"/>
            <target ref="id3094"/>
            <label kind="guard">EUs_ExecuteNext(36)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3090()</label>
        </transition>
        <transition>
            <source ref="id3068"/>
            <target ref="id306c"/>
            <label kind="guard">EUs_ExecuteNext(26)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3068()</label>
        </transition>
        <transition>
            <source ref="id306c"/>
            <target ref="id3070"/>
            <label kind="guard">EUs_ExecuteNext(27)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_306c()</label>
        </transition>
        <transition>
            <source ref="id3070"/>
            <target ref="id3074"/>
            <label kind="guard">EUs_ExecuteNext(28)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3070()</label>
        </transition>
        <transition>
            <source ref="id3074"/>
            <target ref="id3078"/>
            <label kind="guard">EUs_ExecuteNext(29)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3074()</label>
        </transition>
        <transition>
            <source ref="id3078"/>
            <target ref="id307c"/>
            <label kind="guard">EUs_ExecuteNext(30)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3078()</label>
        </transition>
        <transition>
            <source ref="id307c"/>
            <target ref="id30ac"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(31)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_307c()</label>
        </transition>
        <transition>
            <source ref="id307c"/>
            <target ref="id3080"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(31)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_307c()</label>
        </transition>
        <transition>
            <source ref="id305c"/>
            <target ref="id3060"/>
            <label kind="guard">EUs_ExecuteNext(23)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_305c()</label>
        </transition>
        <transition>
            <source ref="id3060"/>
            <target ref="id3064"/>
            <label kind="guard">EUs_ExecuteNext(24)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3060()</label>
        </transition>
        <transition>
            <source ref="id3064"/>
            <target ref="id30cc"/>
            <label kind="guard">eq(cr7) &amp;&amp;
EUs_ExecuteNext(25)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3064()</label>
        </transition>
        <transition>
            <source ref="id3064"/>
            <target ref="id3068"/>
            <label kind="guard">!eq(cr7) &amp;&amp;
EUs_ExecuteNext(25)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3064()</label>
        </transition>
        <transition>
            <source ref="id3058"/>
            <target ref="id305c"/>
            <label kind="guard">EUs_ExecuteNext(22)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3058()</label>
        </transition>
        <transition>
            <source ref="id304c"/>
            <target ref="id3050"/>
            <label kind="guard">EUs_ExecuteNext(19)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_304c()</label>
        </transition>
        <transition>
            <source ref="id3050"/>
            <target ref="id3054"/>
            <label kind="guard">EUs_ExecuteNext(20)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3050()</label>
        </transition>
        <transition>
            <source ref="id3054"/>
            <target ref="id305c"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(21)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3054()</label>
        </transition>
        <transition>
            <source ref="id3034"/>
            <target ref="id3038"/>
            <label kind="guard">EUs_ExecuteNext(13)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3034()</label>
        </transition>
        <transition>
            <source ref="id3038"/>
            <target ref="id303c"/>
            <label kind="guard">EUs_ExecuteNext(14)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3038()</label>
        </transition>
        <transition>
            <source ref="id303c"/>
            <target ref="id3040"/>
            <label kind="guard">EUs_ExecuteNext(15)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_303c()</label>
        </transition>
        <transition>
            <source ref="id3040"/>
            <target ref="id3044"/>
            <label kind="guard">EUs_ExecuteNext(16)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3040()</label>
        </transition>
        <transition>
            <source ref="id3044"/>
            <target ref="id3048"/>
            <label kind="guard">EUs_ExecuteNext(17)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3044()</label>
        </transition>
        <transition>
            <source ref="id3048"/>
            <target ref="id3068"/>
            <label kind="guard">true &amp;&amp;
EUs_ExecuteNext(18)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3048()</label>
        </transition>
        <transition>
            <source ref="id3000"/>
            <target ref="id3004"/>
            <label kind="guard">EUs_ExecuteNext(0)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3000()</label>
        </transition>
        <transition>
            <source ref="id3004"/>
            <target ref="id3008"/>
            <label kind="guard">EUs_ExecuteNext(1)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3004()</label>
        </transition>
        <transition>
            <source ref="id3008"/>
            <target ref="id300c"/>
            <label kind="guard">EUs_ExecuteNext(2)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3008()</label>
        </transition>
        <transition>
            <source ref="id300c"/>
            <target ref="id3010"/>
            <label kind="guard">EUs_ExecuteNext(3)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_300c()</label>
        </transition>
        <transition>
            <source ref="id3010"/>
            <target ref="id3014"/>
            <label kind="guard">EUs_ExecuteNext(4)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3010()</label>
        </transition>
        <transition>
            <source ref="id3014"/>
            <target ref="id3018"/>
            <label kind="guard">EUs_ExecuteNext(5)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3014()</label>
        </transition>
        <transition>
            <source ref="id3018"/>
            <target ref="id301c"/>
            <label kind="guard">EUs_ExecuteNext(6)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3018()</label>
        </transition>
        <transition>
            <source ref="id301c"/>
            <target ref="id3020"/>
            <label kind="guard">EUs_ExecuteNext(7)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_301c()</label>
        </transition>
        <transition>
            <source ref="id3020"/>
            <target ref="id3024"/>
            <label kind="guard">EUs_ExecuteNext(8)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3020()</label>
        </transition>
        <transition>
            <source ref="id3024"/>
            <target ref="id3028"/>
            <label kind="guard">EUs_ExecuteNext(9)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3024()</label>
        </transition>
        <transition>
            <source ref="id3028"/>
            <target ref="id302c"/>
            <label kind="guard">EUs_ExecuteNext(10)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3028()</label>
        </transition>
        <transition>
            <source ref="id302c"/>
            <target ref="id3030"/>
            <label kind="guard">EUs_ExecuteNext(11)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_302c()</label>
        </transition>
        <transition>
            <source ref="id3030"/>
            <target ref="id30d8"/>
            <label kind="guard">le(cr7) &amp;&amp;
EUs_ExecuteNext(12)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3030()</label>
        </transition>
        <transition>
            <source ref="id3030"/>
            <target ref="id3034"/>
            <label kind="guard">!le(cr7) &amp;&amp;
EUs_ExecuteNext(12)</label>
            <label kind="synchronisation">EUs_doStep?</label>
            <label kind="assignment">execute_3030()</label>
        </transition>
    </template>
    <template>
        <name>sched</name>
        <location id="id0" x="0" y="102" color="#ffc0cb">
            <name x="17" y="93">end</name>
            <committed/>
        </location>
        <location id="id1" x="0" y="0"/>
        <location id="id2" x="-34" y="102">
            <urgent/>
        </location>
        <init ref="id2"/>
        <transition>
            <source ref="id1"/>
            <target ref="id0"/>
            <label kind="synchronisation" x="17" y="34">_doTerminate?</label>
            <label kind="assignment" x="17" y="51">_clock = 0</label>
        </transition>
        <transition>
            <source ref="id1"/>
            <target ref="id1"/>
            <label kind="synchronisation" x="-59" y="-59">_do?</label>
            <nail x="0" y="-102"/>
            <nail x="34" y="-102"/>
            <nail x="34" y="0"/>
        </transition>
        <transition>
            <source ref="id2"/>
            <target ref="id1"/>
            <label kind="synchronisation" x="-144" y="25">_doInitialize!</label>
            <label kind="assignment" x="-144" y="42">_Init(),
_clock = 0</label>
            <nail x="-34" y="0"/>
        </transition>
    </template>
    <template>
        <name>Flash_Memory</name>
        <location id="id3" x="0" y="-102"/>
        <location id="id4" x="-102" y="204">
            <urgent/>
        </location>
        <location id="id5" x="-68" y="102"/>
        <location id="id6" x="-34" y="0">
            <label kind="invariant" x="-280" y="-25">Flash_clock &lt;= FLASH_LATENCY</label>
        </location>
        <init ref="id4"/>
        <transition>
            <source ref="id3"/>
            <target ref="id6"/>
            <label kind="guard" x="17" y="-93">Flash.burst_index != FLASH_BURST_MAX -1</label>
            <label kind="synchronisation" x="17" y="-76">Flash_doneBurst[Flash.burst_index]!</label>
            <label kind="assignment" x="17" y="-59">IMU_FillBuffer_Update(),
Flash.burst_index++,
Flash_clock = 0</label>
            <nail x="0" y="0"/>
        </transition>
        <transition>
            <source ref="id4"/>
            <target ref="id5"/>
            <label kind="synchronisation" x="-212" y="136">_doInitialize?</label>
            <label kind="assignment" x="-212" y="153">Flash_Init()</label>
            <nail x="-102" y="102"/>
        </transition>
        <transition>
            <source ref="id5"/>
            <target ref="id6"/>
            <label kind="guard" x="-246" y="8">!Flash_IsTerminated()</label>
            <label kind="synchronisation" x="-246" y="25">Flash_doBurst?</label>
            <label kind="assignment" x="-246" y="42">IMU_FillBuffer_Set(),
Flash.burst_index = 0,
Flash_clock = 0</label>
            <nail x="-68" y="0"/>
        </transition>
        <transition>
            <source ref="id3"/>
            <target ref="id5"/>
            <label kind="guard" x="17" y="17">Flash.burst_index == FLASH_BURST_MAX -1</label>
            <label kind="synchronisation" x="17" y="34">Flash_doneBurst[Flash.burst_index]!</label>
            <label kind="assignment" x="17" y="51">IMU_FillBuffer_Update(),
IMU_ICache_Update()</label>
            <nail x="0" y="102"/>
        </transition>
        <transition>
            <source ref="id6"/>
            <target ref="id3"/>
            <label kind="guard" x="-289" y="-85">Flash_clock == FLASH_LATENCY</label>
            <label kind="synchronisation" x="-289" y="-68">EUs_doStep?</label>
            <nail x="-34" y="-102"/>
        </transition>
    </template>
    <template>
        <name>Static_RAM</name>
        <location id="id7" x="136" y="306">
            <urgent/>
        </location>
        <location id="id8" x="170" y="204"/>
        <location id="id9" x="204" y="102">
            <label kind="invariant" x="221" y="110">SRAM_clock &lt;= SRAM_LATENCY</label>
        </location>
        <init ref="id7"/>
        <transition>
            <source ref="id7"/>
            <target ref="id8"/>
            <label kind="synchronisation" x="25" y="238">_doInitialize?</label>
            <label kind="assignment" x="25" y="255">SRAM_Init()</label>
            <nail x="136" y="289"/>
            <nail x="136" y="204"/>
        </transition>
        <transition>
            <source ref="id8"/>
            <target ref="id9"/>
            <label kind="guard" x="-34" y="110">!SRAM_IsTerminated() &amp;&amp;
SRAM_IsAccessed()</label>
            <label kind="synchronisation" x="-34" y="144">EUs_doStep?</label>
            <label kind="assignment" x="-34" y="161">SRAM_clock = 0,
SRAM.executing = true</label>
            <nail x="170" y="102"/>
        </transition>
        <transition>
            <source ref="id9"/>
            <target ref="id8"/>
            <label kind="guard" x="221" y="144">SRAM_clock == SRAM_LATENCY</label>
            <label kind="synchronisation" x="221" y="161">EUs_doStep?</label>
            <label kind="assignment" x="221" y="178">SRAM.executing = false</label>
            <nail x="204" y="204"/>
        </transition>
    </template>
    <template>
        <name>Instruction_Memory_Unit</name>
        <location id="id10" x="-612" y="-102"/>
        <location id="id11" x="-782" y="-102"/>
        <location id="id12" x="-646" y="0">
            <label kind="invariant" x="-629" y="17">IMU_clock &lt;= 1</label>
        </location>
        <location id="id13" x="-816" y="0"/>
        <location id="id14" x="-850" y="102"/>
        <location id="id15" x="-884" y="204">
            <urgent/>
        </location>
        <init ref="id15"/>
        <transition>
            <source ref="id10"/>
            <target ref="id12"/>
            <label kind="synchronisation" x="-595" y="-68">IMU_doneAccess!</label>
            <label kind="assignment" x="-595" y="-51">IMU_clock = 0</label>
            <nail x="-612" y="0"/>
        </transition>
        <transition>
            <source ref="id12"/>
            <target ref="id14"/>
            <label kind="guard" x="-629" y="51">IMU_clock == 1</label>
            <label kind="synchronisation" x="-629" y="68">EUs_doStep?</label>
            <nail x="-646" y="102"/>
        </transition>
        <transition>
            <source ref="id11"/>
            <target ref="id10"/>
            <label kind="synchronisation" x="-765" y="-144">Flash_doneBurst[0]?</label>
            <label kind="assignment" x="-765" y="-127">IMU_clock = 0</label>
        </transition>
        <transition>
            <source ref="id13"/>
            <target ref="id11"/>
            <label kind="guard" x="-969" y="-76">IMU_ICache_Miss()</label>
            <label kind="synchronisation" x="-969" y="-59">Flash_doBurst!</label>
            <label kind="assignment" x="-969" y="-42">_M_ICacheMiss++</label>
            <nail x="-816" y="-102"/>
        </transition>
        <transition>
            <source ref="id13"/>
            <target ref="id12"/>
            <label kind="guard" x="-799" y="-42">IMU_ICache_Hit() ||
IMU_FillBuffer_Hit()</label>
            <label kind="synchronisation" x="-799" y="8">IMU_doneAccess!</label>
            <label kind="assignment" x="-799" y="25">IMU_clock = 0,
_M_ICacheHit++</label>
        </transition>
        <transition>
            <source ref="id14"/>
            <target ref="id13"/>
            <label kind="guard" x="-1020" y="25">!IMU_IsTerminated()</label>
            <label kind="synchronisation" x="-1020" y="42">IMU_doAccess?</label>
            <label kind="assignment" x="-1020" y="59">IMU_Set()</label>
            <nail x="-850" y="0"/>
        </transition>
        <transition>
            <source ref="id15"/>
            <target ref="id14"/>
            <label kind="synchronisation" x="-994" y="136">_doInitialize?</label>
            <label kind="assignment" x="-994" y="153">IMU_Init()</label>
            <nail x="-884" y="102"/>
        </transition>
    </template>
    <template>
        <name>Instruction_and_Control_Unit</name>
        <location id="id16" x="272" y="68">
            <urgent/>
        </location>
        <location id="id17" x="340" y="-136"/>
        <location id="id18" x="306" y="-34"/>
        <init ref="id16"/>
        <transition>
            <source ref="id16"/>
            <target ref="id18"/>
            <label kind="synchronisation" x="161" y="0">_doInitialize?</label>
            <label kind="assignment" x="161" y="17">InCU_Init()</label>
            <nail x="272" y="-34"/>
        </transition>
        <transition>
            <source ref="id17"/>
            <target ref="id18"/>
            <label kind="synchronisation" x="357" y="-102">IMU_doneAccess?</label>
            <label kind="assignment" x="357" y="-85">InCU_Update()</label>
            <nail x="340" y="-34"/>
        </transition>
        <transition>
            <source ref="id18"/>
            <target ref="id17"/>
            <label kind="guard" x="110" y="-110">!InCU_IsTerminated() &amp;&amp;
!InCU_IBuff_IsFull()</label>
            <label kind="synchronisation" x="110" y="-76">IMU_doAccess!</label>
            <nail x="306" y="-136"/>
        </transition>
    </template>
    <template>
        <name x="5" y="5">Execution_Units</name>
        <location id="id19" x="238" y="102"/>
        <location id="id20" x="204" y="102">
            <urgent/>
        </location>
        <location id="id21" x="238" y="0">
            <label kind="invariant" x="102" y="-25">EUs_clock  &lt;= 1</label>
        </location>
        <init ref="id20"/>
        <transition>
            <source ref="id20"/>
            <target ref="id21"/>
            <label kind="synchronisation" x="59" y="25">_doInitialize?</label>
            <label kind="assignment" x="59" y="42">EUs_Init(),
EUs_clock  = 0</label>
            <nail x="204" y="0"/>
        </transition>
        <transition>
            <source ref="id21"/>
            <target ref="id19"/>
            <label kind="guard" x="255" y="34">EUs_IsTerminated()</label>
            <label kind="synchronisation" x="255" y="51">_doTerminate!</label>
        </transition>
        <transition>
            <source ref="id21"/>
            <target ref="id21"/>
            <label kind="guard" x="289" y="-93">!EUs_IsTerminated() &amp;&amp;
EUs_clock == 1</label>
            <label kind="synchronisation" x="289" y="-59">EUs_doStep!</label>
            <label kind="assignment" x="289" y="-42">EUs_Update(),
EUs_clock  = 0</label>
            <nail x="238" y="-102"/>
            <nail x="272" y="-102"/>
            <nail x="272" y="0"/>
        </transition>
    </template>
    <system>system
    sched
  , Flash_Memory
  , Static_RAM
  , Instruction_Memory_Unit
  , Instruction_and_Control_Unit
  , Execution_Units
  , Binary
  ;
</system>
    <queries>
        <query>
            <formula>A&lt;&gt; sched.end
			</formula>
            <comment>...
			</comment>
        </query>
        <query>
            <formula>sup: _clock
			</formula>
            <comment>...
			</comment>
        </query>
    </queries>
</nta>
