<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>int cr, ctr, xer, r3, r7, r10;

const int _REGS_MAX = 8;
const int _INST_MAX = 64;
typedef struct {
  int  addr;
  int  cycles;
  bool do_branch;
  int  target;
  bool do_memory;
  int  read_regs[_REGS_MAX];
  int  write_regs[_REGS_MAX];
} _Inst_t;

const _Inst_t _INSTS[_INST_MAX] = {

  /* BB0 */
  /*  3000: li r8,1                  -  0 */ { 12288, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  3004: li r10,3                 -  1 */ { 12292, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3008: li r9,1                  -  2 */ { 12296, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },
  /*  300c: li r7,28                 -  3 */ { 12300, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3010: mtspr 120,r7             -  4 */ { 12304, 1, false, _INST_MAX, false, {   0,   0,   0,  32,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   2 } },
  /*  3014: cmpwi cr7,r3,1           -  5 */ { 12308, 1, false, _INST_MAX, false, {   0,   0,   0,   2,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0,   0,   0,   1 } },
  /*  3018: bgt- cr7,3034            -  6 */ { 12312, 1, true,         13, false, {   0,   0,   0,   0,   0,   0,   0, 129 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB1 */
  /*  301c: b 3044                   -  7 */ { 12316, 1, true,         17, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB2 */
  /*  3020: add r7,r9,r8             -  8 */ { 12320, 1, false, _INST_MAX, false, {   0,   0,   0, 192,   0,   0,   0,   0 }, {   0,   0,   0,  32,   0,   0,   0,   0 } },
  /*  3024: addi r10,r10,1           -  9 */ { 12324, 1, false, _INST_MAX, false, {   0,   0,   1,   0,   0,   0,   0,   0 }, {   0,   0,   1,   0,   0,   0,   0,   0 } },
  /*  3028: mr r8,r9                 - 10 */ { 12328, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,  64,   0,   0,   0,   0 } },
  /*  302c: bdz- 3040                - 11 */ { 12332, 1, true,         16, false, {   0,   0,   0,   0,   0,   0,   0, 130 }, {   0,   0,   0,   0,   0,   0,   0,   2 } },

  /* BB3 */
  /*  3030: mr r9,r7                 - 12 */ { 12336, 1, false, _INST_MAX, false, {   0,   0,   0,  32,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },

  /* BB4 */
  /*  3034: cmpw cr7,r3,r10          - 13 */ { 12340, 1, false, _INST_MAX, false, {   0,   0,   1,   2,   0,   0,   8,   0 }, {   0,   0,   0,   0,   0,   0,   0,   1 } },
  /*  3038: bge+ cr7,3020            - 14 */ { 12344, 1, true,          8, false, {   0,   0,   0,   0,   0,   0,   0, 129 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB5 */
  /*  303c: b 3044                   - 15 */ { 12348, 1, true,         17, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB6 */
  /*  3040: mr r9,r7                 - 16 */ { 12352, 1, false, _INST_MAX, false, {   0,   0,   0,  32,   0,   0,   0,   0 }, {   0,   0,   0, 128,   0,   0,   0,   0 } },

  /* BB7 */
  /*  3044: mr r3,r9                 - 17 */ { 12356, 1, false, _INST_MAX, false, {   0,   0,   0, 128,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  3048: bclr- 20,lt              - 18 */ { 12360, 1, true,         24, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB8 */
  /*  304c: stwu r1,-16(r1)          - 19 */ { 12364, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3050: mfspr r0,100             - 20 */ { 12368, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,  32 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  3054: stw r0,20(r1)            - 21 */ { 12372, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 192,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  3058: li r3,30                 - 22 */ { 12376, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   2,   0,   0,   0,   0 } },
  /*  305c: bl 3000                  - 23 */ { 12380, 1, true,          0, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB9 */
  /*  3060: lwz r0,20(r1)            - 24 */ { 12384, 1, false, _INST_MAX, true,  {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0,  64,   0,   0,   0 } },
  /*  3064: mtspr 100,r0             - 25 */ { 12388, 1, false, _INST_MAX, false, {   0,   0,   0,   0,  64,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,  32 } },
  /*  3068: addi r1,r1,16            - 26 */ { 12392, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  306c: bclr- 20,lt              - 27 */ { 12396, 1, true,         31, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* BB10 */
  /*  3070: lis r1,1                 - 28 */ { 12400, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3074: ori r1,r1,49276          - 29 */ { 12404, 1, false, _INST_MAX, false, {   0,   0,   0,   0, 128,   0,   0,   0 }, {   0,   0,   0,   0, 128,   0,   0,   0 } },
  /*  3078: bl 304c                  - 30 */ { 12408, 1, true,         19, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 160 } },

  /* BB11 */
  /*  307c: b 307c                   - 31 */ { 12412, 1, true,         31, false, {   0,   0,   0,   0,   0,   0,   0, 128 }, {   0,   0,   0,   0,   0,   0,   0, 128 } },

  /* Nops */
  /*  xxxx: ---                      - 32 */ { 12416, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 33 */ { 12420, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 34 */ { 12424, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 35 */ { 12428, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 36 */ { 12432, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 37 */ { 12436, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 38 */ { 12440, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 39 */ { 12444, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 40 */ { 12448, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 41 */ { 12452, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 42 */ { 12456, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 43 */ { 12460, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 44 */ { 12464, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 45 */ { 12468, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 46 */ { 12472, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 47 */ { 12476, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 48 */ { 12480, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 49 */ { 12484, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 50 */ { 12488, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 51 */ { 12492, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 52 */ { 12496, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 53 */ { 12500, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 54 */ { 12504, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 55 */ { 12508, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 56 */ { 12512, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 57 */ { 12516, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 58 */ { 12520, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 59 */ { 12524, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 60 */ { 12528, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 61 */ { 12532, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 62 */ { 12536, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } },
  /*  xxxx: ---                      - 63 */ { 12540, 1, false, _INST_MAX, false, {   0,   0,   0,   0,   0,   0,   0,   0 }, {   0,   0,   0,   0,   0,   0,   0,   0 } }
};

/* TODO:
 *  - microbench for memory access time
 *  - set proper values for _Inst_t.cycles
 *  - should remove '_do'?
 */

//////////////////////////////////////////
////////////////// Types and Constants: //
//////////////////////////////////////////

/* Binary: */

typedef struct {
  int index; // in bit field
  int value; // when set alone
} B_BitField_t;

/* Flash: */

const int FLASH_BURST_MAX =  4;
typedef struct {
  int[0, FLASH_BURST_MAX] burst_index;
} Flash_t;

const int FLASH_LATENCY = 10; // TODO: arbitrary; to set correctly

/* Static RAM (SRAM): */

const int SRAM_LATENCY = 10; // TODO: arbitrary; to set correctly

typedef struct {
  bool executing;
} SRAM_t;

/* Instruction Memory Unit (IMU): */

const int IMU_WAYS_MAX              =  2;
const int IMU_SETS_MAX              = 64;
const int IMU_FILLBUFFER_DWORDS_MAX =  4;

const int IMU_FIRST_USED_SET = (_INSTS[            0].addr / 32) % IMU_SETS_MAX; // First 'in-use-at-run-time' set
const int IMU_LAST_USED_SET  = (_INSTS[_INST_MAX -32].addr / 32) % IMU_SETS_MAX; // Last  'in-use-at-run-time' set
const int IMU_USED_SETS_MAX  = IMU_LAST_USED_SET - IMU_FIRST_USED_SET +1;        // Number of 'used' sets

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[0, IMU_WAYS_MAX -1] rp_way;
  int tags[IMU_WAYS_MAX][IMU_USED_SETS_MAX];
} IMU_ICache_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1, IMU_FILLBUFFER_DWORDS_MAX -1] dword;
  int[-1, IMU_SETS_MAX -1] set;
  int tag; // TODO: set a range as [-1, ???]
  bool filled[IMU_FILLBUFFER_DWORDS_MAX];
} IMU_FillBuffer_t;
const IMU_FillBuffer_t IMU_EMPTY_FILLBUFFER_LINE = { -1, -1, -1, -1, { false, false, false, false } };

typedef struct {
  IMU_FillBuffer_t FillBuffer;
  IMU_ICache_t ICache;
} IMU_t;

const int IMU_CACHE_HIT       = 0;
const int IMU_FILLBUFFER_HIT  = 1;
const int IMU_FILLBUFFER_MISS = 2;
const int IMU_CACHE_MISS      = 3;

/* Instruction and Control Unit (InCU): */

const int INCU_STRONGLY_NOT_TAKEN = 0;
const int INCU_WEAKLY___NOT_TAKEN = 1;
const int INCU_WEAKLY_______TAKEN = 2;
const int INCU_STRONGLY_____TAKEN = 3;
typedef struct {
  int[-1, _INST_MAX -1] index;
  int[-1, INCU_STRONGLY_____TAKEN +1] prediction;
} InCU_BTB_Entry_t;

const int INCU_BTB_MAX = 8;
typedef struct {
  int[0, 8] top;
  InCU_BTB_Entry_t buffer[INCU_BTB_MAX];
} InCU_BTB_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IBuff_Entry_t;
const InCU_IBuff_Entry_t INCU_EMPTY_IBUFF_ENTRY = { -1, false, false, false };

const int INCU_IBUFF_MAX = 8;
typedef struct {
  int[0, INCU_IBUFF_MAX] count;
  InCU_IBuff_Entry_t buffer[INCU_IBUFF_MAX];
} InCU_IBuff_t;

typedef struct {
  int[-1, _INST_MAX -1] index;
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
} InCU_IR_t;
const InCU_IR_t INCU_EMPTY_IR = { -1, false, false, false };

typedef struct {
  InCU_BTB_t BTB;
  int PC;
  InCU_IBuff_t IBuff;
  InCU_IR_t IR;
} InCU_t;

/* Execution Units (EUs): */

const int EUS_PIPELINE_D   = 0;
const int EUS_PIPELINE_E   = 1;
const int EUS_PIPELINE_M   = 2;
const int EUS_PIPELINE_W   = 3;
const int EUS_PIPELINE_MAX = 4;
const int EUS_CYCLES_MAX   = 5; // TODO: arbitrary; set properly
typedef struct {
  int pipeline[EUS_PIPELINE_MAX];
  bool predict_taken;
  bool dynamic_prediction;
  bool taken;
  int cycles;
} EUs_t;

//////////////////////////////////////////
///////////////////////// Declarations: //
//////////////////////////////////////////

/* (global:) */

clock _clock;

broadcast chan _doInitialize;
   urgent chan _doTerminate;
   urgent chan _do;

bool _mustTerminate;
bool _predict_taken;
bool _dynamic_prediction;
bool _taken;

/* Flash: */

Flash_t Flash;
clock Flash_clock;

urgent           chan Flash_doBurst;
urgent broadcast chan Flash_doneBurst[FLASH_BURST_MAX];

/* Static RAM (SRAM): */

SRAM_t SRAM;
clock SRAM_clock;

chan SRAM_doAccess;
chan SRAM_doneAccess;

/* Instruction Memory Unit (IMU): */

IMU_t IMU;
clock IMU_clock;

                 chan IMU_doneFill;
urgent           chan IMU_doAccess;
urgent broadcast chan IMU_doneAccess;

/* Instruction and Control Unit (InCU): */

InCU_t InCU;

/* Execution Units (EUs): */

EUs_t EUs;
clock EUs_clock;
broadcast chan EUs_doStep;

//////////////////////////////////////////
//////////////////////////// Functions: //
//////////////////////////////////////////

/* (global:) */

void _Init() {
  _mustTerminate      = false;
  _predict_taken      = false;
  _dynamic_prediction = false;
  _taken              = false;
}

/* Binary: */

void B_Init() {
  cr  = -1;
  ctr = -1;
  xer = -1;
  r3  = -1;
  r7  = -1;
  r10 = -1;
}

bool _bit(int field, int n) { return (((field &gt;&gt; n) % 2) == 1); }

const B_BitField_t SO = { 0, 1 }; // == 0b0001
const B_BitField_t EQ = { 1, 2 }; // == 0b0010
const B_BitField_t GT = { 2, 4 }; // == 0b0100
const B_BitField_t LT = { 3, 8 }; // == 0b1000

bool  z  () { return ((ctr -1) == 0);    }
bool eq  () { return _bit(cr, EQ.index); }
bool gt  () { return _bit(cr, GT.index); }
bool lt  () { return _bit(cr, LT.index); }
bool nz  () { return !z();               }
bool neq () { return !eq();              }
bool le  () { return !gt();              }
bool ge  () { return !lt();              }

// Compare instructions:

void cmp  (int &amp;cr,int rA, int rB  ) { if (rA &lt; rB) { cr = LT.value; }
                                  else if (rA &gt; rB) { cr = GT.value; }
                                  else              { cr = EQ.value; } }
void cmpw (int &amp;cr,int rA, int rB  ) { cmp(cr, rA, rB);                }
void cmpi (int &amp;cr,int rA, int SIMM) { cmp(cr, rA, SIMM);              }

// Arithmetic instructions:

void add   ( int &amp;rD, int rA, int rB   ) { rD = rA + rB;         }
void addi  ( int &amp;rD, int rA, int SIMM ) { add  (rD, rA,  SIMM); }
void sub   ( int &amp;rD, int rA, int rB   ) { add  (rD, rA, -rB  ); }
void subi  ( int &amp;rD, int rA, int SIMM ) { addi (rD, rA, -SIMM); }
void li    ( int &amp;rD,         int SIMM ) { addi (rD,  0,  SIMM); }

// Others:

void mtctr (          int rS           ) { ctr = rS;           }

// Branching instructions:

void bc(int BO, int BI, int target_addr) {
  bool ctr_ok, cond_ok;
  if (!_bit(BO, 2)) { ctr = ctr -1; }
  ctr_ok  = _bit(BO, 2) || ((ctr != 0) ^ _bit(BO, 1)); // ^ is XOR
  cond_ok = _bit(BO, 4) || (_bit(cr, BI) == _bit(BO, 3));
  if (ctr_ok &amp;&amp; cond_ok) {
    //jmp(target_addr); // TODO: uncomment(?)
  }
}

const int BO_not_ctr_not_cond =  0;
const int BO_____ctr_not_cond =  2;
const int BO_________not_cond =  4;
const int BO_not_ctr_____cond =  8;
const int BO_____ctr_____cond = 10;
const int BO_____________cond = 12;
const int BO_not_ctr_________ = 16;
const int BO_____ctr_________ = 18;

void be   (int target_addr) { bc(BO_____________cond, EQ.index, target_addr); }
void bgt  (int target_addr) { bc(BO_____________cond, GT.index, target_addr); }
void blt  (int target_addr) { bc(BO_____________cond, LT.index, target_addr); }
void bz   (int target_addr) { bc(BO_____ctr_________, 0,        target_addr); }
void bdz  (int target_addr) { bc(BO_____ctr_________, 0,        target_addr); }

void bne  (int target_addr) { bc(BO_________not_cond, EQ.index, target_addr); }
void bge  (int target_addr) { bc(BO_________not_cond, LT.index, target_addr); }
void ble  (int target_addr) { bc(BO_________not_cond, GT.index, target_addr); }
void bnz  (int target_addr) { bc(BO_not_ctr_________, 0,        target_addr); }
void bdnz (int target_addr) { bc(BO_not_ctr_________, 0,        target_addr); }

// TODO: generate from tool (currently hand written)
void execute_3004() { li(r10, 3);        }
void execute_300c() { li(r7, 4);         } // TODO: modified for simulation ease; set back to "28" for real testing
void execute_3010() { mtctr(r7);         }
void execute_3014() { cmpi(cr, r3, 1);   }
void execute_3018() { bgt(12340);        }
void execute_3024() { addi(r10, r10, 1); }
void execute_302c() { bdz(12352);        }
void execute_3034() { cmpw(cr, r3, r10); }
void execute_3038() { bge(12320);        }
void execute_3058() { li(r3, 30);        }

/* Flash: */

void Flash_Init() {
  Flash.burst_index = 0;
}

bool Flash_IsTerminated() {
  return _mustTerminate;
}

/* Static RAM (SRAM): */

void SRAM_Init() {
  SRAM.executing = false;
}

bool SRAM_IsAccessed() {
  return ((EUs.pipeline[EUS_PIPELINE_E] != -1) &amp;&amp;
          _INSTS[EUs.pipeline[EUS_PIPELINE_E]].do_memory);
}

bool SRAM_IsTerminated() {
  return _mustTerminate;
}

/* Instruction Memory Unit (IMU): */

void IMU_Init(){
  int w, s;

  IMU.FillBuffer   = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.ICache.index = -1;
  IMU.ICache.rp_way =  0;
  for (w = 0; w &lt; IMU_WAYS_MAX; ++w)
    for (s = 0; s &lt; IMU_USED_SETS_MAX; ++s)
      IMU.ICache.tags[w][s] = -1;
}

bool IMU_IsAccessed(int index) {
  return (IMU.ICache.index == index);
}

bool IMU_IsTerminated() {
  return _mustTerminate;
}

void IMU_Set() {
  IMU.ICache.index = InCU.PC;
}

void IMU_FillBuffer_Update() {
  IMU.FillBuffer.filled[IMU.FillBuffer.dword] = true;
  IMU.FillBuffer.dword = (IMU.FillBuffer.dword +1) % IMU_FILLBUFFER_DWORDS_MAX;
}

int IMU_ICache_Lookup() {
  // return wether the current instruction is in the instruction cache (or line buffer) or not
  int                          addr  = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);
  int                          dword = (addr /   8) % IMU_FILLBUFFER_DWORDS_MAX;

  // Is in cache?
  int icache_tag;
  for (way = 0; way &lt; IMU_WAYS_MAX; ++way) {
    icache_tag = IMU.ICache.tags[way][set];

    if (icache_tag != -1
    &amp;&amp;  icache_tag == tag)
      return IMU_CACHE_HIT;
  }

  // Is in fill buffer?
  if (IMU.FillBuffer.set == set
  &amp;&amp;  IMU.FillBuffer.tag == tag) {
    if (IMU.FillBuffer.filled[dword]) return IMU_FILLBUFFER_HIT;
    else                              return IMU_FILLBUFFER_MISS;
  }

  return IMU_CACHE_MISS;
}

bool IMU_ICache_Hit      () { return ( IMU_ICache_Lookup() == IMU_CACHE_HIT       ); }
bool IMU_FillBuffer_Hit  () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_HIT  ); }
bool IMU_FillBuffer_Miss () { return ( IMU_ICache_Lookup() == IMU_FILLBUFFER_MISS ); }
bool IMU_ICache_Miss     () { return ( IMU_ICache_Lookup() == IMU_CACHE_MISS      ); }

void IMU_ICache_Update() {
  // on a miss, insert the current instruction on the instruction cache
  int                          addr = _INSTS[IMU.FillBuffer.index].addr;
  int[0, IMU_WAYS_MAX]         way;
  int[0, IMU_USED_SETS_MAX -1] set   = (addr /  32) % IMU_SETS_MAX;
  int                          tag   =  addr / (32  * IMU_SETS_MAX);

  bool found = false;

  way = 0;
  while (!found &amp;&amp; way &lt; IMU_WAYS_MAX)
    if (IMU.ICache.tags[way][set] == -1)
      found = true;
    else ++way; // conditional increment (thus not a for loop)
  if (found) {
    // free slot found
    IMU.ICache.tags[way][set] = tag;

  } else {
    // no free slot found (pseudo round-robin replacement policy)
    way = IMU.ICache.rp_way;
    IMU.ICache.tags[way][set] = tag;
    IMU.ICache.rp_way = (IMU.ICache.rp_way +1) % IMU_WAYS_MAX;
  }
}

void IMU_FillBuffer_Set() {
  int                     addr = _INSTS[IMU.ICache.index].addr;
  int[0, IMU_SETS_MAX -1] set  = (addr /  32) % IMU_SETS_MAX;  // TODO: add _USED
  int                     tag  =  addr / (32  * IMU_SETS_MAX);

  IMU.FillBuffer       = IMU_EMPTY_FILLBUFFER_LINE;
  IMU.FillBuffer.index = IMU.ICache.index;
  IMU.FillBuffer.dword = (addr / 8) % IMU_FILLBUFFER_DWORDS_MAX;
  IMU.FillBuffer.set   = set;
  IMU.FillBuffer.tag   = tag;
}

/* Instruction and Control Unit (InCU): */

void InCU_Init() {
  int i;

  InCU.BTB.top = 0;
  for (i = 0; i &lt; INCU_BTB_MAX; ++i) {
    InCU.BTB.buffer[i].index = -1;
    InCU.BTB.buffer[i].prediction = -1;
  }

  InCU.PC = -1;
  InCU.IBuff.count = 0;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i)
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;  
  InCU.IR = INCU_EMPTY_IR;
}

int InCU_BTB_Predict(int index) {
  int i;
  int btb_index = -1;

  if (_INSTS[index].do_branch)
    for (i = 0; i &lt; INCU_BTB_MAX; ++i)
      if (InCU.BTB.buffer[i].index == index)
        btb_index = i;

  if (btb_index != -1) {
    if (InCU.BTB.buffer[btb_index].prediction == INCU_WEAKLY_______TAKEN
    ||  InCU.BTB.buffer[btb_index].prediction == INCU_STRONGLY_____TAKEN)
      return _INSTS[index].target;
  }

  return index +1;
}

void InCU_BTB_Update(int index, bool taken) {
  int i;
  int btb_index = -1;

  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    if (InCU.BTB.buffer[i].index == index)
      btb_index = i;
    
  if (btb_index != -1) {
    // Fix prediction
    if (taken) {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction +1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &gt; INCU_STRONGLY_____TAKEN) ? INCU_STRONGLY_____TAKEN : InCU.BTB.buffer[btb_index].prediction;
    } else {
      InCU.BTB.buffer[btb_index].prediction =  InCU.BTB.buffer[btb_index].prediction -1;
      InCU.BTB.buffer[btb_index].prediction = (InCU.BTB.buffer[btb_index].prediction &lt; INCU_STRONGLY_NOT_TAKEN) ? INCU_STRONGLY_NOT_TAKEN : InCU.BTB.buffer[btb_index].prediction;
    }

  } else {
    /* "On initial allocation of an entry to the BTB for a taken branch,
     *  the counter is initialized to the weakly-taken state."
     *  (cf. e200z4 manual, p. 4-7) */
    if (taken) { // Insert (FIFO)
      InCU_BTB_Entry_t new_entry = {index, INCU_WEAKLY_______TAKEN};

      InCU.BTB.buffer[InCU.BTB.top] = new_entry;
      InCU.BTB.top = (InCU.BTB.top +1) % INCU_BTB_MAX;
    }
  }
}

void InCU_PC_Update() {
  int i;
  int index;
  
  if (InCU.PC != IMU.ICache.index)
    return;

  InCU.PC = InCU_BTB_Predict(InCU.PC);
  for (i = 0; i &lt; INCU_BTB_MAX; ++i)
    if (InCU.BTB.buffer[i].index == InCU.PC) {
      
      _dynamic_prediction = true;
      index = InCU_BTB_Predict(InCU.PC);
      if (index != InCU.PC +1)
	    _predict_taken = true;

      return;
    }
}

bool InCU_IBuff_IsFull() {
  return (InCU.IBuff.count == INCU_IBUFF_MAX);
}

void InCU_IBuff_Push() {
  if (InCU.PC != IMU.ICache.index)
    return;

  if (InCU.IR.index == -1) {
    InCU.IR.index              = IMU.ICache.index;
    InCU.IR.predict_taken      = _predict_taken;
    InCU.IR.dynamic_prediction = _dynamic_prediction;
    InCU.IR.taken              = _taken;
    
  } else {
    InCU.IBuff.buffer[InCU.IBuff.count].index              = IMU.ICache.index;
    InCU.IBuff.buffer[InCU.IBuff.count].predict_taken      = _predict_taken;
    InCU.IBuff.buffer[InCU.IBuff.count].dynamic_prediction = _dynamic_prediction;
    InCU.IBuff.buffer[InCU.IBuff.count].taken              = _taken;
    InCU.IBuff.count++;
  }
  
  _predict_taken      = false;
  _dynamic_prediction = false;
  _taken              = false;
}

InCU_IR_t InCU_IBuff_Pop() {
  InCU_IR_t entry = INCU_EMPTY_IR;

  if (InCU.IBuff.count &gt; 0) {
    entry.index              = InCU.IBuff.buffer[0].index;
    entry.predict_taken      = InCU.IBuff.buffer[0].predict_taken;
    entry.dynamic_prediction = InCU.IBuff.buffer[0].dynamic_prediction;
    entry.taken              = InCU.IBuff.buffer[0].taken;
    
    InCU.IBuff.buffer[0] = InCU.IBuff.buffer[1];
    InCU.IBuff.buffer[1] = InCU.IBuff.buffer[2];
    InCU.IBuff.buffer[2] = InCU.IBuff.buffer[3];
    InCU.IBuff.buffer[3] = InCU.IBuff.buffer[4];
    InCU.IBuff.buffer[4] = InCU.IBuff.buffer[5];
    InCU.IBuff.buffer[5] = InCU.IBuff.buffer[6];
    InCU.IBuff.buffer[6] = InCU.IBuff.buffer[7];
    InCU.IBuff.buffer[7] = INCU_EMPTY_IBUFF_ENTRY;
    
    InCU.IBuff.count--;
    return entry;
  }

  return entry;
}

bool InCU_IsTerminated() {
  return _mustTerminate;
}

void InCU_Flush() {
  int i;

  InCU.IBuff.count = 0;
  for (i = 0; i &lt; INCU_IBUFF_MAX; ++i)
    InCU.IBuff.buffer[i] = INCU_EMPTY_IBUFF_ENTRY;
  InCU.IR = INCU_EMPTY_IR;
}

void InCU_Update() {
  InCU_IBuff_Push();
  InCU_PC_Update();
}

/* Execution Units (EUs): */

void EUs_Init() {
  int i;

  for (i = 0; i &lt; EUS_PIPELINE_MAX; ++i)
    EUs.pipeline[i] = -1;
  
  EUs.predict_taken      = false;
  EUs.dynamic_prediction = false;
  EUs.taken              = false;
  
  EUs.cycles = 0;
}

bool EUs_IsExecuting(int index) {
  return (EUs.pipeline[EUS_PIPELINE_D] == index);
}

bool EUs_IsTerminated() {
  return (_mustTerminate
       &amp;&amp; InCU.IR.index                == -1
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_D] == -1
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == -1
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] == -1
       &amp;&amp; EUs.pipeline[EUS_PIPELINE_W] == -1);
}

bool EUs_D_DoStall() { return EUs.pipeline[EUS_PIPELINE_D] != -1; }
bool EUs_E_DoStall() { return EUs.cycles != 0 || EUs.pipeline[EUS_PIPELINE_E] != -1; }
bool EUs_M_DoStall() { return SRAM.executing || EUs.cycles != 0 || EUs.pipeline[EUS_PIPELINE_M] != -1; }
bool EUs_W_DoStall() { return SRAM.executing; }

void EUs_Update() {
  bool do_stall = false;
  
  // Execute W (if doesn't stall):
  EUs.pipeline[EUS_PIPELINE_W] = -1;
  if (!EUs_W_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_W] = EUs.pipeline[EUS_PIPELINE_M];
    EUs.pipeline[EUS_PIPELINE_M] = -1;
  }

  // Execute M (if doesn't stall):
  if (!EUs_M_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_M] = EUs.pipeline[EUS_PIPELINE_E];
    EUs.pipeline[EUS_PIPELINE_E] = -1;
  }

  // Execute E (if doesn't stall):
  if (EUs.cycles &gt; 0)
    EUs.cycles--;

  /* Don't move inst in D to E if there are
   * data dependencies between D and M:
   */
  if (EUs.pipeline[EUS_PIPELINE_D] != -1
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_E] == -1
   &amp;&amp; EUs.pipeline[EUS_PIPELINE_M] != -1
   &amp;&amp; _INSTS[EUs.pipeline[EUS_PIPELINE_M]].do_memory) {
    int i;
    _Inst_t inD = _INSTS[EUs.pipeline[EUS_PIPELINE_D]];
    _Inst_t inM = _INSTS[EUs.pipeline[EUS_PIPELINE_M]];

    for (i = 0; i &lt; _REGS_MAX; ++i)
      if (inM.write_regs[i] &amp; inD.read_regs[i])
        do_stall = true;
  }

  if (!EUs_E_DoStall() &amp;&amp; !do_stall) {
    EUs.pipeline[EUS_PIPELINE_E] = EUs.pipeline[EUS_PIPELINE_D];
    EUs.pipeline[EUS_PIPELINE_D] = -1;

    if (EUs.pipeline[EUS_PIPELINE_E] != -1) {
      EUs.cycles = _INSTS[EUs.pipeline[EUS_PIPELINE_E]].cycles -1;
      
      // Instruction is a branch
      if (_INSTS[EUs.pipeline[EUS_PIPELINE_E]].do_branch) {
	    // Update the BTB
	    InCU_BTB_Update(EUs.pipeline[EUS_PIPELINE_E], EUs.taken);
 
	    // Check for incorrect predictions:
	    if (EUs.predict_taken &amp;&amp; !EUs.taken) {
	      InCU.PC = EUs.pipeline[EUS_PIPELINE_E] +1;
	      InCU_Flush();
	    }
        if (!EUs.predict_taken &amp;&amp; EUs.taken) {
	      InCU.PC = _INSTS[EUs.pipeline[EUS_PIPELINE_E]].target;
	      InCU_Flush();
	    }
      }
    }
  }

  // Execute D (if doesn't stall):
  if (!EUs_D_DoStall()) {
    EUs.pipeline[EUS_PIPELINE_D] = InCU.IR.index;
    EUs.predict_taken            = InCU.IR.predict_taken;
    EUs.dynamic_prediction       = InCU.IR.dynamic_prediction;
    EUs.taken                    = InCU.IR.taken;
    
    InCU.IR = InCU_IBuff_Pop();

    // inst. in D is a backward branch then statically predict taken
    if (!EUs.dynamic_prediction
    &amp;&amp;  EUs.pipeline[EUS_PIPELINE_D] != -1
    &amp;&amp;  _INSTS[EUs.pipeline[EUS_PIPELINE_D]].do_branch
    &amp;&amp;  _INSTS[EUs.pipeline[EUS_PIPELINE_D]].target &lt; EUs.pipeline[EUS_PIPELINE_D]) {
      EUs.predict_taken = true;
      InCU.PC = _INSTS[EUs.pipeline[EUS_PIPELINE_D]].target;
      InCU_Flush(); // TODO: check wether it should be done or not
    }
  }
}

</declaration>
	<template>
		<name>Binary</name>
		<location id="id0" x="0" y="0">
			<urgent/>
		</location>
		<location id="id1" x="0" y="136">
		</location>
		<location id="id2" x="0" y="272">
		</location>
		<location id="id3" x="0" y="340">
			<name x="-68" y="332">BB8</name>
		</location>
		<location id="id4" x="0" y="408">
		</location>
		<location id="id5" x="0" y="476">
		</location>
		<location id="id6" x="0" y="544">
		</location>
		<location id="id7" x="0" y="680">
		</location>
		<location id="id8" x="0" y="748">
			<name x="-68" y="740">BB0</name>
		</location>
		<location id="id9" x="0" y="816">
		</location>
		<location id="id10" x="0" y="884">
		</location>
		<location id="id11" x="0" y="952">
		</location>
		<location id="id12" x="0" y="1020">
		</location>
		<location id="id13" x="0" y="68">
			<name x="-68" y="60">BB10</name>
		</location>
		<location id="id14" x="374" y="1224">
		</location>
		<location id="id15" x="0" y="1156" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id16" x="0" y="1088">
		</location>
		<location id="id17" x="0" y="1224">
		</location>
		<location id="id18" x="748" y="1428">
		</location>
		<location id="id19" x="374" y="1360" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id20" x="374" y="1564">
		</location>
		<location id="id21" x="374" y="1292">
			<name x="306" y="1284">BB4</name>
		</location>
		<location id="id22" x="374" y="1428">
		</location>
		<location id="id23" x="1122" y="1768">
		</location>
		<location id="id24" x="748" y="1700" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id25" x="1122" y="2584">
		</location>
		<location id="id26" x="1122" y="2108">
			<name x="1054" y="2100">BB9</name>
		</location>
		<location id="id27" x="1122" y="2176">
		</location>
		<location id="id28" x="1122" y="2244">
		</location>
		<location id="id29" x="1122" y="2380">
		</location>
		<location id="id30" x="1122" y="1904">
			<name x="1054" y="1896">BB7</name>
		</location>
		<location id="id31" x="1122" y="2040">
		</location>
		<location id="id32" x="1122" y="1836">
			<name x="1054" y="1828">BB6</name>
		</location>
		<location id="id33" x="748" y="1836">
			<name x="680" y="1828">BB3</name>
		</location>
		<location id="id34" x="748" y="1496">
			<name x="680" y="1488">BB2</name>
		</location>
		<location id="id35" x="748" y="1564">
		</location>
		<location id="id36" x="748" y="1632">
		</location>
		<location id="id37" x="748" y="1768">
		</location>
		<location id="id38" x="0" y="1360">
		</location>
		<location id="id39" x="0" y="204" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id40" x="0" y="612" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id41" x="1122" y="1972" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id42" x="1122" y="2312" color="#ffc0cb">
			<committed/>
		</location>
		<location id="id43" x="0" y="1292" color="#ffc0cb">
			<name x="-68" y="1283">BB1</name>
			<committed/>
		</location>
		<location id="id44" x="374" y="1496" color="#ffc0cb">
			<name x="306" y="1487">BB5</name>
			<committed/>
		</location>
		<location id="id45" x="1122" y="2448" color="#ffc0cb">
			<name x="1054" y="2439">BB11</name>
			<committed/>
		</location>
		<location id="id46" x="1122" y="2516">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id33"/>
			<target ref="id21"/>
			<label kind="guard" x="782" y="1853">IMU_IsAccessed(12)</label>
			<label kind="synchronisation" x="782" y="1870">IMU_doneAccess?</label>
			<nail x="748" y="1904"/>
			<nail x="272" y="1904"/>
			<nail x="272" y="1326"/>
		</transition>
		<transition color="#c0c0c0">
			<source ref="id20"/>
			<target ref="id30"/>
			<label kind="guard" x="408" y="1581">IMU_IsAccessed(15)</label>
			<label kind="synchronisation" x="408" y="1598">IMU_doneAccess?</label>
			<nail x="374" y="1938"/>
			<nail x="1020" y="1938"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="34" y="0">_doInitialize?</label>
			<label kind="assignment" x="34" y="17">B_Init(),
InCU.PC = 28,
_clock = 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id1"/>
			<label kind="guard" x="34" y="85">IMU_IsAccessed(28)</label>
			<label kind="synchronisation" x="34" y="102">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id39"/>
			<label kind="guard" x="34" y="153">IMU_IsAccessed(29)</label>
			<label kind="synchronisation" x="34" y="170">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="289">IMU_IsAccessed(30)</label>
			<label kind="synchronisation" x="34" y="306">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="34" y="357">IMU_IsAccessed(19)</label>
			<label kind="synchronisation" x="34" y="374">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="34" y="425">IMU_IsAccessed(20)</label>
			<label kind="synchronisation" x="34" y="442">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="34" y="493">IMU_IsAccessed(21)</label>
			<label kind="synchronisation" x="34" y="510">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id40"/>
			<label kind="guard" x="34" y="553">IMU_IsAccessed(22)</label>
			<label kind="synchronisation" x="34" y="570">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="587">execute_3058()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="34" y="697">IMU_IsAccessed(23)</label>
			<label kind="synchronisation" x="34" y="714">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="34" y="765">IMU_IsAccessed(0)</label>
			<label kind="synchronisation" x="34" y="782">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="34" y="824">IMU_IsAccessed(1)</label>
			<label kind="synchronisation" x="34" y="841">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="858">execute_3004()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="34" y="901">IMU_IsAccessed(2)</label>
			<label kind="synchronisation" x="34" y="918">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="34" y="961">IMU_IsAccessed(3)</label>
			<label kind="synchronisation" x="34" y="978">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="995">execute_300c()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="34" y="1029">IMU_IsAccessed(4)</label>
			<label kind="synchronisation" x="34" y="1046">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="1063">execute_3010()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="408" y="1173">gt()</label>
			<label kind="assignment" x="408" y="1190">_taken = true</label>
			<nail x="374" y="1156"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="34" y="1173">!gt()</label>
			<label kind="assignment" x="34" y="1190">_taken = false</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="34" y="1097">IMU_IsAccessed(5)</label>
			<label kind="synchronisation" x="34" y="1114">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="1131">execute_3014()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id21"/>
			<label kind="guard" x="408" y="1232">IMU_IsAccessed(6)</label>
			<label kind="synchronisation" x="408" y="1249">IMU_doneAccess?</label>
			<label kind="assignment" x="408" y="1266">execute_3018()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id43"/>
			<label kind="guard" x="34" y="1232">IMU_IsAccessed(6)</label>
			<label kind="synchronisation" x="34" y="1249">IMU_doneAccess?</label>
			<label kind="assignment" x="34" y="1266">execute_3018()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="782" y="1377">ge()</label>
			<label kind="assignment" x="782" y="1394">_taken = true</label>
			<nail x="748" y="1360"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id22"/>
			<label kind="guard" x="408" y="1377">!ge()</label>
			<label kind="assignment" x="408" y="1394">_taken = false</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="408" y="1300">IMU_IsAccessed(13)</label>
			<label kind="synchronisation" x="408" y="1317">IMU_doneAccess?</label>
			<label kind="assignment" x="408" y="1334">execute_3034()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id34"/>
			<label kind="guard" x="782" y="1436">IMU_IsAccessed(14)</label>
			<label kind="synchronisation" x="782" y="1453">IMU_doneAccess?</label>
			<label kind="assignment" x="782" y="1470">execute_3038()</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id44"/>
			<label kind="guard" x="408" y="1436">IMU_IsAccessed(14)</label>
			<label kind="synchronisation" x="408" y="1453">IMU_doneAccess?</label>
			<label kind="assignment" x="408" y="1470">execute_3038()</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id37"/>
			<label kind="guard" x="782" y="1717">!z()</label>
			<label kind="assignment" x="782" y="1734">_taken = false</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="1156" y="1717">z()</label>
			<label kind="assignment" x="1156" y="1734">_taken = true</label>
			<nail x="1122" y="1700"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id25"/>
			<label kind="guard" x="1156" y="2524">IMU_IsAccessed(31)</label>
			<label kind="synchronisation" x="1156" y="2541">IMU_doneAccess?</label>
			<label kind="assignment" x="1156" y="2558">_mustTerminate = true</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="1156" y="2125">IMU_IsAccessed(24)</label>
			<label kind="synchronisation" x="1156" y="2142">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="1156" y="2193">IMU_IsAccessed(25)</label>
			<label kind="synchronisation" x="1156" y="2210">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id42"/>
			<label kind="guard" x="1156" y="2261">IMU_IsAccessed(26)</label>
			<label kind="synchronisation" x="1156" y="2278">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id45"/>
			<label kind="guard" x="1156" y="2397">IMU_IsAccessed(27)</label>
			<label kind="synchronisation" x="1156" y="2414">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id41"/>
			<label kind="guard" x="1156" y="1921">IMU_IsAccessed(17)</label>
			<label kind="synchronisation" x="1156" y="1938">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id26"/>
			<label kind="guard" x="1156" y="2057">IMU_IsAccessed(18)</label>
			<label kind="synchronisation" x="1156" y="2074">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="guard" x="1156" y="1853">IMU_IsAccessed(16)</label>
			<label kind="synchronisation" x="1156" y="1870">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="guard" x="782" y="1513">IMU_IsAccessed(8)</label>
			<label kind="synchronisation" x="782" y="1530">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="guard" x="782" y="1572">IMU_IsAccessed(9)</label>
			<label kind="synchronisation" x="782" y="1589">IMU_doneAccess?</label>
			<label kind="assignment" x="782" y="1606">execute_3024()</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id24"/>
			<label kind="guard" x="782" y="1649">IMU_IsAccessed(10)</label>
			<label kind="synchronisation" x="782" y="1666">IMU_doneAccess?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id32"/>
			<label kind="guard" x="1156" y="1776">IMU_IsAccessed(11)</label>
			<label kind="synchronisation" x="1156" y="1793">IMU_doneAccess?</label>
			<label kind="assignment" x="1156" y="1810">execute_302c()</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id33"/>
			<label kind="guard" x="782" y="1776">IMU_IsAccessed(11)</label>
			<label kind="synchronisation" x="782" y="1793">IMU_doneAccess?</label>
			<label kind="assignment" x="782" y="1810">execute_302c()</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id30"/>
			<label kind="guard" x="34" y="1377">IMU_IsAccessed(7)</label>
			<label kind="synchronisation" x="34" y="1394">IMU_doneAccess?</label>
			<nail x="0" y="1938"/>
			<nail x="1020" y="1938"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id2"/>
			<label kind="guard" x="34" y="221">true</label>
			<label kind="assignment" x="34" y="238">_taken = true</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id7"/>
			<label kind="guard" x="34" y="629">true</label>
			<label kind="assignment" x="34" y="646">_taken = true</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id31"/>
			<label kind="guard" x="1156" y="1989">true</label>
			<label kind="assignment" x="1156" y="2006">_taken = true</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id29"/>
			<label kind="guard" x="1156" y="2329">true</label>
			<label kind="assignment" x="1156" y="2346">_taken = true</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id38"/>
			<label kind="guard" x="34" y="1309">true</label>
			<label kind="assignment" x="34" y="1326">_taken = true</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id20"/>
			<label kind="guard" x="408" y="1513">true</label>
			<label kind="assignment" x="408" y="1530">_taken = true</label>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="guard" x="1156" y="2465">true</label>
			<label kind="assignment" x="1156" y="2482">_taken = true</label>
		</transition>
	</template>
	<template>
		<name>sched</name>
		<location id="id47" x="0" y="102" color="#ffc0cb">
			<name x="17" y="93">end</name>
			<committed/>
		</location>
		<location id="id48" x="0" y="0">
		</location>
		<location id="id49" x="-34" y="102">
			<urgent/>
		</location>
		<init ref="id49"/>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="17" y="34">_doTerminate?</label>
			<label kind="assignment" x="17" y="51">_clock = 0</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-59" y="-59">_do?</label>
			<nail x="0" y="-102"/>
			<nail x="34" y="-102"/>
			<nail x="34" y="0"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-144" y="25">_doInitialize!</label>
			<label kind="assignment" x="-144" y="42">_Init(),
_clock = 0</label>
			<nail x="-34" y="0"/>
		</transition>
	</template>
	<template>
		<name>Flash_Memory</name>
		<location id="id50" x="0" y="-102">
		</location>
		<location id="id51" x="-68" y="204">
		</location>
		<location id="id52" x="-102" y="204">
			<urgent/>
		</location>
		<location id="id53" x="-68" y="102">
		</location>
		<location id="id54" x="-34" y="0">
			<label kind="invariant" x="-280" y="-25">Flash_clock &lt;= FLASH_LATENCY</label>
		</location>
		<init ref="id52"/>
		<transition>
			<source ref="id50"/>
			<target ref="id54"/>
			<label kind="guard" x="17" y="-93">Flash.burst_index != FLASH_BURST_MAX -1</label>
			<label kind="synchronisation" x="17" y="-76">Flash_doneBurst[Flash.burst_index]!</label>
			<label kind="assignment" x="17" y="-59">IMU_FillBuffer_Update(),
Flash.burst_index++,
Flash_clock = 0</label>
			<nail x="0" y="0"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id51"/>
			<label kind="guard" x="-51" y="136">Flash_IsTerminated()</label>
			<label kind="synchronisation" x="-51" y="153">_do!</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-212" y="136">_doInitialize?</label>
			<label kind="assignment" x="-212" y="153">Flash_Init()</label>
			<nail x="-102" y="102"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id54"/>
			<label kind="guard" x="-246" y="8">!Flash_IsTerminated()</label>
			<label kind="synchronisation" x="-246" y="25">Flash_doBurst?</label>
			<label kind="assignment" x="-246" y="42">IMU_FillBuffer_Set(),
Flash.burst_index = 0,
Flash_clock = 0</label>
			<nail x="-68" y="0"/>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id53"/>
			<label kind="guard" x="17" y="17">Flash.burst_index == FLASH_BURST_MAX -1</label>
			<label kind="synchronisation" x="17" y="34">Flash_doneBurst[Flash.burst_index]!</label>
			<label kind="assignment" x="17" y="51">IMU_FillBuffer_Update(),
IMU_ICache_Update()</label>
			<nail x="0" y="102"/>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id50"/>
			<label kind="guard" x="-289" y="-85">Flash_clock == FLASH_LATENCY</label>
			<label kind="synchronisation" x="-289" y="-68">EUs_doStep?</label>
			<nail x="-34" y="-102"/>
		</transition>
	</template>
	<template>
		<name>Static_RAM</name>
		<location id="id55" x="170" y="306">
		</location>
		<location id="id56" x="136" y="306">
			<urgent/>
		</location>
		<location id="id57" x="170" y="204">
		</location>
		<location id="id58" x="204" y="102">
			<label kind="invariant" x="221" y="110">SRAM_clock &lt;= SRAM_LATENCY</label>
		</location>
		<init ref="id56"/>
		<transition>
			<source ref="id57"/>
			<target ref="id55"/>
			<label kind="guard" x="187" y="238">SRAM_IsTerminated()</label>
			<label kind="synchronisation" x="187" y="255">_do!</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="synchronisation" x="25" y="238">_doInitialize?</label>
			<label kind="assignment" x="25" y="255">SRAM_Init()</label>
			<nail x="136" y="289"/>
			<nail x="136" y="204"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id58"/>
			<label kind="guard" x="-34" y="110">!SRAM_IsTerminated() &amp;&amp;
SRAM_IsAccessed()</label>
			<label kind="synchronisation" x="-34" y="144">EUs_doStep?</label>
			<label kind="assignment" x="-34" y="161">SRAM_clock = 0,
SRAM.executing = true</label>
			<nail x="170" y="102"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id57"/>
			<label kind="guard" x="221" y="144">SRAM_clock == SRAM_LATENCY</label>
			<label kind="synchronisation" x="221" y="161">EUs_doStep?</label>
			<label kind="assignment" x="221" y="178">SRAM.executing = false</label>
			<nail x="204" y="204"/>
		</transition>
	</template>
	<template>
		<name>Instruction_Memory_Unit</name>
		<location id="id59" x="-612" y="-102">
		</location>
		<location id="id60" x="-850" y="204">
		</location>
		<location id="id61" x="-782" y="-102">
		</location>
		<location id="id62" x="-646" y="0">
			<label kind="invariant" x="-629" y="17">IMU_clock &lt;= 1</label>
		</location>
		<location id="id63" x="-816" y="0">
		</location>
		<location id="id64" x="-850" y="102">
		</location>
		<location id="id65" x="-884" y="204">
			<urgent/>
		</location>
		<init ref="id65"/>
		<transition>
			<source ref="id59"/>
			<target ref="id62"/>
			<label kind="synchronisation" x="-595" y="-68">IMU_doneAccess!</label>
			<label kind="assignment" x="-595" y="-51">IMU_clock = 0</label>
			<nail x="-612" y="0"/>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id64"/>
			<label kind="guard" x="-629" y="51">IMU_clock == 1</label>
			<label kind="synchronisation" x="-629" y="68">EUs_doStep?</label>
			<nail x="-646" y="102"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id59"/>
			<label kind="synchronisation" x="-765" y="-144">Flash_doneBurst[0]?</label>
			<label kind="assignment" x="-765" y="-127">IMU_clock = 0</label>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id61"/>
			<label kind="guard" x="-969" y="-68">IMU_ICache_Miss()</label>
			<label kind="synchronisation" x="-969" y="-51">Flash_doBurst!</label>
			<nail x="-816" y="-102"/>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id62"/>
			<label kind="guard" x="-799" y="-42">IMU_ICache_Hit() ||
IMU_FillBuffer_Hit()</label>
			<label kind="synchronisation" x="-799" y="8">IMU_doneAccess!</label>
			<label kind="assignment" x="-799" y="25">IMU_clock = 0</label>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id63"/>
			<label kind="guard" x="-1020" y="25">!IMU_IsTerminated()</label>
			<label kind="synchronisation" x="-1020" y="42">IMU_doAccess?</label>
			<label kind="assignment" x="-1020" y="59">IMU_Set()</label>
			<nail x="-850" y="0"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id60"/>
			<label kind="guard" x="-833" y="136">IMU_IsTerminated()</label>
			<label kind="synchronisation" x="-833" y="153">_do!</label>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-994" y="136">_doInitialize?</label>
			<label kind="assignment" x="-994" y="153">IMU_Init()</label>
			<nail x="-884" y="102"/>
		</transition>
	</template>
	<template>
		<name>Instruction_and_Control_Unit</name>
		<location id="id66" x="306" y="68">
		</location>
		<location id="id67" x="272" y="68">
			<urgent/>
		</location>
		<location id="id68" x="340" y="-136">
		</location>
		<location id="id69" x="306" y="-34">
		</location>
		<init ref="id67"/>
		<transition>
			<source ref="id69"/>
			<target ref="id66"/>
			<label kind="guard" x="323" y="0">InCU_IsTerminated()</label>
			<label kind="synchronisation" x="323" y="17">_do!</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id69"/>
			<label kind="synchronisation" x="161" y="0">_doInitialize?</label>
			<label kind="assignment" x="161" y="17">InCU_Init()</label>
			<nail x="272" y="-34"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id69"/>
			<label kind="synchronisation" x="357" y="-102">IMU_doneAccess?</label>
			<label kind="assignment" x="357" y="-85">InCU_Update()</label>
			<nail x="340" y="-34"/>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id68"/>
			<label kind="guard" x="110" y="-110">!InCU_IsTerminated() &amp;&amp;
!InCU_IBuff_IsFull()</label>
			<label kind="synchronisation" x="110" y="-76">IMU_doAccess!</label>
			<nail x="306" y="-136"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Execution_Units</name>
		<location id="id70" x="238" y="102">
		</location>
		<location id="id71" x="204" y="102">
			<urgent/>
		</location>
		<location id="id72" x="238" y="0">
			<label kind="invariant" x="102" y="-25">EUs_clock  &lt;= 1</label>
		</location>
		<init ref="id71"/>
		<transition>
			<source ref="id71"/>
			<target ref="id72"/>
			<label kind="synchronisation" x="59" y="25">_doInitialize?</label>
			<label kind="assignment" x="59" y="42">EUs_Init(),
EUs_clock  = 0</label>
			<nail x="204" y="0"/>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id70"/>
			<label kind="guard" x="255" y="34">EUs_IsTerminated()</label>
			<label kind="synchronisation" x="255" y="51">_doTerminate!</label>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id72"/>
			<label kind="guard" x="289" y="-93">!EUs_IsTerminated() &amp;&amp;
EUs_clock == 1</label>
			<label kind="synchronisation" x="289" y="-59">EUs_doStep!</label>
			<label kind="assignment" x="289" y="-42">EUs_Update(),
EUs_clock  = 0</label>
			<nail x="238" y="-102"/>
			<nail x="272" y="-102"/>
			<nail x="272" y="0"/>
		</transition>
	</template>
	<system>system
    sched
  , Flash_Memory
  , Static_RAM
  , Instruction_Memory_Unit
  , Instruction_and_Control_Unit
  , Execution_Units
  , Binary
  ;
</system>
	<queries>
		<query>
			<formula>A&lt;&gt; sched.end
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>sup: _clock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
